
screen_paper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006830  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003748  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a038  0800a038  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a040  0800a040  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a044  0800a044  0001a044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b8  200001f8  0800a240  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b0  0800a240  000213b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196e3  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000442f  00000000  00000000  00039903  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001780  00000000  00000000  0003dd38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e8  00000000  00000000  0003f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ce6  00000000  00000000  000409a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001794d  00000000  00000000  00058686  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bcda  00000000  00000000  0006ffd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fbcad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005414  00000000  00000000  000fbd28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f8 	.word	0x200001f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080068d8 	.word	0x080068d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001fc 	.word	0x200001fc
 8000104:	080068d8 	.word	0x080068d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	b082      	sub	sp, #8
 8000442:	000d      	movs	r5, r1
 8000444:	4691      	mov	r9, r2
 8000446:	4698      	mov	r8, r3
 8000448:	428b      	cmp	r3, r1
 800044a:	d82f      	bhi.n	80004ac <__udivmoddi4+0x78>
 800044c:	d02c      	beq.n	80004a8 <__udivmoddi4+0x74>
 800044e:	4641      	mov	r1, r8
 8000450:	4648      	mov	r0, r9
 8000452:	f000 f8b1 	bl	80005b8 <__clzdi2>
 8000456:	0029      	movs	r1, r5
 8000458:	0006      	movs	r6, r0
 800045a:	0020      	movs	r0, r4
 800045c:	f000 f8ac 	bl	80005b8 <__clzdi2>
 8000460:	1a33      	subs	r3, r6, r0
 8000462:	469c      	mov	ip, r3
 8000464:	3b20      	subs	r3, #32
 8000466:	469a      	mov	sl, r3
 8000468:	d500      	bpl.n	800046c <__udivmoddi4+0x38>
 800046a:	e076      	b.n	800055a <__udivmoddi4+0x126>
 800046c:	464b      	mov	r3, r9
 800046e:	4652      	mov	r2, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001f      	movs	r7, r3
 8000474:	464b      	mov	r3, r9
 8000476:	4662      	mov	r2, ip
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d828      	bhi.n	80004d2 <__udivmoddi4+0x9e>
 8000480:	d025      	beq.n	80004ce <__udivmoddi4+0x9a>
 8000482:	4653      	mov	r3, sl
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5a>
 800048c:	e07b      	b.n	8000586 <__udivmoddi4+0x152>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	4652      	mov	r2, sl
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4662      	mov	r2, ip
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e018      	b.n	80004da <__udivmoddi4+0xa6>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9d0      	bls.n	800044e <__udivmoddi4+0x1a>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8a>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b002      	add	sp, #8
 80004c4:	bc1c      	pop	{r2, r3, r4}
 80004c6:	4690      	mov	r8, r2
 80004c8:	4699      	mov	r9, r3
 80004ca:	46a2      	mov	sl, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d9d7      	bls.n	8000482 <__udivmoddi4+0x4e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	4663      	mov	r3, ip
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0e9      	beq.n	80004b4 <__udivmoddi4+0x80>
 80004e0:	07fb      	lsls	r3, r7, #31
 80004e2:	4698      	mov	r8, r3
 80004e4:	4641      	mov	r1, r8
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	087b      	lsrs	r3, r7, #1
 80004ec:	4666      	mov	r6, ip
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	9800      	ldr	r0, [sp, #0]
 800051e:	9901      	ldr	r1, [sp, #4]
 8000520:	4653      	mov	r3, sl
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db23      	blt.n	8000572 <__udivmoddi4+0x13e>
 800052a:	002b      	movs	r3, r5
 800052c:	4652      	mov	r2, sl
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	4653      	mov	r3, sl
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2d      	blt.n	800059c <__udivmoddi4+0x168>
 8000540:	0026      	movs	r6, r4
 8000542:	4657      	mov	r7, sl
 8000544:	40be      	lsls	r6, r7
 8000546:	0033      	movs	r3, r6
 8000548:	0026      	movs	r6, r4
 800054a:	4667      	mov	r7, ip
 800054c:	40be      	lsls	r6, r7
 800054e:	0032      	movs	r2, r6
 8000550:	1a80      	subs	r0, r0, r2
 8000552:	4199      	sbcs	r1, r3
 8000554:	9000      	str	r0, [sp, #0]
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	e7ac      	b.n	80004b4 <__udivmoddi4+0x80>
 800055a:	4662      	mov	r2, ip
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	464a      	mov	r2, r9
 8000562:	40da      	lsrs	r2, r3
 8000564:	4661      	mov	r1, ip
 8000566:	0013      	movs	r3, r2
 8000568:	4642      	mov	r2, r8
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	431f      	orrs	r7, r3
 8000570:	e780      	b.n	8000474 <__udivmoddi4+0x40>
 8000572:	4662      	mov	r2, ip
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4666      	mov	r6, ip
 800057c:	409a      	lsls	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	40f3      	lsrs	r3, r6
 8000582:	4313      	orrs	r3, r2
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0xfc>
 8000586:	4662      	mov	r2, ip
 8000588:	2320      	movs	r3, #32
 800058a:	2100      	movs	r1, #0
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2201      	movs	r2, #1
 8000596:	40da      	lsrs	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	e780      	b.n	800049e <__udivmoddi4+0x6a>
 800059c:	2320      	movs	r3, #32
 800059e:	4662      	mov	r2, ip
 80005a0:	0026      	movs	r6, r4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	40de      	lsrs	r6, r3
 80005a6:	002f      	movs	r7, r5
 80005a8:	46b0      	mov	r8, r6
 80005aa:	4666      	mov	r6, ip
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	4646      	mov	r6, r8
 80005b0:	003b      	movs	r3, r7
 80005b2:	4333      	orrs	r3, r6
 80005b4:	e7c8      	b.n	8000548 <__udivmoddi4+0x114>
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__clzdi2>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	2900      	cmp	r1, #0
 80005bc:	d103      	bne.n	80005c6 <__clzdi2+0xe>
 80005be:	f000 f807 	bl	80005d0 <__clzsi2>
 80005c2:	3020      	adds	r0, #32
 80005c4:	e002      	b.n	80005cc <__clzdi2+0x14>
 80005c6:	1c08      	adds	r0, r1, #0
 80005c8:	f000 f802 	bl	80005d0 <__clzsi2>
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <__clzsi2>:
 80005d0:	211c      	movs	r1, #28
 80005d2:	2301      	movs	r3, #1
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	4298      	cmp	r0, r3
 80005d8:	d301      	bcc.n	80005de <__clzsi2+0xe>
 80005da:	0c00      	lsrs	r0, r0, #16
 80005dc:	3910      	subs	r1, #16
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	4298      	cmp	r0, r3
 80005e2:	d301      	bcc.n	80005e8 <__clzsi2+0x18>
 80005e4:	0a00      	lsrs	r0, r0, #8
 80005e6:	3908      	subs	r1, #8
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0x22>
 80005ee:	0900      	lsrs	r0, r0, #4
 80005f0:	3904      	subs	r1, #4
 80005f2:	a202      	add	r2, pc, #8	; (adr r2, 80005fc <__clzsi2+0x2c>)
 80005f4:	5c10      	ldrb	r0, [r2, r0]
 80005f6:	1840      	adds	r0, r0, r1
 80005f8:	4770      	bx	lr
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	02020304 	.word	0x02020304
 8000600:	01010101 	.word	0x01010101
	...

0800060c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	003b      	movs	r3, r7
 8000614:	0018      	movs	r0, r3
 8000616:	2308      	movs	r3, #8
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f005 fd4c 	bl	80060b8 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000620:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <MX_ADC_Init+0xc0>)
 8000622:	4a2b      	ldr	r2, [pc, #172]	; (80006d0 <MX_ADC_Init+0xc4>)
 8000624:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <MX_ADC_Init+0xc0>)
 8000628:	2200      	movs	r2, #0
 800062a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <MX_ADC_Init+0xc0>)
 800062e:	22c0      	movs	r2, #192	; 0xc0
 8000630:	0612      	lsls	r2, r2, #24
 8000632:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_ADC_Init+0xc0>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <MX_ADC_Init+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_ADC_Init+0xc0>)
 8000642:	2201      	movs	r2, #1
 8000644:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_ADC_Init+0xc0>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_ADC_Init+0xc0>)
 800064e:	2220      	movs	r2, #32
 8000650:	2100      	movs	r1, #0
 8000652:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_ADC_Init+0xc0>)
 8000656:	2221      	movs	r2, #33	; 0x21
 8000658:	2100      	movs	r1, #0
 800065a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_ADC_Init+0xc0>)
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	00d2      	lsls	r2, r2, #3
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_ADC_Init+0xc0>)
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_ADC_Init+0xc0>)
 800066c:	222c      	movs	r2, #44	; 0x2c
 800066e:	2100      	movs	r1, #0
 8000670:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_ADC_Init+0xc0>)
 8000674:	2204      	movs	r2, #4
 8000676:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_ADC_Init+0xc0>)
 800067a:	2200      	movs	r2, #0
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_ADC_Init+0xc0>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_ADC_Init+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_ADC_Init+0xc0>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_ADC_Init+0xc0>)
 8000692:	0018      	movs	r0, r3
 8000694:	f001 fc08 	bl	8001ea8 <HAL_ADC_Init>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800069c:	f000 fadc 	bl	8000c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006a0:	003b      	movs	r3, r7
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_ADC_Init+0xc8>)
 80006a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006a6:	003b      	movs	r3, r7
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0152      	lsls	r2, r2, #5
 80006ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ae:	003a      	movs	r2, r7
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_ADC_Init+0xc0>)
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fec1 	bl	800243c <HAL_ADC_ConfigChannel>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006be:	f000 facb 	bl	8000c58 <Error_Handler>
  }

}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	20000edc 	.word	0x20000edc
 80006d0:	40012400 	.word	0x40012400
 80006d4:	10000010 	.word	0x10000010

080006d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	230c      	movs	r3, #12
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	0018      	movs	r0, r3
 80006e6:	2314      	movs	r3, #20
 80006e8:	001a      	movs	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	f005 fce4 	bl	80060b8 <memset>
  if(adcHandle->Instance==ADC1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a2e      	ldr	r2, [pc, #184]	; (80007b0 <HAL_ADC_MspInit+0xd8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d156      	bne.n	80007a8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <HAL_ADC_MspInit+0xdc>)
 80006fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fe:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <HAL_ADC_MspInit+0xdc>)
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	0089      	lsls	r1, r1, #2
 8000704:	430a      	orrs	r2, r1
 8000706:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <HAL_ADC_MspInit+0xdc>)
 800070a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <HAL_ADC_MspInit+0xdc>)
 800070e:	2101      	movs	r1, #1
 8000710:	430a      	orrs	r2, r1
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <HAL_ADC_MspInit+0xdc>)
 8000716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000718:	2201      	movs	r2, #1
 800071a:	4013      	ands	r3, r2
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000720:	210c      	movs	r1, #12
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2210      	movs	r2, #16
 8000726:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2203      	movs	r2, #3
 800072c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	187a      	adds	r2, r7, r1
 8000736:	23a0      	movs	r3, #160	; 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f002 fb49 	bl	8002dd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 8000744:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <HAL_ADC_MspInit+0xe4>)
 8000746:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_DISABLE;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	0052      	lsls	r2, r2, #1
 8000766:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	00d2      	lsls	r2, r2, #3
 800076e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 f96e 	bl	8002a60 <HAL_DMA_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000788:	f000 fa66 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 8000790:	64da      	str	r2, [r3, #76]	; 0x4c
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_ADC_MspInit+0xe0>)
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	200c      	movs	r0, #12
 800079e:	f002 f92d 	bl	80029fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80007a2:	200c      	movs	r0, #12
 80007a4:	f002 f93f 	bl	8002a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b008      	add	sp, #32
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012400 	.word	0x40012400
 80007b4:	40021000 	.word	0x40021000
 80007b8:	20000e94 	.word	0x20000e94
 80007bc:	40020008 	.word	0x40020008

080007c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_DMA_Init+0x38>)
 80007c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_DMA_Init+0x38>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	430a      	orrs	r2, r1
 80007d0:	631a      	str	r2, [r3, #48]	; 0x30
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_DMA_Init+0x38>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	2201      	movs	r2, #1
 80007d8:	4013      	ands	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2009      	movs	r0, #9
 80007e4:	f002 f90a 	bl	80029fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e8:	2009      	movs	r0, #9
 80007ea:	f002 f91c 	bl	8002a26 <HAL_NVIC_EnableIRQ>

}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000

080007fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b08b      	sub	sp, #44	; 0x2c
 8000800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	2414      	movs	r4, #20
 8000804:	193b      	adds	r3, r7, r4
 8000806:	0018      	movs	r0, r3
 8000808:	2314      	movs	r3, #20
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f005 fc53 	bl	80060b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b50      	ldr	r3, [pc, #320]	; (8000954 <MX_GPIO_Init+0x158>)
 8000814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000816:	4b4f      	ldr	r3, [pc, #316]	; (8000954 <MX_GPIO_Init+0x158>)
 8000818:	2104      	movs	r1, #4
 800081a:	430a      	orrs	r2, r1
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
 800081e:	4b4d      	ldr	r3, [pc, #308]	; (8000954 <MX_GPIO_Init+0x158>)
 8000820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000822:	2204      	movs	r2, #4
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	4b4a      	ldr	r3, [pc, #296]	; (8000954 <MX_GPIO_Init+0x158>)
 800082c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082e:	4b49      	ldr	r3, [pc, #292]	; (8000954 <MX_GPIO_Init+0x158>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	430a      	orrs	r2, r1
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
 8000836:	4b47      	ldr	r3, [pc, #284]	; (8000954 <MX_GPIO_Init+0x158>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b44      	ldr	r3, [pc, #272]	; (8000954 <MX_GPIO_Init+0x158>)
 8000844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000846:	4b43      	ldr	r3, [pc, #268]	; (8000954 <MX_GPIO_Init+0x158>)
 8000848:	2101      	movs	r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
 800084e:	4b41      	ldr	r3, [pc, #260]	; (8000954 <MX_GPIO_Init+0x158>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <MX_GPIO_Init+0x158>)
 800085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085e:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <MX_GPIO_Init+0x158>)
 8000860:	2102      	movs	r1, #2
 8000862:	430a      	orrs	r2, r1
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
 8000866:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <MX_GPIO_Init+0x158>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	2202      	movs	r2, #2
 800086c:	4013      	ands	r3, r2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	0018      	movs	r0, r3
 800087c:	f002 fd17 	bl	80032ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000880:	4935      	ldr	r1, [pc, #212]	; (8000958 <MX_GPIO_Init+0x15c>)
 8000882:	4b36      	ldr	r3, [pc, #216]	; (800095c <MX_GPIO_Init+0x160>)
 8000884:	2200      	movs	r2, #0
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fd11 	bl	80032ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0192      	lsls	r2, r2, #6
 8000892:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	4a32      	ldr	r2, [pc, #200]	; (8000960 <MX_GPIO_Init+0x164>)
 8000898:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	4a30      	ldr	r2, [pc, #192]	; (8000964 <MX_GPIO_Init+0x168>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f002 fa94 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2201      	movs	r2, #1
 80008b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	4a2a      	ldr	r2, [pc, #168]	; (8000960 <MX_GPIO_Init+0x164>)
 80008b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2202      	movs	r2, #2
 80008bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008be:	193a      	adds	r2, r7, r4
 80008c0:	23a0      	movs	r3, #160	; 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f002 fa84 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2281      	movs	r2, #129	; 0x81
 80008d0:	0052      	lsls	r2, r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	193a      	adds	r2, r7, r4
 80008e2:	23a0      	movs	r3, #160	; 0xa0
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 fa73 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2220      	movs	r2, #32
 80008f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2201      	movs	r2, #1
 80008f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000906:	193a      	adds	r2, r7, r4
 8000908:	23a0      	movs	r3, #160	; 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f002 fa60 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 8000914:	0021      	movs	r1, r4
 8000916:	187b      	adds	r3, r7, r1
 8000918:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <MX_GPIO_Init+0x15c>)
 800091a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2201      	movs	r2, #1
 8000920:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	187b      	adds	r3, r7, r1
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <MX_GPIO_Init+0x160>)
 8000932:	0019      	movs	r1, r3
 8000934:	0010      	movs	r0, r2
 8000936:	f002 fa4d 	bl	8002dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2005      	movs	r0, #5
 8000940:	f002 f85c 	bl	80029fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000944:	2005      	movs	r0, #5
 8000946:	f002 f86e 	bl	8002a26 <HAL_NVIC_EnableIRQ>

}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b00b      	add	sp, #44	; 0x2c
 8000950:	bd90      	pop	{r4, r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	40021000 	.word	0x40021000
 8000958:	00000c14 	.word	0x00000c14
 800095c:	50000400 	.word	0x50000400
 8000960:	10110000 	.word	0x10110000
 8000964:	50000800 	.word	0x50000800

08000968 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_I2C1_Init+0x74>)
 800096e:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <MX_I2C1_Init+0x78>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_I2C1_Init+0x74>)
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <MX_I2C1_Init+0x7c>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_I2C1_Init+0x74>)
 8000980:	2201      	movs	r2, #1
 8000982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_I2C1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_I2C1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_I2C1_Init+0x74>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f002 fcc5 	bl	8003334 <HAL_I2C_Init>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d001      	beq.n	80009b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ae:	f000 f953 	bl	8000c58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <MX_I2C1_Init+0x74>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f002 fd52 	bl	8003460 <HAL_I2CEx_ConfigAnalogFilter>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009c0:	f000 f94a 	bl	8000c58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <MX_I2C1_Init+0x74>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f002 fd95 	bl	80034f8 <HAL_I2CEx_ConfigDigitalFilter>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009d2:	f000 f941 	bl	8000c58 <Error_Handler>
  }

}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000f38 	.word	0x20000f38
 80009e0:	40005400 	.word	0x40005400
 80009e4:	00303d5b 	.word	0x00303d5b

080009e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	230c      	movs	r3, #12
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	0018      	movs	r0, r3
 80009f6:	2314      	movs	r3, #20
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f005 fb5c 	bl	80060b8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <HAL_I2C_MspInit+0x80>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d129      	bne.n	8000a5e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_I2C_MspInit+0x84>)
 8000a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_I2C_MspInit+0x84>)
 8000a10:	2102      	movs	r1, #2
 8000a12:	430a      	orrs	r2, r1
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_I2C_MspInit+0x84>)
 8000a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 8000a22:	210c      	movs	r1, #12
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	22c0      	movs	r2, #192	; 0xc0
 8000a28:	0092      	lsls	r2, r2, #2
 8000a2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2212      	movs	r2, #18
 8000a30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2201      	movs	r2, #1
 8000a36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2204      	movs	r2, #4
 8000a42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a48:	0019      	movs	r1, r3
 8000a4a:	0010      	movs	r0, r2
 8000a4c:	f002 f9c2 	bl	8002dd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_I2C_MspInit+0x84>)
 8000a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_I2C_MspInit+0x84>)
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	0389      	lsls	r1, r1, #14
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b008      	add	sp, #32
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	50000400 	.word	0x50000400

08000a74 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc_var)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	if(hadc_var->Instance == ADC1){
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d108      	bne.n	8000a98 <HAL_ADC_ConvCpltCallback+0x24>
		adc=0;
		clear_paper_screen();
		draw_string(20, 50, str);
		display_screen();
*/
		if (adc>1000)
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <HAL_ADC_ConvCpltCallback+0x30>)
 8000a88:	881a      	ldrh	r2, [r3, #0]
 8000a8a:	23fa      	movs	r3, #250	; 0xfa
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d902      	bls.n	8000a98 <HAL_ADC_ConvCpltCallback+0x24>
			flag=1;
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]

	}
	//HAL_TIM_Base_Stop_IT(&htim6);
	//HAL_ADC_Stop(hadc_var);
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40012400 	.word	0x40012400
 8000aa4:	20000214 	.word	0x20000214
 8000aa8:	20000216 	.word	0x20000216

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f001 f97b 	bl	8001dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f853 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f7ff fe9f 	bl	80007fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000abe:	f7ff fe7f 	bl	80007c0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ac2:	f7ff ff51 	bl	8000968 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ac6:	f000 f8cd 	bl	8000c64 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000aca:	f000 f903 	bl	8000cd4 <MX_SPI2_Init>
  MX_TSC_Init();
 8000ace:	f000 fb41 	bl	8001154 <MX_TSC_Init>
  MX_USART1_UART_Init();
 8000ad2:	f000 fc1f 	bl	8001314 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000ad6:	f000 fc91 	bl	80013fc <MX_USB_PCD_Init>
  MX_ADC_Init();
 8000ada:	f7ff fd97 	bl	800060c <MX_ADC_Init>
  MX_TIM6_Init();
 8000ade:	f000 fae3 	bl	80010a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	gde021a1_Init();
 8000ae2:	f000 fcf3 	bl	80014cc <gde021a1_Init>
	gde021a1_Init(); //why need 2 init?!
 8000ae6:	f000 fcf1 	bl	80014cc <gde021a1_Init>

	display_screen();
	*/
	//draw_main_screen();
	//draw_menu_parametr_screen();
	clear_paper_screen();
 8000aea:	f004 fedf 	bl	80058ac <clear_paper_screen>
	draw_confirm_param_screen();
 8000aee:	f005 f8f7 	bl	8005ce0 <draw_confirm_param_screen>

	//draw_string_fix_len(30, 1, 0, &"STR1");
	//draw_string_fix_len(30, 13, 0, &"STR11111");
	//draw_string_fix_len(30, 25, 0, &"STR12222222");
	display_screen();
 8000af2:	f005 fa6f 	bl	8005fd4 <display_screen>
	HAL_ADCEx_Calibration_Start(&hadc, 0);
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <main+0xa0>)
 8000af8:	2100      	movs	r1, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 fe40 	bl	8002780 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_Start_IT(&hadc);
	HAL_ADC_Start_DMA(&hadc, (uint16_t*)&adc, 1);
 8000b00:	4913      	ldr	r1, [pc, #76]	; (8000b50 <main+0xa4>)
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <main+0xa0>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 fb42 	bl	8002190 <HAL_ADC_Start_DMA>

	          //HAL_ADC_PollForConversion(&hadc, 100); // ожидаем окончания преобразования
	          //adc = HAL_ADC_GetValue(&hadc); // читаем полученное значение в переменную adc
	          //HAL_ADC_Stop(&hadc);

	HAL_TIM_Base_Start_IT(&htim6);
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <main+0xa8>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f004 f851 	bl	8004bb6 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  flag=0;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <main+0xac>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
	  if (adc>1000){
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <main+0xa4>)
 8000b1c:	881a      	ldrh	r2, [r3, #0]
 8000b1e:	23fa      	movs	r3, #250	; 0xfa
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d9f6      	bls.n	8000b14 <main+0x68>
		//flag=0;
		uint8_t str[20];
		sprintf(str, "Screen %d", adc);
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <main+0xa4>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	490b      	ldr	r1, [pc, #44]	; (8000b5c <main+0xb0>)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	0018      	movs	r0, r3
 8000b32:	f005 fac9 	bl	80060c8 <siprintf>
		//adc=0;
		clear_paper_screen();
 8000b36:	f004 feb9 	bl	80058ac <clear_paper_screen>
		draw_string(20, 50, str);
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2132      	movs	r1, #50	; 0x32
 8000b40:	2014      	movs	r0, #20
 8000b42:	f005 f83f 	bl	8005bc4 <draw_string>
		display_screen();
 8000b46:	f005 fa45 	bl	8005fd4 <display_screen>
	  flag=0;
 8000b4a:	e7e3      	b.n	8000b14 <main+0x68>
 8000b4c:	20000edc 	.word	0x20000edc
 8000b50:	20000214 	.word	0x20000214
 8000b54:	20001034 	.word	0x20001034
 8000b58:	20000216 	.word	0x20000216
 8000b5c:	080068f0 	.word	0x080068f0

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b09d      	sub	sp, #116	; 0x74
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	2438      	movs	r4, #56	; 0x38
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2338      	movs	r3, #56	; 0x38
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2100      	movs	r1, #0
 8000b72:	f005 faa1 	bl	80060b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b76:	2324      	movs	r3, #36	; 0x24
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	2314      	movs	r3, #20
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	f005 fa99 	bl	80060b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b86:	003b      	movs	r3, r7
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2324      	movs	r3, #36	; 0x24
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f005 fa92 	bl	80060b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <SystemClock_Config+0xf0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a2e      	ldr	r2, [pc, #184]	; (8000c54 <SystemClock_Config+0xf4>)
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <SystemClock_Config+0xf0>)
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	0109      	lsls	r1, r1, #4
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8000ba6:	0021      	movs	r1, r4
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2221      	movs	r2, #33	; 0x21
 8000bac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	22a0      	movs	r2, #160	; 0xa0
 8000bb2:	02d2      	lsls	r2, r2, #11
 8000bb4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2201      	movs	r2, #1
 8000bba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	0252      	lsls	r2, r2, #9
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	02d2      	lsls	r2, r2, #11
 8000bd0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	03d2      	lsls	r2, r2, #15
 8000bd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 fe1b 	bl	8003818 <HAL_RCC_OscConfig>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000be6:	f000 f837 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	2124      	movs	r1, #36	; 0x24
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	220f      	movs	r2, #15
 8000bf0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f003 f9c2 	bl	8003f98 <HAL_RCC_ClockConfig>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000c18:	f000 f81e 	bl	8000c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000c1c:	003b      	movs	r3, r7
 8000c1e:	2249      	movs	r2, #73	; 0x49
 8000c20:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c22:	003b      	movs	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c28:	003b      	movs	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c2e:	003b      	movs	r3, r7
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	04d2      	lsls	r2, r2, #19
 8000c34:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c36:	003b      	movs	r3, r7
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f003 fb91 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000c42:	f000 f809 	bl	8000c58 <Error_Handler>
  }
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b01d      	add	sp, #116	; 0x74
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40007000 	.word	0x40007000
 8000c54:	ffffe7ff 	.word	0xffffe7ff

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c6a:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <MX_SPI1_Init+0x6c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c70:	2282      	movs	r2, #130	; 0x82
 8000c72:	0052      	lsls	r2, r2, #1
 8000c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	0212      	lsls	r2, r2, #8
 8000c7c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f003 fcb6 	bl	8004628 <HAL_SPI_Init>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cc0:	f7ff ffca 	bl	8000c58 <Error_Handler>
  }

}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000fdc 	.word	0x20000fdc
 8000cd0:	40013000 	.word	0x40013000

08000cd4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000cda:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <MX_SPI2_Init+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000ce0:	2282      	movs	r2, #130	; 0x82
 8000ce2:	0052      	lsls	r2, r2, #1
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000d1e:	2207      	movs	r2, #7
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <MX_SPI2_Init+0x64>)
 8000d24:	0018      	movs	r0, r3
 8000d26:	f003 fc7f 	bl	8004628 <HAL_SPI_Init>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8000d2e:	f7ff ff93 	bl	8000c58 <Error_Handler>
  }

}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000f84 	.word	0x20000f84
 8000d3c:	40003800 	.word	0x40003800

08000d40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b08b      	sub	sp, #44	; 0x2c
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	2314      	movs	r3, #20
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	2314      	movs	r3, #20
 8000d50:	001a      	movs	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	f005 f9b0 	bl	80060b8 <memset>
  if(spiHandle->Instance==SPI1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a42      	ldr	r2, [pc, #264]	; (8000e68 <HAL_SPI_MspInit+0x128>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d14e      	bne.n	8000e00 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d66:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	0149      	lsls	r1, r1, #5
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d74:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000d76:	2101      	movs	r1, #1
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d7c:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d80:	2201      	movs	r2, #1
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d8c:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000d8e:	2102      	movs	r1, #2
 8000d90:	430a      	orrs	r2, r1
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d94:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d98:	2202      	movs	r2, #2
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000da0:	2114      	movs	r1, #20
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	0212      	lsls	r2, r2, #8
 8000da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	000c      	movs	r4, r1
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2202      	movs	r2, #2
 8000db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	193a      	adds	r2, r7, r4
 8000dc6:	23a0      	movs	r3, #160	; 0xa0
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	0011      	movs	r1, r2
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f002 f801 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8000dd2:	0021      	movs	r1, r4
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2228      	movs	r2, #40	; 0x28
 8000dd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2202      	movs	r2, #2
 8000dde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <HAL_SPI_MspInit+0x130>)
 8000df6:	0019      	movs	r1, r3
 8000df8:	0010      	movs	r0, r2
 8000dfa:	f001 ffeb 	bl	8002dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000dfe:	e02e      	b.n	8000e5e <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <HAL_SPI_MspInit+0x134>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d129      	bne.n	8000e5e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	01c9      	lsls	r1, r1, #7
 8000e14:	430a      	orrs	r2, r1
 8000e16:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000e1e:	2102      	movs	r1, #2
 8000e20:	430a      	orrs	r2, r1
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_SPI_MspInit+0x12c>)
 8000e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e28:	2202      	movs	r2, #2
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8000e30:	2114      	movs	r1, #20
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	22f0      	movs	r2, #240	; 0xf0
 8000e36:	0212      	lsls	r2, r2, #8
 8000e38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_SPI_MspInit+0x130>)
 8000e56:	0019      	movs	r1, r3
 8000e58:	0010      	movs	r0, r2
 8000e5a:	f001 ffbb 	bl	8002dd4 <HAL_GPIO_Init>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b00b      	add	sp, #44	; 0x2c
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	40013000 	.word	0x40013000
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	50000400 	.word	0x50000400
 8000e74:	40003800 	.word	0x40003800

08000e78 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <HAL_SPI_MspDeInit+0x68>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d113      	bne.n	8000eb2 <HAL_SPI_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_SPI_MspDeInit+0x6c>)
 8000e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_SPI_MspDeInit+0x6c>)
 8000e90:	4915      	ldr	r1, [pc, #84]	; (8000ee8 <HAL_SPI_MspDeInit+0x70>)
 8000e92:	400a      	ands	r2, r1
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(ePD1_CS_GPIO_Port, ePD1_CS_Pin);
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	021a      	lsls	r2, r3, #8
 8000e9a:	23a0      	movs	r3, #160	; 0xa0
 8000e9c:	05db      	lsls	r3, r3, #23
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f002 f90d 	bl	80030c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, ePD1_SCK_Pin|ePD1_MOSI_Pin);
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_SPI_MspDeInit+0x74>)
 8000ea8:	2128      	movs	r1, #40	; 0x28
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f002 f908 	bl	80030c0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8000eb0:	e011      	b.n	8000ed6 <HAL_SPI_MspDeInit+0x5e>
  else if(spiHandle->Instance==SPI2)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_SPI_MspDeInit+0x78>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d10c      	bne.n	8000ed6 <HAL_SPI_MspDeInit+0x5e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_SPI_MspDeInit+0x6c>)
 8000ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_SPI_MspDeInit+0x6c>)
 8000ec2:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <HAL_SPI_MspDeInit+0x7c>)
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOB, NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin);
 8000ec8:	23f0      	movs	r3, #240	; 0xf0
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_SPI_MspDeInit+0x74>)
 8000ece:	0019      	movs	r1, r3
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	f002 f8f5 	bl	80030c0 <HAL_GPIO_DeInit>
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	40013000 	.word	0x40013000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	ffffefff 	.word	0xffffefff
 8000eec:	50000400 	.word	0x50000400
 8000ef0:	40003800 	.word	0x40003800
 8000ef4:	ffffbfff 	.word	0xffffbfff

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_MspInit+0x24>)
 8000efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x24>)
 8000f02:	2101      	movs	r1, #1
 8000f04:	430a      	orrs	r2, r1
 8000f06:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <HAL_MspInit+0x24>)
 8000f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_MspInit+0x24>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	0549      	lsls	r1, r1, #21
 8000f12:	430a      	orrs	r2, r1
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 ff7a 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f002 f9c4 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>

	  //HAL_TIM_Base_Start_IT(&htim6);
	  //HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc, 1);

		uint8_t str[20];
		sprintf(str, "Screen %d", adc);
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <EXTI0_1_IRQHandler+0x44>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	001a      	movs	r2, r3
 8000f66:	490d      	ldr	r1, [pc, #52]	; (8000f9c <EXTI0_1_IRQHandler+0x48>)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f005 f8ac 	bl	80060c8 <siprintf>
		//adc=0;
		clear_paper_screen();
 8000f70:	f004 fc9c 	bl	80058ac <clear_paper_screen>
		draw_string(20, 50, str);
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	001a      	movs	r2, r3
 8000f78:	2132      	movs	r1, #50	; 0x32
 8000f7a:	2014      	movs	r0, #20
 8000f7c:	f004 fe22 	bl	8005bc4 <draw_string>
		display_screen();
 8000f80:	f005 f828 	bl	8005fd4 <display_screen>

  }
  EXTI->PR|=EXTI_PR_PR0;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <EXTI0_1_IRQHandler+0x4c>)
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <EXTI0_1_IRQHandler+0x4c>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	615a      	str	r2, [r3, #20]
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b006      	add	sp, #24
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000214 	.word	0x20000214
 8000f9c:	080068fc 	.word	0x080068fc
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <DMA1_Channel1_IRQHandler+0x14>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 fe36 	bl	8002c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	20000e94 	.word	0x20000e94

08000fbc <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <ADC1_COMP_IRQHandler+0x14>)
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f001 f966 	bl	8002294 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	20000edc 	.word	0x20000edc

08000fd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_sbrk+0x50>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x16>
		heap_end = &end;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <_sbrk+0x50>)
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <_sbrk+0x54>)
 8000fe8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <_sbrk+0x50>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <_sbrk+0x50>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	18d3      	adds	r3, r2, r3
 8000ff8:	466a      	mov	r2, sp
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d907      	bls.n	800100e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ffe:	f005 f831 	bl	8006064 <__errno>
 8001002:	0003      	movs	r3, r0
 8001004:	220c      	movs	r2, #12
 8001006:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001008:	2301      	movs	r3, #1
 800100a:	425b      	negs	r3, r3
 800100c:	e006      	b.n	800101c <_sbrk+0x48>
	}

	heap_end += incr;
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <_sbrk+0x50>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	18d2      	adds	r2, r2, r3
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <_sbrk+0x50>)
 8001018:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b004      	add	sp, #16
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000218 	.word	0x20000218
 8001028:	200013b0 	.word	0x200013b0

0800102c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <SystemInit+0x64>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <SystemInit+0x64>)
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	0049      	lsls	r1, r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <SystemInit+0x64>)
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <SystemInit+0x64>)
 8001044:	4913      	ldr	r1, [pc, #76]	; (8001094 <SystemInit+0x68>)
 8001046:	400a      	ands	r2, r1
 8001048:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <SystemInit+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <SystemInit+0x64>)
 8001050:	4911      	ldr	r1, [pc, #68]	; (8001098 <SystemInit+0x6c>)
 8001052:	400a      	ands	r2, r1
 8001054:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <SystemInit+0x64>)
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <SystemInit+0x64>)
 800105c:	2101      	movs	r1, #1
 800105e:	438a      	bics	r2, r1
 8001060:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <SystemInit+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <SystemInit+0x64>)
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <SystemInit+0x70>)
 800106a:	400a      	ands	r2, r1
 800106c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <SystemInit+0x64>)
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <SystemInit+0x64>)
 8001074:	490a      	ldr	r1, [pc, #40]	; (80010a0 <SystemInit+0x74>)
 8001076:	400a      	ands	r2, r1
 8001078:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SystemInit+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <SystemInit+0x78>)
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	0512      	lsls	r2, r2, #20
 8001086:	609a      	str	r2, [r3, #8]
#endif
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	40021000 	.word	0x40021000
 8001094:	88ff400c 	.word	0x88ff400c
 8001098:	fef6fff6 	.word	0xfef6fff6
 800109c:	fffbffff 	.word	0xfffbffff
 80010a0:	ff02ffff 	.word	0xff02ffff
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	003b      	movs	r3, r7
 80010b0:	0018      	movs	r0, r3
 80010b2:	2308      	movs	r3, #8
 80010b4:	001a      	movs	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	f004 fffe 	bl	80060b8 <memset>

  htim6.Instance = TIM6;
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_TIM6_Init+0x6c>)
 80010be:	4a16      	ldr	r2, [pc, #88]	; (8001118 <MX_TIM6_Init+0x70>)
 80010c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_TIM6_Init+0x6c>)
 80010c4:	4a15      	ldr	r2, [pc, #84]	; (800111c <MX_TIM6_Init+0x74>)
 80010c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_TIM6_Init+0x6c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2999;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_TIM6_Init+0x6c>)
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <MX_TIM6_Init+0x78>)
 80010d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_TIM6_Init+0x6c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_TIM6_Init+0x6c>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f003 fd3e 	bl	8004b5e <HAL_TIM_Base_Init>
 80010e2:	1e03      	subs	r3, r0, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80010e6:	f7ff fdb7 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010ea:	003b      	movs	r3, r7
 80010ec:	2220      	movs	r2, #32
 80010ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	003b      	movs	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010f6:	003a      	movs	r2, r7
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_TIM6_Init+0x6c>)
 80010fa:	0011      	movs	r1, r2
 80010fc:	0018      	movs	r0, r3
 80010fe:	f003 fdd1 	bl	8004ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d001      	beq.n	800110a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001106:	f7ff fda7 	bl	8000c58 <Error_Handler>
  }

}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	20001034 	.word	0x20001034
 8001118:	40001000 	.word	0x40001000
 800111c:	00003e7f 	.word	0x00003e7f
 8001120:	00000bb7 	.word	0x00000bb7

08001124 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_TIM_Base_MspInit+0x28>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d105      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_TIM_Base_MspInit+0x2c>)
 8001138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_TIM_Base_MspInit+0x2c>)
 800113c:	2110      	movs	r1, #16
 800113e:	430a      	orrs	r2, r1
 8001140:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	40001000 	.word	0x40001000
 8001150:	40021000 	.word	0x40021000

08001154 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MX_TSC_Init+0x80>)
 800115a:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <MX_TSC_Init+0x84>)
 800115c:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_TSC_Init+0x80>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0552      	lsls	r2, r2, #21
 8001164:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_TSC_Init+0x80>)
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	0452      	lsls	r2, r2, #17
 800116c:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_TSC_Init+0x80>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_TSC_Init+0x80>)
 8001176:	2201      	movs	r2, #1
 8001178:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_TSC_Init+0x80>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_TSC_Init+0x80>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	0192      	lsls	r2, r2, #6
 8001186:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_TSC_Init+0x80>)
 800118a:	22a0      	movs	r2, #160	; 0xa0
 800118c:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_TSC_Init+0x80>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_TSC_Init+0x80>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_TSC_Init+0x80>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_TSC_Init+0x80>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_TSC_Init+0x80>)
 80011a8:	2291      	movs	r2, #145	; 0x91
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_TSC_Init+0x80>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <MX_TSC_Init+0x80>)
 80011b6:	2291      	movs	r2, #145	; 0x91
 80011b8:	00d2      	lsls	r2, r2, #3
 80011ba:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <MX_TSC_Init+0x80>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f003 fdb3 	bl	8004d2a <HAL_TSC_Init>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d001      	beq.n	80011cc <MX_TSC_Init+0x78>
  {
    Error_Handler();
 80011c8:	f7ff fd46 	bl	8000c58 <Error_Handler>
  }

}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	20001070 	.word	0x20001070
 80011d8:	40024000 	.word	0x40024000

080011dc <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b08b      	sub	sp, #44	; 0x2c
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	2314      	movs	r3, #20
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	0018      	movs	r0, r3
 80011ea:	2314      	movs	r3, #20
 80011ec:	001a      	movs	r2, r3
 80011ee:	2100      	movs	r1, #0
 80011f0:	f004 ff62 	bl	80060b8 <memset>
  if(tscHandle->Instance==TSC)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a43      	ldr	r2, [pc, #268]	; (8001308 <HAL_TSC_MspInit+0x12c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d17f      	bne.n	80012fe <HAL_TSC_MspInit+0x122>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <HAL_TSC_MspInit+0x130>)
 8001200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001202:	4b42      	ldr	r3, [pc, #264]	; (800130c <HAL_TSC_MspInit+0x130>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0249      	lsls	r1, r1, #9
 8001208:	430a      	orrs	r2, r1
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_TSC_MspInit+0x130>)
 800120e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	025b      	lsls	r3, r3, #9
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_TSC_MspInit+0x130>)
 800121c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121e:	4b3b      	ldr	r3, [pc, #236]	; (800130c <HAL_TSC_MspInit+0x130>)
 8001220:	2101      	movs	r1, #1
 8001222:	430a      	orrs	r2, r1
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
 8001226:	4b39      	ldr	r3, [pc, #228]	; (800130c <HAL_TSC_MspInit+0x130>)
 8001228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122a:	2201      	movs	r2, #1
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b36      	ldr	r3, [pc, #216]	; (800130c <HAL_TSC_MspInit+0x130>)
 8001234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001236:	4b35      	ldr	r3, [pc, #212]	; (800130c <HAL_TSC_MspInit+0x130>)
 8001238:	2102      	movs	r1, #2
 800123a:	430a      	orrs	r2, r1
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <HAL_TSC_MspInit+0x130>)
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	2202      	movs	r2, #2
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800124a:	2414      	movs	r4, #20
 800124c:	193b      	adds	r3, r7, r4
 800124e:	2244      	movs	r2, #68	; 0x44
 8001250:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	193b      	adds	r3, r7, r4
 8001254:	2202      	movs	r2, #2
 8001256:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	193b      	adds	r3, r7, r4
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	193b      	adds	r3, r7, r4
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001264:	193b      	adds	r3, r7, r4
 8001266:	2203      	movs	r2, #3
 8001268:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	193a      	adds	r2, r7, r4
 800126c:	23a0      	movs	r3, #160	; 0xa0
 800126e:	05db      	lsls	r3, r3, #23
 8001270:	0011      	movs	r1, r2
 8001272:	0018      	movs	r0, r3
 8001274:	f001 fdae 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8001278:	193b      	adds	r3, r7, r4
 800127a:	2288      	movs	r2, #136	; 0x88
 800127c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	2212      	movs	r2, #18
 8001282:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001290:	193b      	adds	r3, r7, r4
 8001292:	2203      	movs	r2, #3
 8001294:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	193a      	adds	r2, r7, r4
 8001298:	23a0      	movs	r3, #160	; 0xa0
 800129a:	05db      	lsls	r3, r3, #23
 800129c:	0011      	movs	r1, r2
 800129e:	0018      	movs	r0, r3
 80012a0:	f001 fd98 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a4:	0021      	movs	r1, r4
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2202      	movs	r2, #2
 80012b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2203      	movs	r2, #3
 80012c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	000c      	movs	r4, r1
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_TSC_MspInit+0x134>)
 80012ca:	0019      	movs	r1, r3
 80012cc:	0010      	movs	r0, r2
 80012ce:	f001 fd81 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012d2:	0021      	movs	r1, r4
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2202      	movs	r2, #2
 80012d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2212      	movs	r2, #18
 80012de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2203      	movs	r2, #3
 80012f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_TSC_MspInit+0x134>)
 80012f6:	0019      	movs	r1, r3
 80012f8:	0010      	movs	r0, r2
 80012fa:	f001 fd6b 	bl	8002dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b00b      	add	sp, #44	; 0x2c
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	40024000 	.word	0x40024000
 800130c:	40021000 	.word	0x40021000
 8001310:	50000400 	.word	0x50000400

08001314 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_USART1_UART_Init+0x58>)
 800131a:	4a15      	ldr	r2, [pc, #84]	; (8001370 <MX_USART1_UART_Init+0x5c>)
 800131c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001320:	22e1      	movs	r2, #225	; 0xe1
 8001322:	0252      	lsls	r2, r2, #9
 8001324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_USART1_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART1_UART_Init+0x58>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART1_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001358:	0018      	movs	r0, r3
 800135a:	f003 fd8d 	bl	8004e78 <HAL_UART_Init>
 800135e:	1e03      	subs	r3, r0, #0
 8001360:	d001      	beq.n	8001366 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001362:	f7ff fc79 	bl	8000c58 <Error_Handler>
  }

}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200010b4 	.word	0x200010b4
 8001370:	40013800 	.word	0x40013800

08001374 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	230c      	movs	r3, #12
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	0018      	movs	r0, r3
 8001382:	2314      	movs	r3, #20
 8001384:	001a      	movs	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	f004 fe96 	bl	80060b8 <memset>
  if(uartHandle->Instance==USART1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_UART_MspInit+0x80>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12a      	bne.n	80013ec <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_UART_MspInit+0x84>)
 8001398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_UART_MspInit+0x84>)
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	01c9      	lsls	r1, r1, #7
 80013a0:	430a      	orrs	r2, r1
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_UART_MspInit+0x84>)
 80013a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <HAL_UART_MspInit+0x84>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_UART_MspInit+0x84>)
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013bc:	210c      	movs	r1, #12
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	22c0      	movs	r2, #192	; 0xc0
 80013c2:	00d2      	lsls	r2, r2, #3
 80013c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	2202      	movs	r2, #2
 80013ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2203      	movs	r2, #3
 80013d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2204      	movs	r2, #4
 80013dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	187a      	adds	r2, r7, r1
 80013e0:	23a0      	movs	r3, #160	; 0xa0
 80013e2:	05db      	lsls	r3, r3, #23
 80013e4:	0011      	movs	r1, r2
 80013e6:	0018      	movs	r0, r3
 80013e8:	f001 fcf4 	bl	8002dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b008      	add	sp, #32
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40013800 	.word	0x40013800
 80013f8:	40021000 	.word	0x40021000

080013fc <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_USB_PCD_Init+0x44>)
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <MX_USB_PCD_Init+0x48>)
 8001404:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USB_PCD_Init+0x44>)
 8001408:	2208      	movs	r2, #8
 800140a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USB_PCD_Init+0x44>)
 800140e:	2202      	movs	r2, #2
 8001410:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USB_PCD_Init+0x44>)
 8001414:	2202      	movs	r2, #2
 8001416:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USB_PCD_Init+0x44>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USB_PCD_Init+0x44>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USB_PCD_Init+0x44>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <MX_USB_PCD_Init+0x44>)
 800142c:	0018      	movs	r0, r3
 800142e:	f002 f8af 	bl	8003590 <HAL_PCD_Init>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8001436:	f7ff fc0f 	bl	8000c58 <Error_Handler>
  }

}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20001134 	.word	0x20001134
 8001444:	40005c00 	.word	0x40005c00

08001448 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_PCD_MspInit+0x28>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d106      	bne.n	8001468 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_PCD_MspInit+0x2c>)
 800145c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_PCD_MspInit+0x2c>)
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	0409      	lsls	r1, r1, #16
 8001464:	430a      	orrs	r2, r1
 8001466:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40005c00 	.word	0x40005c00
 8001474:	40021000 	.word	0x40021000

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800147c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800147e:	e003      	b.n	8001488 <LoopCopyDataInit>

08001480 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001482:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001486:	3104      	adds	r1, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <LoopForever+0xe>)
  adds  r2, r0, r1
 800148c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800148e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001490:	d3f6      	bcc.n	8001480 <CopyDataInit>
  ldr  r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001494:	e002      	b.n	800149c <LoopFillZerobss>

08001496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001496:	2300      	movs	r3, #0
  str  r3, [r2]
 8001498:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149a:	3204      	adds	r2, #4

0800149c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <LoopForever+0x16>)
  cmp  r2, r3
 800149e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014a0:	d3f9      	bcc.n	8001496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014a2:	f7ff fdc3 	bl	800102c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f004 fde3 	bl	8006070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff faff 	bl	8000aac <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   r0, =_estack
 80014b0:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80014b4:	0800a048 	.word	0x0800a048
  ldr  r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014bc:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 80014c0:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 80014c4:	200013b0 	.word	0x200013b0

080014c8 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <DMA1_Channel2_3_IRQHandler>
	...

080014cc <gde021a1_Init>:
  * @brief  Initialize the GDE021A1 EPD Component.
  * @param  None
  * @retval None
  */
void gde021a1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  uint8_t nb_bytes = 0;
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]

  /* Initialize the GDE021A11 */
  EPD_IO_Init();
 80014d8:	f000 fb56 	bl	8001b88 <EPD_IO_Init>

  EPD_IO_WriteReg(EPD_REG_16);  /* Deep sleep mode disable */
 80014dc:	2010      	movs	r0, #16
 80014de:	f000 fc31 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fc04 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_17);  /* Data Entry Mode Setting */
 80014e8:	2011      	movs	r0, #17
 80014ea:	f000 fc2b 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 80014ee:	2003      	movs	r0, #3
 80014f0:	f000 fbfe 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_68);  /* Set the RAM X start/end address */
 80014f4:	2044      	movs	r0, #68	; 0x44
 80014f6:	f000 fc25 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM X address start = 00h */
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 fbf8 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteData(0x11);       /* RAM X adress end = 11h (17 * 4pixels by address = 72 pixels) */
 8001500:	2011      	movs	r0, #17
 8001502:	f000 fbf5 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_69);  /* Set the RAM Y start/end address */
 8001506:	2045      	movs	r0, #69	; 0x45
 8001508:	f000 fc1c 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM Y address start = 0 */
 800150c:	2000      	movs	r0, #0
 800150e:	f000 fbef 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteData(0xAB);       /* RAM Y adress end = 171 */
 8001512:	20ab      	movs	r0, #171	; 0xab
 8001514:	f000 fbec 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_78);  /* Set RAM X Address counter */
 8001518:	204e      	movs	r0, #78	; 0x4e
 800151a:	f000 fc13 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 800151e:	2000      	movs	r0, #0
 8001520:	f000 fbe6 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_79);  /* Set RAM Y Address counter */
 8001524:	204f      	movs	r0, #79	; 0x4f
 8001526:	f000 fc0d 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 fbe0 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_240); /* Booster Set Internal Feedback Selection */
 8001530:	20f0      	movs	r0, #240	; 0xf0
 8001532:	f000 fc07 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x1F);
 8001536:	201f      	movs	r0, #31
 8001538:	f000 fbda 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_33);  /* Disable RAM bypass and set GS transition to GSA = GS0 and GSB = GS3 */
 800153c:	2021      	movs	r0, #33	; 0x21
 800153e:	f000 fc01 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 8001542:	2003      	movs	r0, #3
 8001544:	f000 fbd4 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_44);  /* Write VCOMregister */
 8001548:	202c      	movs	r0, #44	; 0x2c
 800154a:	f000 fbfb 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0xA0);
 800154e:	20a0      	movs	r0, #160	; 0xa0
 8001550:	f000 fbce 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_60);  /* Border waveform */
 8001554:	203c      	movs	r0, #60	; 0x3c
 8001556:	f000 fbf5 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x64);
 800155a:	2064      	movs	r0, #100	; 0x64
 800155c:	f000 fbc8 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_50);  /* Write LUT register */
 8001560:	2032      	movs	r0, #50	; 0x32
 8001562:	f000 fbef 	bl	8001d44 <EPD_IO_WriteReg>

  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e00c      	b.n	8001588 <gde021a1_Init+0xbc>
  {
    EPD_IO_WriteData(WF_LUT[nb_bytes]);
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <gde021a1_Init+0xcc>)
 8001574:	5cd3      	ldrb	r3, [r2, r3]
 8001576:	b29b      	uxth	r3, r3
 8001578:	0018      	movs	r0, r3
 800157a:	f000 fbb9 	bl	8001cf0 <EPD_IO_WriteData>
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	3201      	adds	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b59      	cmp	r3, #89	; 0x59
 800158e:	d9ee      	bls.n	800156e <gde021a1_Init+0xa2>
  }
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0800698c 	.word	0x0800698c

0800159c <gde021a1_WritePixel>:
  * @brief  Writes 4 dots.
  * @param  HEX_Code: specifies the Data to write.
  * @retval None
  */
void gde021a1_WritePixel(uint8_t HEX_Code)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	0002      	movs	r2, r0
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	701a      	strb	r2, [r3, #0]
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 80015a8:	2024      	movs	r0, #36	; 0x24
 80015aa:	f000 fbcb 	bl	8001d44 <EPD_IO_WriteReg>

  /* Send the data to write */
  EPD_IO_WriteData(HEX_Code);
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 fb9b 	bl	8001cf0 <EPD_IO_WriteData>
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <gde021a1_SetDisplayWindow>:
  * @param  Width: display window width.
  * @param  Height: display window height.
  * @retval None
*/
void gde021a1_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80015c2:	b5b0      	push	{r4, r5, r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	0005      	movs	r5, r0
 80015ca:	000c      	movs	r4, r1
 80015cc:	0010      	movs	r0, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	1dbb      	adds	r3, r7, #6
 80015d2:	1c2a      	adds	r2, r5, #0
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	1c22      	adds	r2, r4, #0
 80015da:	801a      	strh	r2, [r3, #0]
 80015dc:	1cbb      	adds	r3, r7, #2
 80015de:	1c02      	adds	r2, r0, #0
 80015e0:	801a      	strh	r2, [r3, #0]
 80015e2:	003b      	movs	r3, r7
 80015e4:	1c0a      	adds	r2, r1, #0
 80015e6:	801a      	strh	r2, [r3, #0]
  /* Set Y position and the height */
  EPD_IO_WriteReg(EPD_REG_68);
 80015e8:	2044      	movs	r0, #68	; 0x44
 80015ea:	f000 fbab 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	0018      	movs	r0, r3
 80015f4:	f000 fb7c 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteData(Height);
 80015f8:	003b      	movs	r3, r7
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 fb77 	bl	8001cf0 <EPD_IO_WriteData>
  /* Set X position and the width */
  EPD_IO_WriteReg(EPD_REG_69);
 8001602:	2045      	movs	r0, #69	; 0x45
 8001604:	f000 fb9e 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 8001608:	1dbb      	adds	r3, r7, #6
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	0018      	movs	r0, r3
 800160e:	f000 fb6f 	bl	8001cf0 <EPD_IO_WriteData>
  EPD_IO_WriteData(Width);
 8001612:	1cbb      	adds	r3, r7, #2
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	0018      	movs	r0, r3
 8001618:	f000 fb6a 	bl	8001cf0 <EPD_IO_WriteData>
  /* Set the height counter */
  EPD_IO_WriteReg(EPD_REG_78);
 800161c:	204e      	movs	r0, #78	; 0x4e
 800161e:	f000 fb91 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	0018      	movs	r0, r3
 8001628:	f000 fb62 	bl	8001cf0 <EPD_IO_WriteData>
  /* Set the width counter */
  EPD_IO_WriteReg(EPD_REG_79);
 800162c:	204f      	movs	r0, #79	; 0x4f
 800162e:	f000 fb89 	bl	8001d44 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 8001632:	1dbb      	adds	r3, r7, #6
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	0018      	movs	r0, r3
 8001638:	f000 fb5a 	bl	8001cf0 <EPD_IO_WriteData>
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bdb0      	pop	{r4, r5, r7, pc}

08001644 <gde021a1_GetEpdPixelWidth>:
  * @brief  Gets the EPD pixel Width.
  * @param  None
  * @retval The EPD Pixel Width
  */
uint16_t gde021a1_GetEpdPixelWidth(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_WIDTH;
 8001648:	23ac      	movs	r3, #172	; 0xac
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <gde021a1_GetEpdPixelHeight>:
  * @brief  Gets the EPD pixel Height.
  * @param  None
  * @retval The EPD Pixel Height
  */
uint16_t gde021a1_GetEpdPixelHeight(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_HEIGHT;
 8001654:	2312      	movs	r3, #18
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <gde021a1_RefreshDisplay>:
  * @brief  Activates display update sequence.
  * @param  None
  * @retval None
  */
void gde021a1_RefreshDisplay(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 8001660:	2022      	movs	r0, #34	; 0x22
 8001662:	f000 fb6f 	bl	8001d44 <EPD_IO_WriteReg>

  /* Display update data sequence option */
  EPD_IO_WriteData(0xC4);
 8001666:	20c4      	movs	r0, #196	; 0xc4
 8001668:	f000 fb42 	bl	8001cf0 <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 800166c:	2020      	movs	r0, #32
 800166e:	f000 fb69 	bl	8001d44 <EPD_IO_WriteReg>
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <gde021a1_CloseChargePump>:
  * @brief  Disables the clock and the charge pump.
  * @param  None
  * @retval None
  */
void gde021a1_CloseChargePump(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 800167c:	2022      	movs	r0, #34	; 0x22
 800167e:	f000 fb61 	bl	8001d44 <EPD_IO_WriteReg>

  /* Disable CP then Disable Clock signal */
  EPD_IO_WriteData(0x03);
 8001682:	2003      	movs	r0, #3
 8001684:	f000 fb34 	bl	8001cf0 <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 8001688:	2020      	movs	r0, #32
 800168a:	f000 fb5b 	bl	8001d44 <EPD_IO_WriteReg>
}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <gde021a1_DrawImage>:
  * @note   Xsize have to be a multiple of 4
  * @param  Ysize: Image Y size in the EPD
  * @retval None
  */
void gde021a1_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	0005      	movs	r5, r0
 800169c:	000c      	movs	r4, r1
 800169e:	0010      	movs	r0, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	1dbb      	adds	r3, r7, #6
 80016a4:	1c2a      	adds	r2, r5, #0
 80016a6:	801a      	strh	r2, [r3, #0]
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	1c22      	adds	r2, r4, #0
 80016ac:	801a      	strh	r2, [r3, #0]
 80016ae:	1cbb      	adds	r3, r7, #2
 80016b0:	1c02      	adds	r2, r0, #0
 80016b2:	801a      	strh	r2, [r3, #0]
 80016b4:	003b      	movs	r3, r7
 80016b6:	1c0a      	adds	r2, r1, #0
 80016b8:	801a      	strh	r2, [r3, #0]
  uint32_t i, j = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  uint8_t pixels_4 = 0;
 80016be:	230f      	movs	r3, #15
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
  uint8_t pixels_4_grey[4] = {0};
 80016c6:	2308      	movs	r3, #8
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
  uint8_t nb_4_pixels, data_res = 0;
 80016ce:	230d      	movs	r3, #13
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]

  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 80016d6:	2024      	movs	r0, #36	; 0x24
 80016d8:	f000 fb34 	bl	8001d44 <EPD_IO_WriteReg>

  /* X size is a multiple of 8 */
  if ((Xsize % 8) == 0)
 80016dc:	1cbb      	adds	r3, r7, #2
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	2207      	movs	r2, #7
 80016e2:	4013      	ands	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d000      	beq.n	80016ec <gde021a1_DrawImage+0x58>
 80016ea:	e087      	b.n	80017fc <gde021a1_DrawImage+0x168>
  {
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e073      	b.n	80017da <gde021a1_DrawImage+0x146>
    {
      /* Get the current data */
      pixels_4 = pdata[i];
 80016f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	18d2      	adds	r2, r2, r3
 80016f8:	210f      	movs	r1, #15
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	701a      	strb	r2, [r3, #0]
      if (pixels_4 !=0)
 8001700:	187b      	adds	r3, r7, r1
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d05f      	beq.n	80017c8 <gde021a1_DrawImage+0x134>
      {
        /* One byte read codes 8 pixels in 1-bit bitmap */
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8001708:	230e      	movs	r3, #14
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e054      	b.n	80017bc <gde021a1_DrawImage+0x128>
        {
          /* Processing 8 pixels */
          /* Preparing the 4 pixels coded with 4 grey level per pixel
             from a monochrome xbm file */
          for (j= 0; j<4; j++)
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	e029      	b.n	800176c <gde021a1_DrawImage+0xd8>
          {
            if (((pixels_4) & 0x01) == 1)
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	4013      	ands	r3, r2
 8001722:	d00d      	beq.n	8001740 <gde021a1_DrawImage+0xac>
            {
              /* Two LSB is coding black in 4 grey level */
              pixels_4_grey[j] &= 0xFC;
 8001724:	2008      	movs	r0, #8
 8001726:	183a      	adds	r2, r7, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	18d3      	adds	r3, r2, r3
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2203      	movs	r2, #3
 8001730:	4393      	bics	r3, r2
 8001732:	b2d9      	uxtb	r1, r3
 8001734:	183a      	adds	r2, r7, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	18d3      	adds	r3, r2, r3
 800173a:	1c0a      	adds	r2, r1, #0
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	e00c      	b.n	800175a <gde021a1_DrawImage+0xc6>
            }
            else
            {
              /* Two LSB is coded white in 4 grey level */
              pixels_4_grey[j] |= 0x03;
 8001740:	2008      	movs	r0, #8
 8001742:	183a      	adds	r2, r7, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	18d3      	adds	r3, r2, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2203      	movs	r2, #3
 800174c:	4313      	orrs	r3, r2
 800174e:	b2d9      	uxtb	r1, r3
 8001750:	183a      	adds	r2, r7, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	1c0a      	adds	r2, r1, #0
 8001758:	701a      	strb	r2, [r3, #0]
            }
            pixels_4 = pixels_4 >> 1;
 800175a:	220f      	movs	r2, #15
 800175c:	18bb      	adds	r3, r7, r2
 800175e:	18ba      	adds	r2, r7, r2
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	0852      	lsrs	r2, r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	3301      	adds	r3, #1
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d9d2      	bls.n	8001718 <gde021a1_DrawImage+0x84>
          }

          /* Processing 4 pixels */
          /* Format the data to have the Lower pixel number sent on the MSB for the SPI to fit with the RAM
             EPD topology */
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8001772:	2108      	movs	r1, #8
 8001774:	187b      	adds	r3, r7, r1
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	019b      	lsls	r3, r3, #6
 800177a:	b25a      	sxtb	r2, r3
 800177c:	187b      	adds	r3, r7, r1
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	b25b      	sxtb	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b25a      	sxtb	r2, r3
 8001788:	187b      	adds	r3, r7, r1
 800178a:	789b      	ldrb	r3, [r3, #2]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	b25b      	sxtb	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b25a      	sxtb	r2, r3
 8001794:	187b      	adds	r3, r7, r1
 8001796:	78db      	ldrb	r3, [r3, #3]
 8001798:	b25b      	sxtb	r3, r3
 800179a:	4313      	orrs	r3, r2
 800179c:	b25a      	sxtb	r2, r3
 800179e:	210d      	movs	r1, #13
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	701a      	strb	r2, [r3, #0]

          /* Send the data to the EPD's RAM through SPI */
          EPD_IO_WriteData(data_res);
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 faa0 	bl	8001cf0 <EPD_IO_WriteData>
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80017b0:	210e      	movs	r1, #14
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	3201      	adds	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	230e      	movs	r3, #14
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d9a5      	bls.n	8001712 <gde021a1_DrawImage+0x7e>
 80017c6:	e005      	b.n	80017d4 <gde021a1_DrawImage+0x140>
      }
      else
      {
        /* 1 byte read from xbm files is equivalent to 8 pixels in the
           other words 2 bytes to be transferred */
        EPD_IO_WriteData(0xFF);
 80017c8:	20ff      	movs	r0, #255	; 0xff
 80017ca:	f000 fa91 	bl	8001cf0 <EPD_IO_WriteData>
        EPD_IO_WriteData(0xFF);
 80017ce:	20ff      	movs	r0, #255	; 0xff
 80017d0:	f000 fa8e 	bl	8001cf0 <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	003b      	movs	r3, r7
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	1cba      	adds	r2, r7, #2
 80017e0:	8812      	ldrh	r2, [r2, #0]
 80017e2:	0892      	lsrs	r2, r2, #2
 80017e4:	b292      	uxth	r2, r2
 80017e6:	4353      	muls	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da00      	bge.n	80017ee <gde021a1_DrawImage+0x15a>
 80017ec:	3301      	adds	r3, #1
 80017ee:	105b      	asrs	r3, r3, #1
 80017f0:	001a      	movs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d200      	bcs.n	80017fa <gde021a1_DrawImage+0x166>
 80017f8:	e77b      	b.n	80016f2 <gde021a1_DrawImage+0x5e>
          EPD_IO_WriteData(0xFF);
        }
      }
    }
  }
}
 80017fa:	e10f      	b.n	8001a1c <gde021a1_DrawImage+0x388>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e0fb      	b.n	80019fa <gde021a1_DrawImage+0x366>
      pixels_4 = pdata[i];
 8001802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	18d2      	adds	r2, r2, r3
 8001808:	230f      	movs	r3, #15
 800180a:	18fb      	adds	r3, r7, r3
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	701a      	strb	r2, [r3, #0]
      if (((i+1) % (((Xsize/4)+1)/2)) != 0)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	1cbb      	adds	r3, r7, #2
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	b29b      	uxth	r3, r3
 800181c:	3301      	adds	r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	da00      	bge.n	8001824 <gde021a1_DrawImage+0x190>
 8001822:	3301      	adds	r3, #1
 8001824:	105b      	asrs	r3, r3, #1
 8001826:	0019      	movs	r1, r3
 8001828:	0010      	movs	r0, r2
 800182a:	f7fe fcf3 	bl	8000214 <__aeabi_uidivmod>
 800182e:	1e0b      	subs	r3, r1, #0
 8001830:	d100      	bne.n	8001834 <gde021a1_DrawImage+0x1a0>
 8001832:	e071      	b.n	8001918 <gde021a1_DrawImage+0x284>
        if (pixels_4 !=0)
 8001834:	230f      	movs	r3, #15
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d05f      	beq.n	80018fe <gde021a1_DrawImage+0x26a>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 800183e:	230e      	movs	r3, #14
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e054      	b.n	80018f2 <gde021a1_DrawImage+0x25e>
            for (j= 0; j<4; j++)
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	e029      	b.n	80018a2 <gde021a1_DrawImage+0x20e>
              if (((pixels_4) & 0x01) == 1)
 800184e:	230f      	movs	r3, #15
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	d00d      	beq.n	8001876 <gde021a1_DrawImage+0x1e2>
                pixels_4_grey[j] &= 0xFC;
 800185a:	2008      	movs	r0, #8
 800185c:	183a      	adds	r2, r7, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	18d3      	adds	r3, r2, r3
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2203      	movs	r2, #3
 8001866:	4393      	bics	r3, r2
 8001868:	b2d9      	uxtb	r1, r3
 800186a:	183a      	adds	r2, r7, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	18d3      	adds	r3, r2, r3
 8001870:	1c0a      	adds	r2, r1, #0
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	e00c      	b.n	8001890 <gde021a1_DrawImage+0x1fc>
                pixels_4_grey[j] |= 0x03;
 8001876:	2008      	movs	r0, #8
 8001878:	183a      	adds	r2, r7, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	18d3      	adds	r3, r2, r3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2203      	movs	r2, #3
 8001882:	4313      	orrs	r3, r2
 8001884:	b2d9      	uxtb	r1, r3
 8001886:	183a      	adds	r2, r7, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	1c0a      	adds	r2, r1, #0
 800188e:	701a      	strb	r2, [r3, #0]
              pixels_4 = pixels_4 >> 1;
 8001890:	220f      	movs	r2, #15
 8001892:	18bb      	adds	r3, r7, r2
 8001894:	18ba      	adds	r2, r7, r2
 8001896:	7812      	ldrb	r2, [r2, #0]
 8001898:	0852      	lsrs	r2, r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
            for (j= 0; j<4; j++)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	3301      	adds	r3, #1
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d9d2      	bls.n	800184e <gde021a1_DrawImage+0x1ba>
            data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 80018a8:	2108      	movs	r1, #8
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	019b      	lsls	r3, r3, #6
 80018b0:	b25a      	sxtb	r2, r3
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	785b      	ldrb	r3, [r3, #1]
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	b25a      	sxtb	r2, r3
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	789b      	ldrb	r3, [r3, #2]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b25a      	sxtb	r2, r3
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	78db      	ldrb	r3, [r3, #3]
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b25a      	sxtb	r2, r3
 80018d4:	210d      	movs	r1, #13
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	701a      	strb	r2, [r3, #0]
            EPD_IO_WriteData(data_res);
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 fa05 	bl	8001cf0 <EPD_IO_WriteData>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80018e6:	210e      	movs	r1, #14
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	3201      	adds	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	230e      	movs	r3, #14
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d9a5      	bls.n	8001848 <gde021a1_DrawImage+0x1b4>
 80018fc:	e07a      	b.n	80019f4 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0)
 80018fe:	230f      	movs	r3, #15
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d000      	beq.n	800190a <gde021a1_DrawImage+0x276>
 8001908:	e074      	b.n	80019f4 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 800190a:	20ff      	movs	r0, #255	; 0xff
 800190c:	f000 f9f0 	bl	8001cf0 <EPD_IO_WriteData>
          EPD_IO_WriteData(0xFF);
 8001910:	20ff      	movs	r0, #255	; 0xff
 8001912:	f000 f9ed 	bl	8001cf0 <EPD_IO_WriteData>
 8001916:	e06d      	b.n	80019f4 <gde021a1_DrawImage+0x360>
      else if (((i+1) % (((Xsize/4)+1)/2)) == 0)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	1cbb      	adds	r3, r7, #2
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	b29b      	uxth	r3, r3
 8001924:	3301      	adds	r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	da00      	bge.n	800192c <gde021a1_DrawImage+0x298>
 800192a:	3301      	adds	r3, #1
 800192c:	105b      	asrs	r3, r3, #1
 800192e:	0019      	movs	r1, r3
 8001930:	0010      	movs	r0, r2
 8001932:	f7fe fc6f 	bl	8000214 <__aeabi_uidivmod>
 8001936:	1e0b      	subs	r3, r1, #0
 8001938:	d15c      	bne.n	80019f4 <gde021a1_DrawImage+0x360>
        if (pixels_4 !=0xf0)
 800193a:	230f      	movs	r3, #15
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2bf0      	cmp	r3, #240	; 0xf0
 8001942:	d04f      	beq.n	80019e4 <gde021a1_DrawImage+0x350>
          for (j= 0; j<4; j++)
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	e029      	b.n	800199e <gde021a1_DrawImage+0x30a>
            if (((pixels_4) & 0x01) == 1)
 800194a:	230f      	movs	r3, #15
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	4013      	ands	r3, r2
 8001954:	d00d      	beq.n	8001972 <gde021a1_DrawImage+0x2de>
              pixels_4_grey[j] &= 0xFC;
 8001956:	2008      	movs	r0, #8
 8001958:	183a      	adds	r2, r7, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	18d3      	adds	r3, r2, r3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2203      	movs	r2, #3
 8001962:	4393      	bics	r3, r2
 8001964:	b2d9      	uxtb	r1, r3
 8001966:	183a      	adds	r2, r7, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	18d3      	adds	r3, r2, r3
 800196c:	1c0a      	adds	r2, r1, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e00c      	b.n	800198c <gde021a1_DrawImage+0x2f8>
              pixels_4_grey[j] |= 0x03;
 8001972:	2008      	movs	r0, #8
 8001974:	183a      	adds	r2, r7, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	18d3      	adds	r3, r2, r3
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2203      	movs	r2, #3
 800197e:	4313      	orrs	r3, r2
 8001980:	b2d9      	uxtb	r1, r3
 8001982:	183a      	adds	r2, r7, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	18d3      	adds	r3, r2, r3
 8001988:	1c0a      	adds	r2, r1, #0
 800198a:	701a      	strb	r2, [r3, #0]
            pixels_4 = pixels_4 >> 1;
 800198c:	220f      	movs	r2, #15
 800198e:	18bb      	adds	r3, r7, r2
 8001990:	18ba      	adds	r2, r7, r2
 8001992:	7812      	ldrb	r2, [r2, #0]
 8001994:	0852      	lsrs	r2, r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	3301      	adds	r3, #1
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d9d2      	bls.n	800194a <gde021a1_DrawImage+0x2b6>
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 80019a4:	2108      	movs	r1, #8
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	019b      	lsls	r3, r3, #6
 80019ac:	b25a      	sxtb	r2, r3
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	785b      	ldrb	r3, [r3, #1]
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b25a      	sxtb	r2, r3
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	789b      	ldrb	r3, [r3, #2]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b25a      	sxtb	r2, r3
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	78db      	ldrb	r3, [r3, #3]
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	4313      	orrs	r3, r2
 80019ce:	b25a      	sxtb	r2, r3
 80019d0:	210d      	movs	r1, #13
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	701a      	strb	r2, [r3, #0]
          EPD_IO_WriteData(data_res);
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 f987 	bl	8001cf0 <EPD_IO_WriteData>
 80019e2:	e007      	b.n	80019f4 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0xf0)
 80019e4:	230f      	movs	r3, #15
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2bf0      	cmp	r3, #240	; 0xf0
 80019ec:	d102      	bne.n	80019f4 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 80019ee:	20ff      	movs	r0, #255	; 0xff
 80019f0:	f000 f97e 	bl	8001cf0 <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	003b      	movs	r3, r7
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	1cba      	adds	r2, r7, #2
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	0892      	lsrs	r2, r2, #2
 8001a04:	b292      	uxth	r2, r2
 8001a06:	3201      	adds	r2, #1
 8001a08:	4353      	muls	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da00      	bge.n	8001a10 <gde021a1_DrawImage+0x37c>
 8001a0e:	3301      	adds	r3, #1
 8001a10:	105b      	asrs	r3, r3, #1
 8001a12:	001a      	movs	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d200      	bcs.n	8001a1c <gde021a1_DrawImage+0x388>
 8001a1a:	e6f2      	b.n	8001802 <gde021a1_DrawImage+0x16e>
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b006      	add	sp, #24
 8001a22:	bdb0      	pop	{r4, r5, r7, pc}

08001a24 <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <SPIx_Init+0x74>)
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f002 ffdd 	bl	80049ea <HAL_SPI_GetState>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d12d      	bne.n	8001a90 <SPIx_Init+0x6c>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <SPIx_Init+0x74>)
 8001a36:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <SPIx_Init+0x78>)
 8001a38:	601a      	str	r2, [r3, #0]
    
    /* On STM32L0538-DISCO, EPD ID cannot be read then keep a common configuration */
    /* for EPD (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a EPD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Mode               = SPI_MODE_MASTER;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <SPIx_Init+0x74>)
 8001a3c:	2282      	movs	r2, #130	; 0x82
 8001a3e:	0052      	lsls	r2, r2, #1
 8001a40:	605a      	str	r2, [r3, #4]
    SpiHandle.Init.Direction          = SPI_DIRECTION_2LINES;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <SPIx_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.BaudRatePrescaler  = SPI_BAUDRATEPRESCALER_8;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <SPIx_Init+0x74>)
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.DataSize           = SPI_DATASIZE_8BIT;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <SPIx_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.CLKPhase           = SPI_PHASE_2EDGE;
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <SPIx_Init+0x74>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity        = SPI_POLARITY_HIGH;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <SPIx_Init+0x74>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.FirstBit           = SPI_FIRSTBIT_MSB;
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <SPIx_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS                = SPI_NSS_SOFT;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <SPIx_Init+0x74>)
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.CRCCalculation     = SPI_CRCCALCULATION_DISABLE;
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <SPIx_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial      = 7;
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <SPIx_Init+0x74>)
 8001a76:	2207      	movs	r2, #7
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.TIMode             = SPI_TIMODE_DISABLE;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <SPIx_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
    
    SPIx_MspInit(&SpiHandle);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SPIx_Init+0x74>)
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 f83a 	bl	8001afc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <SPIx_Init+0x74>)
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f002 fdcc 	bl	8004628 <HAL_SPI_Init>
  }
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	2000021c 	.word	0x2000021c
 8001a9c:	40013000 	.word	0x40013000

08001aa0 <SPIx_Write>:
  * @brief  SPI Write a byte to device.
  * @param  Value: value to be written
  * @retval None
  */
static void SPIx_Write(uint8_t Value)
{
 8001aa0:	b5b0      	push	{r4, r5, r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aac:	250f      	movs	r5, #15
 8001aae:	197b      	adds	r3, r7, r5
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SPIx_TIMEOUT_MAX);
 8001ab4:	197c      	adds	r4, r7, r5
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	015b      	lsls	r3, r3, #5
 8001aba:	1df9      	adds	r1, r7, #7
 8001abc:	4807      	ldr	r0, [pc, #28]	; (8001adc <SPIx_Write+0x3c>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f002 fe45 	bl	800474e <HAL_SPI_Transmit>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	7023      	strb	r3, [r4, #0]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ac8:	197b      	adds	r3, r7, r5
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SPIx_Write+0x34>
  {
    /* Re-Initiaize the BUS */
    SPIx_Error();
 8001ad0:	f000 f806 	bl	8001ae0 <SPIx_Error>
  }
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b004      	add	sp, #16
 8001ada:	bdb0      	pop	{r4, r5, r7, pc}
 8001adc:	2000021c 	.word	0x2000021c

08001ae0 <SPIx_Error>:
  * @brief  SPI error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error (void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* De-Initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SPIx_Error+0x18>)
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f002 fe08 	bl	80046fc <HAL_SPI_DeInit>

  /* Re-Initiaize the SPI comunication BUS */
  SPIx_Init();
 8001aec:	f7ff ff9a 	bl	8001a24 <SPIx_Init>
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	2000021c 	.word	0x2000021c

08001afc <SPIx_MspInit>:
  * @brief  SPI MSP Init
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <SPIx_MspInit+0x84>)
 8001b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <SPIx_MspInit+0x84>)
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <SPIx_MspInit+0x84>)
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin = DISCOVERY_SPIx_SCK_PIN;
 8001b1c:	210c      	movs	r1, #12
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	2208      	movs	r2, #8
 8001b22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	2202      	movs	r2, #2
 8001b28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	2203      	movs	r2, #3
 8001b34:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = DISCOVERY_SPIx_AF;
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStruct);
 8001b3c:	000c      	movs	r4, r1
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <SPIx_MspInit+0x88>)
 8001b42:	0019      	movs	r1, r3
 8001b44:	0010      	movs	r0, r2
 8001b46:	f001 f945 	bl	8002dd4 <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin = DISCOVERY_SPIx_MOSI_PIN;
 8001b4a:	0021      	movs	r1, r4
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	2220      	movs	r2, #32
 8001b50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = DISCOVERY_SPIx_AF;
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStruct);
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <SPIx_MspInit+0x88>)
 8001b62:	0019      	movs	r1, r3
 8001b64:	0010      	movs	r0, r2
 8001b66:	f001 f935 	bl	8002dd4 <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SPIx_MspInit+0x84>)
 8001b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SPIx_MspInit+0x84>)
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	0149      	lsls	r1, r1, #5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b009      	add	sp, #36	; 0x24
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	50000400 	.word	0x50000400

08001b88 <EPD_IO_Init>:
  * @brief  Configures the EPD SPI interface.
  * @param  None
  * @retval None
  */
void EPD_IO_Init(void)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b08b      	sub	sp, #44	; 0x2c
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* EPD_CS_GPIO and EPD_DC_GPIO Periph clock enable */
  EPD_CS_GPIO_CLK_ENABLE();
 8001b8e:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b92:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001b94:	2101      	movs	r1, #1
 8001b96:	430a      	orrs	r2, r1
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b9a:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
  EPD_DC_GPIO_CLK_ENABLE();
 8001ba6:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001baa:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001bac:	2102      	movs	r1, #2
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bb2:	4b4d      	ldr	r3, [pc, #308]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  EPD_RESET_GPIO_CLK_ENABLE();
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc2:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  EPD_BUSY_GPIO_CLK_ENABLE();
 8001bd6:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bda:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001bdc:	2101      	movs	r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	2201      	movs	r2, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  EPD_PWR_GPIO_CLK_ENABLE();
 8001bee:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <EPD_IO_Init+0x160>)
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]

  /* Configure EPD_CS_PIN pin: EPD Card CS pin */
  GPIO_InitStruct.Pin = EPD_CS_PIN;
 8001c06:	2114      	movs	r1, #20
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	0212      	lsls	r2, r2, #8
 8001c0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2201      	movs	r2, #1
 8001c14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_CS_GPIO_PORT, &GPIO_InitStruct);
 8001c22:	000c      	movs	r4, r1
 8001c24:	187a      	adds	r2, r7, r1
 8001c26:	23a0      	movs	r3, #160	; 0xa0
 8001c28:	05db      	lsls	r3, r3, #23
 8001c2a:	0011      	movs	r1, r2
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f001 f8d1 	bl	8002dd4 <HAL_GPIO_Init>

  /* Configure EPD_DC_PIN pin: EPD Card DC pin */
  GPIO_InitStruct.Pin = EPD_DC_PIN;
 8001c32:	0021      	movs	r1, r4
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(EPD_DC_GPIO_PORT, &GPIO_InitStruct);
 8001c3c:	000c      	movs	r4, r1
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	4a2a      	ldr	r2, [pc, #168]	; (8001cec <EPD_IO_Init+0x164>)
 8001c42:	0019      	movs	r1, r3
 8001c44:	0010      	movs	r0, r2
 8001c46:	f001 f8c5 	bl	8002dd4 <HAL_GPIO_Init>

  /* Configure EPD_RESET_PIN pin */
  GPIO_InitStruct.Pin = EPD_RESET_PIN;
 8001c4a:	0021      	movs	r1, r4
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	2204      	movs	r2, #4
 8001c50:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(EPD_PWR_GPIO_PORT, &GPIO_InitStruct);
 8001c52:	000c      	movs	r4, r1
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	4a25      	ldr	r2, [pc, #148]	; (8001cec <EPD_IO_Init+0x164>)
 8001c58:	0019      	movs	r1, r3
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	f001 f8ba 	bl	8002dd4 <HAL_GPIO_Init>

  /* Configure EPD_RESET_PIN pin */
  GPIO_InitStruct.Pin = EPD_PWR_PIN;
 8001c60:	0021      	movs	r1, r4
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	00d2      	lsls	r2, r2, #3
 8001c68:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(EPD_RESET_GPIO_PORT, &GPIO_InitStruct);
 8001c6a:	000c      	movs	r4, r1
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <EPD_IO_Init+0x164>)
 8001c70:	0019      	movs	r1, r3
 8001c72:	0010      	movs	r0, r2
 8001c74:	f001 f8ae 	bl	8002dd4 <HAL_GPIO_Init>

  /* Configure EPD_BUSY_PIN pin */
  GPIO_InitStruct.Pin = EPD_BUSY_PIN;
 8001c78:	0021      	movs	r1, r4
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	0052      	lsls	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EPD_BUSY_GPIO_PORT, &GPIO_InitStruct);
 8001c8e:	187a      	adds	r2, r7, r1
 8001c90:	23a0      	movs	r3, #160	; 0xa0
 8001c92:	05db      	lsls	r3, r3, #23
 8001c94:	0011      	movs	r1, r2
 8001c96:	0018      	movs	r0, r3
 8001c98:	f001 f89c 	bl	8002dd4 <HAL_GPIO_Init>

  /* Enbale Display */
  EPD_PWR_LOW();
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4812      	ldr	r0, [pc, #72]	; (8001cec <EPD_IO_Init+0x164>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	f001 fb02 	bl	80032ae <HAL_GPIO_WritePin>

  /* Set or Reset the control line */
  EPD_CS_LOW();
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	0219      	lsls	r1, r3, #8
 8001cae:	23a0      	movs	r3, #160	; 0xa0
 8001cb0:	05db      	lsls	r3, r3, #23
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f001 fafa 	bl	80032ae <HAL_GPIO_WritePin>
  EPD_CS_HIGH();
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	0219      	lsls	r1, r3, #8
 8001cbe:	23a0      	movs	r3, #160	; 0xa0
 8001cc0:	05db      	lsls	r3, r3, #23
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f001 faf2 	bl	80032ae <HAL_GPIO_WritePin>

  /* EPD reset pin mamagement */
  EPD_RESET_HIGH();
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <EPD_IO_Init+0x164>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2104      	movs	r1, #4
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f001 faec 	bl	80032ae <HAL_GPIO_WritePin>
  EPD_Delay(10);
 8001cd6:	200a      	movs	r0, #10
 8001cd8:	f000 f85c 	bl	8001d94 <EPD_Delay>

  /* SPI Configuration */
  SPIx_Init();
 8001cdc:	f7ff fea2 	bl	8001a24 <SPIx_Init>
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b00b      	add	sp, #44	; 0x2c
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	50000400 	.word	0x50000400

08001cf0 <EPD_IO_WriteData>:
  * @brief  Write register value.
  * @param  None
  * @retval None
  */
void EPD_IO_WriteData(uint16_t RegValue) 
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	1dbb      	adds	r3, r7, #6
 8001cfa:	801a      	strh	r2, [r3, #0]
  /* Reset EPD control line CS */
  EPD_CS_LOW();
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	0219      	lsls	r1, r3, #8
 8001d00:	23a0      	movs	r3, #160	; 0xa0
 8001d02:	05db      	lsls	r3, r3, #23
 8001d04:	2200      	movs	r2, #0
 8001d06:	0018      	movs	r0, r3
 8001d08:	f001 fad1 	bl	80032ae <HAL_GPIO_WritePin>

  /* Set EPD data/command line DC to High */
  EPD_DC_HIGH();
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	480b      	ldr	r0, [pc, #44]	; (8001d40 <EPD_IO_WriteData+0x50>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	0019      	movs	r1, r3
 8001d16:	f001 faca 	bl	80032ae <HAL_GPIO_WritePin>

  /* Send Data */
  SPIx_Write(RegValue);
 8001d1a:	1dbb      	adds	r3, r7, #6
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff febd 	bl	8001aa0 <SPIx_Write>

  /* Deselect: Chip Select high */
  EPD_CS_HIGH();
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	0219      	lsls	r1, r3, #8
 8001d2a:	23a0      	movs	r3, #160	; 0xa0
 8001d2c:	05db      	lsls	r3, r3, #23
 8001d2e:	2201      	movs	r2, #1
 8001d30:	0018      	movs	r0, r3
 8001d32:	f001 fabc 	bl	80032ae <HAL_GPIO_WritePin>
}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b002      	add	sp, #8
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	50000400 	.word	0x50000400

08001d44 <EPD_IO_WriteReg>:
  * @brief  Writes command to selected EPD register.
  * @param  Reg: Address of the selected register.
  * @retval None
  */
void EPD_IO_WriteReg(uint8_t Reg)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	1dfb      	adds	r3, r7, #7
 8001d4e:	701a      	strb	r2, [r3, #0]
  /* Reset EPD control line CS */
  EPD_CS_LOW();
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	0219      	lsls	r1, r3, #8
 8001d54:	23a0      	movs	r3, #160	; 0xa0
 8001d56:	05db      	lsls	r3, r3, #23
 8001d58:	2200      	movs	r2, #0
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f001 faa7 	bl	80032ae <HAL_GPIO_WritePin>
  
  /* Set EPD data/command line DC to Low */
  EPD_DC_LOW();
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	480a      	ldr	r0, [pc, #40]	; (8001d90 <EPD_IO_WriteReg+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	0019      	movs	r1, r3
 8001d6a:	f001 faa0 	bl	80032ae <HAL_GPIO_WritePin>

  /* Send Command */
  SPIx_Write(Reg);
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7ff fe94 	bl	8001aa0 <SPIx_Write>

  /* Deselect: Chip Select high */
  EPD_CS_HIGH();
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	0219      	lsls	r1, r3, #8
 8001d7c:	23a0      	movs	r3, #160	; 0xa0
 8001d7e:	05db      	lsls	r3, r3, #23
 8001d80:	2201      	movs	r2, #1
 8001d82:	0018      	movs	r0, r3
 8001d84:	f001 fa93 	bl	80032ae <HAL_GPIO_WritePin>
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	50000400 	.word	0x50000400

08001d94 <EPD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void EPD_Delay (uint32_t Delay)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_Delay (Delay);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f000 f864 	bl	8001e6c <HAL_Delay>
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db2:	1dfb      	adds	r3, r7, #7
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_Init+0x3c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_Init+0x3c>)
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f000 f811 	bl	8001dec <HAL_InitTick>
 8001dca:	1e03      	subs	r3, r0, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e001      	b.n	8001dda <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dd6:	f7ff f88f 	bl	8000ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b002      	add	sp, #8
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	40022000 	.word	0x40022000

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001df4:	230f      	movs	r3, #15
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_InitTick+0x50>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	23fa      	movs	r3, #250	; 0xfa
 8001e02:	0099      	lsls	r1, r3, #2
 8001e04:	0010      	movs	r0, r2
 8001e06:	f7fe f97f 	bl	8000108 <__udivsi3>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f000 fe1a 	bl	8002a46 <HAL_SYSTICK_Config>
 8001e12:	1e03      	subs	r3, r0, #0
 8001e14:	d004      	beq.n	8001e20 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8001e16:	230f      	movs	r3, #15
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	e006      	b.n	8001e2e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	2301      	movs	r3, #1
 8001e24:	425b      	negs	r3, r3
 8001e26:	2200      	movs	r2, #0
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 fde7 	bl	80029fc <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001e2e:	230f      	movs	r3, #15
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	781b      	ldrb	r3, [r3, #0]
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b004      	add	sp, #16
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000000 	.word	0x20000000

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  uwTick++;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_IncTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <HAL_IncTick+0x14>)
 8001e4c:	601a      	str	r2, [r3, #0]
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200013a8 	.word	0x200013a8

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b02      	ldr	r3, [pc, #8]	; (8001e68 <HAL_GetTick+0x10>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	200013a8 	.word	0x200013a8

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3301      	adds	r3, #1
 8001e84:	d002      	beq.n	8001e8c <HAL_Delay+0x20>
  {
    wait++;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	f7ff ffe3 	bl	8001e58 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d8f7      	bhi.n	8001e8e <HAL_Delay+0x22>
  {
  }
}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e159      	b.n	800216e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10a      	bne.n	8001ed8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2250      	movs	r2, #80	; 0x50
 8001ecc:	2100      	movs	r1, #0
 8001ece:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7fe fc00 	bl	80006d8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	2210      	movs	r2, #16
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d005      	beq.n	8001ef0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2204      	movs	r2, #4
 8001eec:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001eee:	d00b      	beq.n	8001f08 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2250      	movs	r2, #80	; 0x50
 8001f00:	2100      	movs	r1, #0
 8001f02:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e132      	b.n	800216e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	4a9a      	ldr	r2, [pc, #616]	; (8002178 <HAL_ADC_Init+0x2d0>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2202      	movs	r2, #2
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2203      	movs	r2, #3
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d108      	bne.n	8001f38 <HAL_ADC_Init+0x90>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_Init+0x90>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_ADC_Init+0x92>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d149      	bne.n	8001fd2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	23c0      	movs	r3, #192	; 0xc0
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d00b      	beq.n	8001f62 <HAL_ADC_Init+0xba>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	05db      	lsls	r3, r3, #23
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d005      	beq.n	8001f62 <HAL_ADC_Init+0xba>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d111      	bne.n	8001f86 <HAL_ADC_Init+0xde>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0092      	lsls	r2, r2, #2
 8001f6e:	0892      	lsrs	r2, r2, #2
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6919      	ldr	r1, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	611a      	str	r2, [r3, #16]
 8001f84:	e014      	b.n	8001fb0 <HAL_ADC_Init+0x108>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	0892      	lsrs	r2, r2, #2
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	4b79      	ldr	r3, [pc, #484]	; (800217c <HAL_ADC_Init+0x2d4>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b78      	ldr	r3, [pc, #480]	; (800217c <HAL_ADC_Init+0x2d4>)
 8001f9c:	4978      	ldr	r1, [pc, #480]	; (8002180 <HAL_ADC_Init+0x2d8>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_ADC_Init+0x2d4>)
 8001fa4:	6819      	ldr	r1, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4b74      	ldr	r3, [pc, #464]	; (800217c <HAL_ADC_Init+0x2d4>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2118      	movs	r1, #24
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68d9      	ldr	r1, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001fd2:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_ADC_Init+0x2d4>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4b69      	ldr	r3, [pc, #420]	; (800217c <HAL_ADC_Init+0x2d4>)
 8001fd8:	496a      	ldr	r1, [pc, #424]	; (8002184 <HAL_ADC_Init+0x2dc>)
 8001fda:	400a      	ands	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_ADC_Init+0x2d4>)
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe6:	065a      	lsls	r2, r3, #25
 8001fe8:	4b64      	ldr	r3, [pc, #400]	; (800217c <HAL_ADC_Init+0x2d4>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	055b      	lsls	r3, r3, #21
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d108      	bne.n	800200e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	0549      	lsls	r1, r1, #21
 800200a:	430a      	orrs	r2, r1
 800200c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	495b      	ldr	r1, [pc, #364]	; (8002188 <HAL_ADC_Init+0x2e0>)
 800201a:	400a      	ands	r2, r1
 800201c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68d9      	ldr	r1, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d101      	bne.n	8002034 <HAL_ADC_Init+0x18c>
 8002030:	2304      	movs	r3, #4
 8002032:	e000      	b.n	8002036 <HAL_ADC_Init+0x18e>
 8002034:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002036:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2020      	movs	r0, #32
 800203c:	5c1b      	ldrb	r3, [r3, r0]
 800203e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002040:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	202c      	movs	r0, #44	; 0x2c
 8002046:	5c1b      	ldrb	r3, [r3, r0]
 8002048:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800204a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002050:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002058:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002060:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800206e:	23c2      	movs	r3, #194	; 0xc2
 8002070:	33ff      	adds	r3, #255	; 0xff
 8002072:	429a      	cmp	r2, r3
 8002074:	d00b      	beq.n	800208e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68d9      	ldr	r1, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2221      	movs	r2, #33	; 0x21
 8002092:	5c9b      	ldrb	r3, [r3, r2]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d11a      	bne.n	80020ce <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	5c9b      	ldrb	r3, [r3, r2]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	0249      	lsls	r1, r1, #9
 80020b0:	430a      	orrs	r2, r1
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	e00b      	b.n	80020ce <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	2220      	movs	r2, #32
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	2201      	movs	r2, #1
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d11f      	bne.n	8002116 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	492a      	ldr	r1, [pc, #168]	; (800218c <HAL_ADC_Init+0x2e4>)
 80020e2:	400a      	ands	r2, r1
 80020e4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6919      	ldr	r1, [r3, #16]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80020f4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80020fa:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2101      	movs	r1, #1
 8002110:	430a      	orrs	r2, r1
 8002112:	611a      	str	r2, [r3, #16]
 8002114:	e00e      	b.n	8002134 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2101      	movs	r1, #1
 8002130:	438a      	bics	r2, r1
 8002132:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2107      	movs	r1, #7
 8002140:	438a      	bics	r2, r1
 8002142:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6959      	ldr	r1, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	2203      	movs	r2, #3
 8002162:	4393      	bics	r3, r2
 8002164:	2201      	movs	r2, #1
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b002      	add	sp, #8
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	fffffefd 	.word	0xfffffefd
 800217c:	40012708 	.word	0x40012708
 8002180:	ffc3ffff 	.word	0xffc3ffff
 8002184:	fdffffff 	.word	0xfdffffff
 8002188:	fffe0219 	.word	0xfffe0219
 800218c:	fffffc03 	.word	0xfffffc03

08002190 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219c:	2317      	movs	r3, #23
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2204      	movs	r2, #4
 80021ac:	4013      	ands	r3, r2
 80021ae:	d15e      	bne.n	800226e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2250      	movs	r2, #80	; 0x50
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_ADC_Start_DMA+0x2e>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e05e      	b.n	800227c <HAL_ADC_Start_DMA+0xec>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2250      	movs	r2, #80	; 0x50
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d007      	beq.n	80021de <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80021ce:	2317      	movs	r3, #23
 80021d0:	18fc      	adds	r4, r7, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 f9d1 	bl	800257c <ADC_Enable>
 80021da:	0003      	movs	r3, r0
 80021dc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021de:	2317      	movs	r3, #23
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d146      	bne.n	8002276 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <HAL_ADC_Start_DMA+0xf4>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	0052      	lsls	r2, r2, #1
 80021f4:	431a      	orrs	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2250      	movs	r2, #80	; 0x50
 8002204:	2100      	movs	r1, #0
 8002206:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <HAL_ADC_Start_DMA+0xf8>)
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002214:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_ADC_Start_DMA+0xfc>)
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <HAL_ADC_Start_DMA+0x100>)
 800221e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	221c      	movs	r2, #28
 8002226:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2110      	movs	r1, #16
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2101      	movs	r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3340      	adds	r3, #64	; 0x40
 8002252:	0019      	movs	r1, r3
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f000 fc7a 	bl	8002b50 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2104      	movs	r1, #4
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	e003      	b.n	8002276 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800226e:	2317      	movs	r3, #23
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	2202      	movs	r2, #2
 8002274:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002276:	2317      	movs	r3, #23
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	781b      	ldrb	r3, [r3, #0]
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b007      	add	sp, #28
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	fffff0fe 	.word	0xfffff0fe
 8002288:	0800263d 	.word	0x0800263d
 800228c:	080026f1 	.word	0x080026f1
 8002290:	0800270f 	.word	0x0800270f

08002294 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2204      	movs	r2, #4
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d106      	bne.n	80022b8 <HAL_ADC_IRQHandler+0x24>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2204      	movs	r2, #4
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d00d      	beq.n	80022d4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2208      	movs	r2, #8
 80022c0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d154      	bne.n	8002370 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2208      	movs	r2, #8
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d14d      	bne.n	8002370 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	2210      	movs	r2, #16
 80022da:	4013      	ands	r3, r2
 80022dc:	d106      	bne.n	80022ec <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	2280      	movs	r2, #128	; 0x80
 80022e4:	0092      	lsls	r2, r2, #2
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	23c0      	movs	r3, #192	; 0xc0
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4013      	ands	r3, r2
 80022f8:	d12e      	bne.n	8002358 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002300:	2b00      	cmp	r3, #0
 8002302:	d129      	bne.n	8002358 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2208      	movs	r2, #8
 800230c:	4013      	ands	r3, r2
 800230e:	2b08      	cmp	r3, #8
 8002310:	d122      	bne.n	8002358 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2204      	movs	r2, #4
 800231a:	4013      	ands	r3, r2
 800231c:	d110      	bne.n	8002340 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	210c      	movs	r1, #12
 800232a:	438a      	bics	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	4a35      	ldr	r2, [pc, #212]	; (8002408 <HAL_ADC_IRQHandler+0x174>)
 8002334:	4013      	ands	r3, r2
 8002336:	2201      	movs	r2, #1
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
 800233e:	e00b      	b.n	8002358 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002344:	2220      	movs	r2, #32
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	2201      	movs	r2, #1
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0018      	movs	r0, r3
 800235c:	f7fe fb8a 	bl	8000a74 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d003      	beq.n	8002370 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	220c      	movs	r2, #12
 800236e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	4013      	ands	r3, r2
 800237a:	2b80      	cmp	r3, #128	; 0x80
 800237c:	d115      	bne.n	80023aa <HAL_ADC_IRQHandler+0x116>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	4013      	ands	r3, r2
 8002388:	2b80      	cmp	r3, #128	; 0x80
 800238a:	d10e      	bne.n	80023aa <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	0252      	lsls	r2, r2, #9
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f000 f83d 	bl	800241c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2210      	movs	r2, #16
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d123      	bne.n	8002400 <HAL_ADC_IRQHandler+0x16c>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2210      	movs	r2, #16
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d11c      	bne.n	8002400 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d10d      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	2202      	movs	r2, #2
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 f81a 	bl	800242c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2210      	movs	r2, #16
 80023fe:	601a      	str	r2, [r3, #0]
  }
  
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}
 8002408:	fffffefe 	.word	0xfffffefe

0800240c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2250      	movs	r2, #80	; 0x50
 800244a:	5c9b      	ldrb	r3, [r3, r2]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x18>
 8002450:	2302      	movs	r3, #2
 8002452:	e085      	b.n	8002560 <HAL_ADC_ConfigChannel+0x124>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2250      	movs	r2, #80	; 0x50
 8002458:	2101      	movs	r1, #1
 800245a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2204      	movs	r2, #4
 8002464:	4013      	ands	r3, r2
 8002466:	d00b      	beq.n	8002480 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	2220      	movs	r2, #32
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2250      	movs	r2, #80	; 0x50
 8002478:	2100      	movs	r1, #0
 800247a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e06f      	b.n	8002560 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a38      	ldr	r2, [pc, #224]	; (8002568 <HAL_ADC_ConfigChannel+0x12c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d035      	beq.n	80024f6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	035b      	lsls	r3, r3, #13
 8002496:	0b5a      	lsrs	r2, r3, #13
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	02db      	lsls	r3, r3, #11
 80024a8:	4013      	ands	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	0409      	lsls	r1, r1, #16
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80024ba:	200a      	movs	r0, #10
 80024bc:	f000 f942 	bl	8002744 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	4013      	ands	r3, r2
 80024ca:	d006      	beq.n	80024da <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	03c9      	lsls	r1, r1, #15
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	025b      	lsls	r3, r3, #9
 80024e2:	4013      	ands	r3, r2
 80024e4:	d037      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	0449      	lsls	r1, r1, #17
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e02f      	b.n	8002556 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	035b      	lsls	r3, r3, #13
 8002502:	0b5b      	lsrs	r3, r3, #13
 8002504:	43d9      	mvns	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	400a      	ands	r2, r1
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	02db      	lsls	r3, r3, #11
 8002516:	4013      	ands	r3, r2
 8002518:	d005      	beq.n	8002526 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 8002520:	4913      	ldr	r1, [pc, #76]	; (8002570 <HAL_ADC_ConfigChannel+0x134>)
 8002522:	400a      	ands	r2, r1
 8002524:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	029b      	lsls	r3, r3, #10
 800252e:	4013      	ands	r3, r2
 8002530:	d005      	beq.n	800253e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 8002538:	490e      	ldr	r1, [pc, #56]	; (8002574 <HAL_ADC_ConfigChannel+0x138>)
 800253a:	400a      	ands	r2, r1
 800253c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	025b      	lsls	r3, r3, #9
 8002546:	4013      	ands	r3, r2
 8002548:	d005      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <HAL_ADC_ConfigChannel+0x130>)
 8002550:	4909      	ldr	r1, [pc, #36]	; (8002578 <HAL_ADC_ConfigChannel+0x13c>)
 8002552:	400a      	ands	r2, r1
 8002554:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2250      	movs	r2, #80	; 0x50
 800255a:	2100      	movs	r1, #0
 800255c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}
 8002568:	00001001 	.word	0x00001001
 800256c:	40012708 	.word	0x40012708
 8002570:	ff7fffff 	.word	0xff7fffff
 8002574:	ffbfffff 	.word	0xffbfffff
 8002578:	feffffff 	.word	0xfeffffff

0800257c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2203      	movs	r2, #3
 8002590:	4013      	ands	r3, r2
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <ADC_Enable+0x2c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <ADC_Enable+0x2c>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <ADC_Enable+0x2e>
 80025a8:	2300      	movs	r3, #0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d13f      	bne.n	800262e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a20      	ldr	r2, [pc, #128]	; (8002638 <ADC_Enable+0xbc>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	d00d      	beq.n	80025d6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	2210      	movs	r2, #16
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ca:	2201      	movs	r2, #1
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e02c      	b.n	8002630 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f000 f8ac 	bl	8002744 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80025ec:	f7ff fc34 	bl	8001e58 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025f4:	e014      	b.n	8002620 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025f6:	f7ff fc2f 	bl	8001e58 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b0a      	cmp	r3, #10
 8002602:	d90d      	bls.n	8002620 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	2210      	movs	r2, #16
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	2201      	movs	r2, #1
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e007      	b.n	8002630 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2201      	movs	r2, #1
 8002628:	4013      	ands	r3, r2
 800262a:	2b01      	cmp	r3, #1
 800262c:	d1e3      	bne.n	80025f6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b004      	add	sp, #16
 8002636:	bd80      	pop	{r7, pc}
 8002638:	80000017 	.word	0x80000017

0800263c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	2250      	movs	r2, #80	; 0x50
 8002650:	4013      	ands	r3, r2
 8002652:	d141      	bne.n	80026d8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	431a      	orrs	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	23c0      	movs	r3, #192	; 0xc0
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4013      	ands	r3, r2
 800266e:	d12e      	bne.n	80026ce <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002676:	2b00      	cmp	r3, #0
 8002678:	d129      	bne.n	80026ce <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2208      	movs	r2, #8
 8002682:	4013      	ands	r3, r2
 8002684:	2b08      	cmp	r3, #8
 8002686:	d122      	bne.n	80026ce <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2204      	movs	r2, #4
 8002690:	4013      	ands	r3, r2
 8002692:	d110      	bne.n	80026b6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	210c      	movs	r1, #12
 80026a0:	438a      	bics	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	4a10      	ldr	r2, [pc, #64]	; (80026ec <ADC_DMAConvCplt+0xb0>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	2201      	movs	r2, #1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
 80026b4:	e00b      	b.n	80026ce <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	2220      	movs	r2, #32
 80026bc:	431a      	orrs	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	2201      	movs	r2, #1
 80026c8:	431a      	orrs	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7fe f9cf 	bl	8000a74 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80026d6:	e005      	b.n	80026e4 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	0010      	movs	r0, r2
 80026e2:	4798      	blx	r3
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b004      	add	sp, #16
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	fffffefe 	.word	0xfffffefe

080026f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff fe83 	bl	800240c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b004      	add	sp, #16
 800270c:	bd80      	pop	{r7, pc}

0800270e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	2240      	movs	r2, #64	; 0x40
 8002722:	431a      	orrs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	2204      	movs	r2, #4
 800272e:	431a      	orrs	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	0018      	movs	r0, r3
 8002738:	f7ff fe78 	bl	800242c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b004      	add	sp, #16
 8002742:	bd80      	pop	{r7, pc}

08002744 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <ADC_DelayMicroSecond+0x34>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	490a      	ldr	r1, [pc, #40]	; (800277c <ADC_DelayMicroSecond+0x38>)
 8002752:	0018      	movs	r0, r3
 8002754:	f7fd fcd8 	bl	8000108 <__udivsi3>
 8002758:	0003      	movs	r3, r0
 800275a:	001a      	movs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4353      	muls	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002762:	e002      	b.n	800276a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3b01      	subs	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f9      	bne.n	8002764 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b004      	add	sp, #16
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000000 	.word	0x20000000
 800277c:	000f4240 	.word	0x000f4240

08002780 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278a:	2317      	movs	r3, #23
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2250      	movs	r2, #80	; 0x50
 800279e:	5c9b      	ldrb	r3, [r3, r2]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_ADCEx_Calibration_Start+0x28>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e07a      	b.n	800289e <HAL_ADCEx_Calibration_Start+0x11e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2250      	movs	r2, #80	; 0x50
 80027ac:	2101      	movs	r1, #1
 80027ae:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2203      	movs	r2, #3
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d108      	bne.n	80027d0 <HAL_ADCEx_Calibration_Start+0x50>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2201      	movs	r2, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADCEx_Calibration_Start+0x50>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_ADCEx_Calibration_Start+0x52>
 80027d0:	2300      	movs	r3, #0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d152      	bne.n	800287c <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	4a33      	ldr	r2, [pc, #204]	; (80028a8 <HAL_ADCEx_Calibration_Start+0x128>)
 80027dc:	4013      	ands	r3, r2
 80027de:	2202      	movs	r2, #2
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2203      	movs	r2, #3
 80027ee:	4013      	ands	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2103      	movs	r1, #3
 80027fe:	438a      	bics	r2, r1
 8002800:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0609      	lsls	r1, r1, #24
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002814:	f7ff fb20 	bl	8001e58 <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800281c:	e014      	b.n	8002848 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800281e:	f7ff fb1b 	bl	8001e58 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b0a      	cmp	r3, #10
 800282a:	d90d      	bls.n	8002848 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	2212      	movs	r2, #18
 8002832:	4393      	bics	r3, r2
 8002834:	2210      	movs	r2, #16
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2250      	movs	r2, #80	; 0x50
 8002840:	2100      	movs	r1, #0
 8002842:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e02a      	b.n	800289e <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0fdb      	lsrs	r3, r3, #31
 8002850:	07da      	lsls	r2, r3, #31
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	429a      	cmp	r2, r3
 8002858:	d0e1      	beq.n	800281e <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68d9      	ldr	r1, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	430a      	orrs	r2, r1
 8002868:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	2203      	movs	r2, #3
 8002870:	4393      	bics	r3, r2
 8002872:	2201      	movs	r2, #1
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
 800287a:	e009      	b.n	8002890 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	2220      	movs	r2, #32
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8002888:	2317      	movs	r3, #23
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2250      	movs	r2, #80	; 0x50
 8002894:	2100      	movs	r1, #0
 8002896:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002898:	2317      	movs	r3, #23
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	781b      	ldrb	r3, [r3, #0]
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b006      	add	sp, #24
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	fffffefd 	.word	0xfffffefd

080028ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	0002      	movs	r2, r0
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80028b8:	1dfb      	adds	r3, r7, #7
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	001a      	movs	r2, r3
 80028be:	231f      	movs	r3, #31
 80028c0:	401a      	ands	r2, r3
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <NVIC_EnableIRQ+0x28>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	4091      	lsls	r1, r2
 80028c8:	000a      	movs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b002      	add	sp, #8
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	e000e100 	.word	0xe000e100

080028d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	0002      	movs	r2, r0
 80028e0:	6039      	str	r1, [r7, #0]
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b7f      	cmp	r3, #127	; 0x7f
 80028ec:	d932      	bls.n	8002954 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ee:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <NVIC_SetPriority+0xd4>)
 80028f0:	1dfb      	adds	r3, r7, #7
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	0019      	movs	r1, r3
 80028f6:	230f      	movs	r3, #15
 80028f8:	400b      	ands	r3, r1
 80028fa:	3b08      	subs	r3, #8
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3306      	adds	r3, #6
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	18d3      	adds	r3, r2, r3
 8002904:	3304      	adds	r3, #4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	1dfa      	adds	r2, r7, #7
 800290a:	7812      	ldrb	r2, [r2, #0]
 800290c:	0011      	movs	r1, r2
 800290e:	2203      	movs	r2, #3
 8002910:	400a      	ands	r2, r1
 8002912:	00d2      	lsls	r2, r2, #3
 8002914:	21ff      	movs	r1, #255	; 0xff
 8002916:	4091      	lsls	r1, r2
 8002918:	000a      	movs	r2, r1
 800291a:	43d2      	mvns	r2, r2
 800291c:	401a      	ands	r2, r3
 800291e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	019b      	lsls	r3, r3, #6
 8002924:	22ff      	movs	r2, #255	; 0xff
 8002926:	401a      	ands	r2, r3
 8002928:	1dfb      	adds	r3, r7, #7
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	0018      	movs	r0, r3
 800292e:	2303      	movs	r3, #3
 8002930:	4003      	ands	r3, r0
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002936:	481d      	ldr	r0, [pc, #116]	; (80029ac <NVIC_SetPriority+0xd4>)
 8002938:	1dfb      	adds	r3, r7, #7
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	001c      	movs	r4, r3
 800293e:	230f      	movs	r3, #15
 8002940:	4023      	ands	r3, r4
 8002942:	3b08      	subs	r3, #8
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	430a      	orrs	r2, r1
 8002948:	3306      	adds	r3, #6
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	18c3      	adds	r3, r0, r3
 800294e:	3304      	adds	r3, #4
 8002950:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002952:	e027      	b.n	80029a4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002954:	4a16      	ldr	r2, [pc, #88]	; (80029b0 <NVIC_SetPriority+0xd8>)
 8002956:	1dfb      	adds	r3, r7, #7
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b25b      	sxtb	r3, r3
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	33c0      	adds	r3, #192	; 0xc0
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	589b      	ldr	r3, [r3, r2]
 8002964:	1dfa      	adds	r2, r7, #7
 8002966:	7812      	ldrb	r2, [r2, #0]
 8002968:	0011      	movs	r1, r2
 800296a:	2203      	movs	r2, #3
 800296c:	400a      	ands	r2, r1
 800296e:	00d2      	lsls	r2, r2, #3
 8002970:	21ff      	movs	r1, #255	; 0xff
 8002972:	4091      	lsls	r1, r2
 8002974:	000a      	movs	r2, r1
 8002976:	43d2      	mvns	r2, r2
 8002978:	401a      	ands	r2, r3
 800297a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	019b      	lsls	r3, r3, #6
 8002980:	22ff      	movs	r2, #255	; 0xff
 8002982:	401a      	ands	r2, r3
 8002984:	1dfb      	adds	r3, r7, #7
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	0018      	movs	r0, r3
 800298a:	2303      	movs	r3, #3
 800298c:	4003      	ands	r3, r0
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002992:	4807      	ldr	r0, [pc, #28]	; (80029b0 <NVIC_SetPriority+0xd8>)
 8002994:	1dfb      	adds	r3, r7, #7
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b25b      	sxtb	r3, r3
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	430a      	orrs	r2, r1
 800299e:	33c0      	adds	r3, #192	; 0xc0
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	501a      	str	r2, [r3, r0]
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b003      	add	sp, #12
 80029aa:	bd90      	pop	{r4, r7, pc}
 80029ac:	e000ed00 	.word	0xe000ed00
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <SysTick_Config+0x40>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e010      	b.n	80029ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <SysTick_Config+0x44>)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	3a01      	subs	r2, #1
 80029d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	2301      	movs	r3, #1
 80029d4:	425b      	negs	r3, r3
 80029d6:	2103      	movs	r1, #3
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff ff7d 	bl	80028d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <SysTick_Config+0x44>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <SysTick_Config+0x44>)
 80029e6:	2207      	movs	r2, #7
 80029e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	00ffffff 	.word	0x00ffffff
 80029f8:	e000e010 	.word	0xe000e010

080029fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	210f      	movs	r1, #15
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	1c02      	adds	r2, r0, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b25b      	sxtb	r3, r3
 8002a16:	0011      	movs	r1, r2
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f7ff ff5d 	bl	80028d8 <NVIC_SetPriority>
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b004      	add	sp, #16
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a32:	1dfb      	adds	r3, r7, #7
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7ff ff37 	bl	80028ac <NVIC_EnableIRQ>
}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b002      	add	sp, #8
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7ff ffaf 	bl	80029b4 <SysTick_Config>
 8002a56:	0003      	movs	r3, r0
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e061      	b.n	8002b36 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a32      	ldr	r2, [pc, #200]	; (8002b40 <HAL_DMA_Init+0xe0>)
 8002a78:	4694      	mov	ip, r2
 8002a7a:	4463      	add	r3, ip
 8002a7c:	2114      	movs	r1, #20
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7fd fb42 	bl	8000108 <__udivsi3>
 8002a84:	0003      	movs	r3, r0
 8002a86:	009a      	lsls	r2, r3, #2
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a2d      	ldr	r2, [pc, #180]	; (8002b44 <HAL_DMA_Init+0xe4>)
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2225      	movs	r2, #37	; 0x25
 8002a96:	2102      	movs	r1, #2
 8002a98:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a28      	ldr	r2, [pc, #160]	; (8002b48 <HAL_DMA_Init+0xe8>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	01db      	lsls	r3, r3, #7
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d018      	beq.n	8002b1e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002aec:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <HAL_DMA_Init+0xec>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	211c      	movs	r1, #28
 8002af6:	400b      	ands	r3, r1
 8002af8:	210f      	movs	r1, #15
 8002afa:	4099      	lsls	r1, r3
 8002afc:	000b      	movs	r3, r1
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_DMA_Init+0xec>)
 8002b02:	400a      	ands	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_DMA_Init+0xec>)
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	201c      	movs	r0, #28
 8002b14:	4003      	ands	r3, r0
 8002b16:	409a      	lsls	r2, r3
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <HAL_DMA_Init+0xec>)
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2225      	movs	r2, #37	; 0x25
 8002b28:	2101      	movs	r1, #1
 8002b2a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2224      	movs	r2, #36	; 0x24
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b004      	add	sp, #16
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	bffdfff8 	.word	0xbffdfff8
 8002b44:	40020000 	.word	0x40020000
 8002b48:	ffff800f 	.word	0xffff800f
 8002b4c:	400200a8 	.word	0x400200a8

08002b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2317      	movs	r3, #23
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2224      	movs	r2, #36	; 0x24
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_DMA_Start_IT+0x24>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e04f      	b.n	8002c14 <HAL_DMA_Start_IT+0xc4>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2224      	movs	r2, #36	; 0x24
 8002b78:	2101      	movs	r1, #1
 8002b7a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2225      	movs	r2, #37	; 0x25
 8002b80:	5c9b      	ldrb	r3, [r3, r2]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d13a      	bne.n	8002bfe <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2225      	movs	r2, #37	; 0x25
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	438a      	bics	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f8e3 	bl	8002d78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	210e      	movs	r1, #14
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e00f      	b.n	8002bec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	438a      	bics	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	210a      	movs	r1, #10
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e007      	b.n	8002c0e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2224      	movs	r2, #36	; 0x24
 8002c02:	2100      	movs	r1, #0
 8002c04:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c06:	2317      	movs	r3, #23
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002c0e:	2317      	movs	r3, #23
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	781b      	ldrb	r3, [r3, #0]
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b006      	add	sp, #24
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	221c      	movs	r2, #28
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	0013      	movs	r3, r2
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	d026      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x7a>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d022      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2220      	movs	r2, #32
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d107      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2104      	movs	r1, #4
 8002c68:	438a      	bics	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	221c      	movs	r2, #28
 8002c72:	401a      	ands	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2104      	movs	r1, #4
 8002c7a:	4091      	lsls	r1, r2
 8002c7c:	000a      	movs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d100      	bne.n	8002c8a <HAL_DMA_IRQHandler+0x6e>
 8002c88:	e071      	b.n	8002d6e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	0010      	movs	r0, r2
 8002c92:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002c94:	e06b      	b.n	8002d6e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	221c      	movs	r2, #28
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	0013      	movs	r3, r2
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d02d      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xea>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2202      	movs	r2, #2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d029      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	210a      	movs	r1, #10
 8002cca:	438a      	bics	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2225      	movs	r2, #37	; 0x25
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	221c      	movs	r2, #28
 8002cdc:	401a      	ands	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4091      	lsls	r1, r2
 8002ce6:	000a      	movs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2224      	movs	r2, #36	; 0x24
 8002cee:	2100      	movs	r1, #0
 8002cf0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d039      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	0010      	movs	r0, r2
 8002d02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d04:	e033      	b.n	8002d6e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	221c      	movs	r2, #28
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2208      	movs	r2, #8
 8002d10:	409a      	lsls	r2, r3
 8002d12:	0013      	movs	r3, r2
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	d02a      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x154>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d026      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	210e      	movs	r1, #14
 8002d2e:	438a      	bics	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	221c      	movs	r2, #28
 8002d38:	401a      	ands	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4091      	lsls	r1, r2
 8002d42:	000a      	movs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2225      	movs	r2, #37	; 0x25
 8002d50:	2101      	movs	r1, #1
 8002d52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	; 0x24
 8002d58:	2100      	movs	r1, #0
 8002d5a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	0010      	movs	r0, r2
 8002d6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46c0      	nop			; (mov r8, r8)
}
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b004      	add	sp, #16
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	221c      	movs	r2, #28
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2101      	movs	r1, #1
 8002d94:	4091      	lsls	r1, r2
 8002d96:	000a      	movs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d108      	bne.n	8002dbc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dba:	e007      	b.n	8002dcc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b004      	add	sp, #16
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002dea:	e14f      	b.n	800308c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4091      	lsls	r1, r2
 8002df6:	000a      	movs	r2, r1
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d100      	bne.n	8002e04 <HAL_GPIO_Init+0x30>
 8002e02:	e140      	b.n	8003086 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x40>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b12      	cmp	r3, #18
 8002e12:	d123      	bne.n	8002e5c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	58d3      	ldr	r3, [r2, r3]
 8002e20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2207      	movs	r2, #7
 8002e26:	4013      	ands	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	0013      	movs	r3, r2
 8002e30:	43da      	mvns	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4013      	ands	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2107      	movs	r1, #7
 8002e40:	400b      	ands	r3, r1
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	409a      	lsls	r2, r3
 8002e46:	0013      	movs	r3, r2
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	6939      	ldr	r1, [r7, #16]
 8002e5a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d00b      	beq.n	8002e7c <HAL_GPIO_Init+0xa8>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d007      	beq.n	8002e7c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e70:	2b11      	cmp	r3, #17
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b12      	cmp	r3, #18
 8002e7a:	d130      	bne.n	8002ede <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	0013      	movs	r3, r2
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	0013      	movs	r3, r2
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	0013      	movs	r3, r2
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	2201      	movs	r2, #1
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	0013      	movs	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2203      	movs	r2, #3
 8002eea:	409a      	lsls	r2, r3
 8002eec:	0013      	movs	r3, r2
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2203      	movs	r2, #3
 8002efc:	401a      	ands	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	409a      	lsls	r2, r3
 8002f04:	0013      	movs	r3, r2
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	0013      	movs	r3, r2
 8002f22:	43da      	mvns	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	409a      	lsls	r2, r3
 8002f34:	0013      	movs	r3, r2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	055b      	lsls	r3, r3, #21
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d100      	bne.n	8002f50 <HAL_GPIO_Init+0x17c>
 8002f4e:	e09a      	b.n	8003086 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f50:	4b54      	ldr	r3, [pc, #336]	; (80030a4 <HAL_GPIO_Init+0x2d0>)
 8002f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f54:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <HAL_GPIO_Init+0x2d0>)
 8002f56:	2101      	movs	r1, #1
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f5c:	4a52      	ldr	r2, [pc, #328]	; (80030a8 <HAL_GPIO_Init+0x2d4>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	589b      	ldr	r3, [r3, r2]
 8002f68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	4013      	ands	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	409a      	lsls	r2, r3
 8002f76:	0013      	movs	r3, r2
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	23a0      	movs	r3, #160	; 0xa0
 8002f84:	05db      	lsls	r3, r3, #23
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d019      	beq.n	8002fbe <HAL_GPIO_Init+0x1ea>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a47      	ldr	r2, [pc, #284]	; (80030ac <HAL_GPIO_Init+0x2d8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_GPIO_Init+0x1e6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a46      	ldr	r2, [pc, #280]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00d      	beq.n	8002fb6 <HAL_GPIO_Init+0x1e2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a45      	ldr	r2, [pc, #276]	; (80030b4 <HAL_GPIO_Init+0x2e0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <HAL_GPIO_Init+0x1de>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a44      	ldr	r2, [pc, #272]	; (80030b8 <HAL_GPIO_Init+0x2e4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_GPIO_Init+0x1da>
 8002faa:	2305      	movs	r3, #5
 8002fac:	e008      	b.n	8002fc0 <HAL_GPIO_Init+0x1ec>
 8002fae:	2306      	movs	r3, #6
 8002fb0:	e006      	b.n	8002fc0 <HAL_GPIO_Init+0x1ec>
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e004      	b.n	8002fc0 <HAL_GPIO_Init+0x1ec>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e002      	b.n	8002fc0 <HAL_GPIO_Init+0x1ec>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_GPIO_Init+0x1ec>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	0092      	lsls	r2, r2, #2
 8002fc8:	4093      	lsls	r3, r2
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd0:	4935      	ldr	r1, [pc, #212]	; (80030a8 <HAL_GPIO_Init+0x2d4>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	025b      	lsls	r3, r3, #9
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003008:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43da      	mvns	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	029b      	lsls	r3, r3, #10
 8003020:	4013      	ands	r3, r2
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800302c:	4b23      	ldr	r3, [pc, #140]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	43da      	mvns	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	035b      	lsls	r3, r3, #13
 800304a:	4013      	ands	r3, r2
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003056:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800305c:	4b17      	ldr	r3, [pc, #92]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43da      	mvns	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	039b      	lsls	r3, r3, #14
 8003074:	4013      	ands	r3, r2
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003080:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	40da      	lsrs	r2, r3
 8003094:	1e13      	subs	r3, r2, #0
 8003096:	d000      	beq.n	800309a <HAL_GPIO_Init+0x2c6>
 8003098:	e6a8      	b.n	8002dec <HAL_GPIO_Init+0x18>
  }
}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	46bd      	mov	sp, r7
 800309e:	b006      	add	sp, #24
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40010000 	.word	0x40010000
 80030ac:	50000400 	.word	0x50000400
 80030b0:	50000800 	.word	0x50000800
 80030b4:	50000c00 	.word	0x50000c00
 80030b8:	50001c00 	.word	0x50001c00
 80030bc:	40010400 	.word	0x40010400

080030c0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80030d6:	e0b6      	b.n	8003246 <HAL_GPIO_DeInit+0x186>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80030d8:	2201      	movs	r2, #1
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	409a      	lsls	r2, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

    if(iocurrent)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d100      	bne.n	80030ec <HAL_GPIO_DeInit+0x2c>
 80030ea:	e0a9      	b.n	8003240 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2103      	movs	r1, #3
 80030f6:	4099      	lsls	r1, r3
 80030f8:	000b      	movs	r3, r1
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	601a      	str	r2, [r3, #0]
           
      /* Configure the default Alternate Function in current IO */ 
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	08da      	lsrs	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3208      	adds	r2, #8
 8003108:	0092      	lsls	r2, r2, #2
 800310a:	58d3      	ldr	r3, [r2, r3]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	2107      	movs	r1, #7
 8003110:	400a      	ands	r2, r1
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	210f      	movs	r1, #15
 8003116:	4091      	lsls	r1, r2
 8003118:	000a      	movs	r2, r1
 800311a:	43d1      	mvns	r1, r2
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	08d2      	lsrs	r2, r2, #3
 8003120:	4019      	ands	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	50d1      	str	r1, [r2, r3]
      
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	0052      	lsls	r2, r2, #1
 8003132:	2103      	movs	r1, #3
 8003134:	4091      	lsls	r1, r2
 8003136:	000a      	movs	r2, r1
 8003138:	43d2      	mvns	r2, r2
 800313a:	401a      	ands	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	609a      	str	r2, [r3, #8]
      
      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2101      	movs	r1, #1
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4091      	lsls	r1, r2
 800314a:	000a      	movs	r2, r1
 800314c:	43d2      	mvns	r2, r2
 800314e:	401a      	ands	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	605a      	str	r2, [r3, #4]
      
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	0052      	lsls	r2, r2, #1
 800315c:	2103      	movs	r1, #3
 800315e:	4091      	lsls	r1, r2
 8003160:	000a      	movs	r2, r1
 8003162:	43d2      	mvns	r2, r2
 8003164:	401a      	ands	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 800316a:	4a3c      	ldr	r2, [pc, #240]	; (800325c <HAL_GPIO_DeInit+0x19c>)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	589b      	ldr	r3, [r3, r2]
 8003176:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2203      	movs	r2, #3
 800317c:	4013      	ands	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	220f      	movs	r2, #15
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	23a0      	movs	r3, #160	; 0xa0
 800318e:	05db      	lsls	r3, r3, #23
 8003190:	429a      	cmp	r2, r3
 8003192:	d019      	beq.n	80031c8 <HAL_GPIO_DeInit+0x108>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a32      	ldr	r2, [pc, #200]	; (8003260 <HAL_GPIO_DeInit+0x1a0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_GPIO_DeInit+0x104>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a31      	ldr	r2, [pc, #196]	; (8003264 <HAL_GPIO_DeInit+0x1a4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00d      	beq.n	80031c0 <HAL_GPIO_DeInit+0x100>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a30      	ldr	r2, [pc, #192]	; (8003268 <HAL_GPIO_DeInit+0x1a8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d007      	beq.n	80031bc <HAL_GPIO_DeInit+0xfc>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a2f      	ldr	r2, [pc, #188]	; (800326c <HAL_GPIO_DeInit+0x1ac>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d101      	bne.n	80031b8 <HAL_GPIO_DeInit+0xf8>
 80031b4:	2305      	movs	r3, #5
 80031b6:	e008      	b.n	80031ca <HAL_GPIO_DeInit+0x10a>
 80031b8:	2306      	movs	r3, #6
 80031ba:	e006      	b.n	80031ca <HAL_GPIO_DeInit+0x10a>
 80031bc:	2303      	movs	r3, #3
 80031be:	e004      	b.n	80031ca <HAL_GPIO_DeInit+0x10a>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e002      	b.n	80031ca <HAL_GPIO_DeInit+0x10a>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_GPIO_DeInit+0x10a>
 80031c8:	2300      	movs	r3, #0
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	2103      	movs	r1, #3
 80031ce:	400a      	ands	r2, r1
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	4093      	lsls	r3, r2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d132      	bne.n	8003240 <HAL_GPIO_DeInit+0x180>
      {
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2203      	movs	r2, #3
 80031de:	4013      	ands	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	409a      	lsls	r2, r3
 80031e6:	0013      	movs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80031ea:	4a1c      	ldr	r2, [pc, #112]	; (800325c <HAL_GPIO_DeInit+0x19c>)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	3302      	adds	r3, #2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	589a      	ldr	r2, [r3, r2]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43d9      	mvns	r1, r3
 80031fa:	4818      	ldr	r0, [pc, #96]	; (800325c <HAL_GPIO_DeInit+0x19c>)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	400a      	ands	r2, r1
 8003202:	3302      	adds	r3, #2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	501a      	str	r2, [r3, r0]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_GPIO_DeInit+0x1b0>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	43d9      	mvns	r1, r3
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_GPIO_DeInit+0x1b0>)
 8003212:	400a      	ands	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <HAL_GPIO_DeInit+0x1b0>)
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43d9      	mvns	r1, r3
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <HAL_GPIO_DeInit+0x1b0>)
 8003220:	400a      	ands	r2, r1
 8003222:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_GPIO_DeInit+0x1b0>)
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43d9      	mvns	r1, r3
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_GPIO_DeInit+0x1b0>)
 800322e:	400a      	ands	r2, r1
 8003230:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <HAL_GPIO_DeInit+0x1b0>)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	43d9      	mvns	r1, r3
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <HAL_GPIO_DeInit+0x1b0>)
 800323c:	400a      	ands	r2, r1
 800323e:	60da      	str	r2, [r3, #12]
      }
    }
     position++;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	3301      	adds	r3, #1
 8003244:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	40da      	lsrs	r2, r3
 800324c:	1e13      	subs	r3, r2, #0
 800324e:	d000      	beq.n	8003252 <HAL_GPIO_DeInit+0x192>
 8003250:	e742      	b.n	80030d8 <HAL_GPIO_DeInit+0x18>
  }
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b006      	add	sp, #24
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	40010000 	.word	0x40010000
 8003260:	50000400 	.word	0x50000400
 8003264:	50000800 	.word	0x50000800
 8003268:	50000c00 	.word	0x50000c00
 800326c:	50001c00 	.word	0x50001c00
 8003270:	40010400 	.word	0x40010400

08003274 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	000a      	movs	r2, r1
 800327e:	1cbb      	adds	r3, r7, #2
 8003280:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	1cba      	adds	r2, r7, #2
 8003288:	8812      	ldrh	r2, [r2, #0]
 800328a:	4013      	ands	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800328e:	230f      	movs	r3, #15
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e003      	b.n	80032a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003298:	230f      	movs	r3, #15
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80032a0:	230f      	movs	r3, #15
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	781b      	ldrb	r3, [r3, #0]
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b004      	add	sp, #16
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	0008      	movs	r0, r1
 80032b8:	0011      	movs	r1, r2
 80032ba:	1cbb      	adds	r3, r7, #2
 80032bc:	1c02      	adds	r2, r0, #0
 80032be:	801a      	strh	r2, [r3, #0]
 80032c0:	1c7b      	adds	r3, r7, #1
 80032c2:	1c0a      	adds	r2, r1, #0
 80032c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80032c6:	1c7b      	adds	r3, r7, #1
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ce:	1cbb      	adds	r3, r7, #2
 80032d0:	881a      	ldrh	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80032d6:	e003      	b.n	80032e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80032d8:	1cbb      	adds	r3, r7, #2
 80032da:	881a      	ldrh	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b002      	add	sp, #8
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	0002      	movs	r2, r0
 80032f0:	1dbb      	adds	r3, r7, #6
 80032f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	1dba      	adds	r2, r7, #6
 80032fa:	8812      	ldrh	r2, [r2, #0]
 80032fc:	4013      	ands	r3, r2
 80032fe:	d008      	beq.n	8003312 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003302:	1dba      	adds	r2, r7, #6
 8003304:	8812      	ldrh	r2, [r2, #0]
 8003306:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003308:	1dbb      	adds	r3, r7, #6
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	0018      	movs	r0, r3
 800330e:	f000 f807 	bl	8003320 <HAL_GPIO_EXTI_Callback>
  }
}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	40010400 	.word	0x40010400

08003320 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	0002      	movs	r2, r0
 8003328:	1dbb      	adds	r3, r7, #6
 800332a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e082      	b.n	800344c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2241      	movs	r2, #65	; 0x41
 800334a:	5c9b      	ldrb	r3, [r3, r2]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d107      	bne.n	8003362 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2240      	movs	r2, #64	; 0x40
 8003356:	2100      	movs	r1, #0
 8003358:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f7fd fb43 	bl	80009e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2241      	movs	r2, #65	; 0x41
 8003366:	2124      	movs	r1, #36	; 0x24
 8003368:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	438a      	bics	r2, r1
 8003378:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4934      	ldr	r1, [pc, #208]	; (8003454 <HAL_I2C_Init+0x120>)
 8003384:	400a      	ands	r2, r1
 8003386:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4931      	ldr	r1, [pc, #196]	; (8003458 <HAL_I2C_Init+0x124>)
 8003394:	400a      	ands	r2, r1
 8003396:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d108      	bne.n	80033b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	0209      	lsls	r1, r1, #8
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	e007      	b.n	80033c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2184      	movs	r1, #132	; 0x84
 80033bc:	0209      	lsls	r1, r1, #8
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d104      	bne.n	80033d4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	491f      	ldr	r1, [pc, #124]	; (800345c <HAL_I2C_Init+0x128>)
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	491a      	ldr	r1, [pc, #104]	; (8003458 <HAL_I2C_Init+0x124>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	0011      	movs	r1, r2
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69d9      	ldr	r1, [r3, #28]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1a      	ldr	r2, [r3, #32]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2101      	movs	r1, #1
 800342a:	430a      	orrs	r2, r1
 800342c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2241      	movs	r2, #65	; 0x41
 8003438:	2120      	movs	r1, #32
 800343a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2242      	movs	r2, #66	; 0x42
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}
 8003454:	f0ffffff 	.word	0xf0ffffff
 8003458:	ffff7fff 	.word	0xffff7fff
 800345c:	02008000 	.word	0x02008000

08003460 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2241      	movs	r2, #65	; 0x41
 800346e:	5c9b      	ldrb	r3, [r3, r2]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b20      	cmp	r3, #32
 8003474:	d138      	bne.n	80034e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2240      	movs	r2, #64	; 0x40
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003480:	2302      	movs	r3, #2
 8003482:	e032      	b.n	80034ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2240      	movs	r2, #64	; 0x40
 8003488:	2101      	movs	r1, #1
 800348a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2241      	movs	r2, #65	; 0x41
 8003490:	2124      	movs	r1, #36	; 0x24
 8003492:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2101      	movs	r1, #1
 80034a0:	438a      	bics	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4911      	ldr	r1, [pc, #68]	; (80034f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2101      	movs	r1, #1
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2241      	movs	r2, #65	; 0x41
 80034d8:	2120      	movs	r1, #32
 80034da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2240      	movs	r2, #64	; 0x40
 80034e0:	2100      	movs	r1, #0
 80034e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e000      	b.n	80034ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
  }
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	ffffefff 	.word	0xffffefff

080034f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2241      	movs	r2, #65	; 0x41
 8003506:	5c9b      	ldrb	r3, [r3, r2]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	d139      	bne.n	8003582 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2240      	movs	r2, #64	; 0x40
 8003512:	5c9b      	ldrb	r3, [r3, r2]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003518:	2302      	movs	r3, #2
 800351a:	e033      	b.n	8003584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	2101      	movs	r1, #1
 8003522:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2241      	movs	r2, #65	; 0x41
 8003528:	2124      	movs	r1, #36	; 0x24
 800352a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2101      	movs	r1, #1
 8003538:	438a      	bics	r2, r1
 800353a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a11      	ldr	r2, [pc, #68]	; (800358c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003548:	4013      	ands	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2241      	movs	r2, #65	; 0x41
 8003572:	2120      	movs	r1, #32
 8003574:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	2100      	movs	r1, #0
 800357c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	e000      	b.n	8003584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003582:	2302      	movs	r3, #2
  }
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b004      	add	sp, #16
 800358a:	bd80      	pop	{r7, pc}
 800358c:	fffff0ff 	.word	0xfffff0ff

08003590 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003592:	b08b      	sub	sp, #44	; 0x2c
 8003594:	af06      	add	r7, sp, #24
 8003596:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0e4      	b.n	800376c <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a73      	ldr	r2, [pc, #460]	; (8003774 <HAL_PCD_Init+0x1e4>)
 80035a6:	5c9b      	ldrb	r3, [r3, r2]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d108      	bne.n	80035c0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	238a      	movs	r3, #138	; 0x8a
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	2100      	movs	r1, #0
 80035b6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fd ff44 	bl	8001448 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a6c      	ldr	r2, [pc, #432]	; (8003774 <HAL_PCD_Init+0x1e4>)
 80035c4:	2103      	movs	r1, #3
 80035c6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f002 f91d 	bl	800580c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d2:	230f      	movs	r3, #15
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e043      	b.n	8003664 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035dc:	200f      	movs	r0, #15
 80035de:	183b      	adds	r3, r7, r0
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	2129      	movs	r1, #41	; 0x29
 80035e6:	015b      	lsls	r3, r3, #5
 80035e8:	18d3      	adds	r3, r2, r3
 80035ea:	185b      	adds	r3, r3, r1
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035f0:	183b      	adds	r3, r7, r0
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	2128      	movs	r1, #40	; 0x28
 80035f8:	015b      	lsls	r3, r3, #5
 80035fa:	18d3      	adds	r3, r2, r3
 80035fc:	185b      	adds	r3, r3, r1
 80035fe:	183a      	adds	r2, r7, r0
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003604:	183b      	adds	r3, r7, r0
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	183a      	adds	r2, r7, r0
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	b291      	uxth	r1, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	015b      	lsls	r3, r3, #5
 8003612:	18d3      	adds	r3, r2, r3
 8003614:	3336      	adds	r3, #54	; 0x36
 8003616:	1c0a      	adds	r2, r1, #0
 8003618:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800361a:	183b      	adds	r3, r7, r0
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	212b      	movs	r1, #43	; 0x2b
 8003622:	015b      	lsls	r3, r3, #5
 8003624:	18d3      	adds	r3, r2, r3
 8003626:	185b      	adds	r3, r3, r1
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800362c:	183b      	adds	r3, r7, r0
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	015b      	lsls	r3, r3, #5
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	3338      	adds	r3, #56	; 0x38
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800363c:	183b      	adds	r3, r7, r0
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	015b      	lsls	r3, r3, #5
 8003644:	18d3      	adds	r3, r2, r3
 8003646:	333c      	adds	r3, #60	; 0x3c
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800364c:	183b      	adds	r3, r7, r0
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3202      	adds	r2, #2
 8003654:	0152      	lsls	r2, r2, #5
 8003656:	2100      	movs	r1, #0
 8003658:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365a:	183b      	adds	r3, r7, r0
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	183b      	adds	r3, r7, r0
 8003660:	3201      	adds	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	230f      	movs	r3, #15
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	d3b4      	bcc.n	80035dc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003672:	230f      	movs	r3, #15
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e03f      	b.n	80036fc <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800367c:	200f      	movs	r0, #15
 800367e:	183b      	adds	r3, r7, r0
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	232a      	movs	r3, #42	; 0x2a
 8003686:	33ff      	adds	r3, #255	; 0xff
 8003688:	0152      	lsls	r2, r2, #5
 800368a:	188a      	adds	r2, r1, r2
 800368c:	18d3      	adds	r3, r2, r3
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003692:	183b      	adds	r3, r7, r0
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	2394      	movs	r3, #148	; 0x94
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	0152      	lsls	r2, r2, #5
 800369e:	188a      	adds	r2, r1, r2
 80036a0:	18d3      	adds	r3, r2, r3
 80036a2:	183a      	adds	r2, r7, r0
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036a8:	183b      	adds	r3, r7, r0
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	232c      	movs	r3, #44	; 0x2c
 80036b0:	33ff      	adds	r3, #255	; 0xff
 80036b2:	0152      	lsls	r2, r2, #5
 80036b4:	188a      	adds	r2, r1, r2
 80036b6:	18d3      	adds	r3, r2, r3
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036bc:	183b      	adds	r3, r7, r0
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	239c      	movs	r3, #156	; 0x9c
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	0152      	lsls	r2, r2, #5
 80036c8:	188a      	adds	r2, r1, r2
 80036ca:	18d3      	adds	r3, r2, r3
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036d0:	183b      	adds	r3, r7, r0
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	239e      	movs	r3, #158	; 0x9e
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	0152      	lsls	r2, r2, #5
 80036dc:	188a      	adds	r2, r1, r2
 80036de:	18d3      	adds	r3, r2, r3
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036e4:	183b      	adds	r3, r7, r0
 80036e6:	781a      	ldrb	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	320a      	adds	r2, #10
 80036ec:	0152      	lsls	r2, r2, #5
 80036ee:	2100      	movs	r1, #0
 80036f0:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f2:	183b      	adds	r3, r7, r0
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	183b      	adds	r3, r7, r0
 80036f8:	3201      	adds	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	230f      	movs	r3, #15
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	d3b8      	bcc.n	800367c <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	466a      	mov	r2, sp
 8003712:	0011      	movs	r1, r2
 8003714:	001a      	movs	r2, r3
 8003716:	3210      	adds	r2, #16
 8003718:	ca70      	ldmia	r2!, {r4, r5, r6}
 800371a:	c170      	stmia	r1!, {r4, r5, r6}
 800371c:	ca30      	ldmia	r2!, {r4, r5}
 800371e:	c130      	stmia	r1!, {r4, r5}
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f002 f891 	bl	800584c <USB_DevInit>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d005      	beq.n	800373a <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a10      	ldr	r2, [pc, #64]	; (8003774 <HAL_PCD_Init+0x1e4>)
 8003732:	2102      	movs	r1, #2
 8003734:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e018      	b.n	800376c <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2224      	movs	r2, #36	; 0x24
 800373e:	2100      	movs	r1, #0
 8003740:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <HAL_PCD_Init+0x1e4>)
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d103      	bne.n	800375a <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0018      	movs	r0, r3
 8003756:	f000 f834 	bl	80037c2 <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d103      	bne.n	800376a <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f000 f807 	bl	8003778 <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b005      	add	sp, #20
 8003772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003774:	00000229 	.word	0x00000229

08003778 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	239b      	movs	r3, #155	; 0x9b
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	2101      	movs	r1, #1
 800378e:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2258      	movs	r2, #88	; 0x58
 8003794:	5a9b      	ldrh	r3, [r3, r2]
 8003796:	b29b      	uxth	r3, r3
 8003798:	2201      	movs	r2, #1
 800379a:	4313      	orrs	r3, r2
 800379c:	b299      	uxth	r1, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2258      	movs	r2, #88	; 0x58
 80037a2:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2258      	movs	r2, #88	; 0x58
 80037a8:	5a9b      	ldrh	r3, [r3, r2]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2202      	movs	r2, #2
 80037ae:	4313      	orrs	r3, r2
 80037b0:	b299      	uxth	r1, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2258      	movs	r2, #88	; 0x58
 80037b6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b004      	add	sp, #16
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	239a      	movs	r3, #154	; 0x9a
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	2101      	movs	r1, #1
 80037d8:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	2398      	movs	r3, #152	; 0x98
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	2100      	movs	r1, #0
 80037e2:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2254      	movs	r2, #84	; 0x54
 80037e8:	5a9b      	ldrh	r3, [r3, r2]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2201      	movs	r2, #1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b299      	uxth	r1, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2254      	movs	r2, #84	; 0x54
 80037f6:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2254      	movs	r2, #84	; 0x54
 80037fc:	5a9b      	ldrh	r3, [r3, r2]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2202      	movs	r2, #2
 8003802:	4313      	orrs	r3, r2
 8003804:	b299      	uxth	r1, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2254      	movs	r2, #84	; 0x54
 800380a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003818:	b5b0      	push	{r4, r5, r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d102      	bne.n	800382c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f000 fbab 	bl	8003f82 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382c:	4bce      	ldr	r3, [pc, #824]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	220c      	movs	r2, #12
 8003832:	4013      	ands	r3, r2
 8003834:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003836:	4bcc      	ldr	r3, [pc, #816]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	025b      	lsls	r3, r3, #9
 800383e:	4013      	ands	r3, r2
 8003840:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2201      	movs	r2, #1
 8003848:	4013      	ands	r3, r2
 800384a:	d100      	bne.n	800384e <HAL_RCC_OscConfig+0x36>
 800384c:	e07e      	b.n	800394c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d007      	beq.n	8003864 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d112      	bne.n	8003880 <HAL_RCC_OscConfig+0x68>
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	025b      	lsls	r3, r3, #9
 8003860:	429a      	cmp	r2, r3
 8003862:	d10d      	bne.n	8003880 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	4bc0      	ldr	r3, [pc, #768]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	029b      	lsls	r3, r3, #10
 800386c:	4013      	ands	r3, r2
 800386e:	d100      	bne.n	8003872 <HAL_RCC_OscConfig+0x5a>
 8003870:	e06b      	b.n	800394a <HAL_RCC_OscConfig+0x132>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d167      	bne.n	800394a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f000 fb81 	bl	8003f82 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	025b      	lsls	r3, r3, #9
 8003888:	429a      	cmp	r2, r3
 800388a:	d107      	bne.n	800389c <HAL_RCC_OscConfig+0x84>
 800388c:	4bb6      	ldr	r3, [pc, #728]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4bb5      	ldr	r3, [pc, #724]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	0249      	lsls	r1, r1, #9
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e027      	b.n	80038ec <HAL_RCC_OscConfig+0xd4>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	23a0      	movs	r3, #160	; 0xa0
 80038a2:	02db      	lsls	r3, r3, #11
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d10e      	bne.n	80038c6 <HAL_RCC_OscConfig+0xae>
 80038a8:	4baf      	ldr	r3, [pc, #700]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4bae      	ldr	r3, [pc, #696]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	02c9      	lsls	r1, r1, #11
 80038b2:	430a      	orrs	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	4bac      	ldr	r3, [pc, #688]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4bab      	ldr	r3, [pc, #684]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	0249      	lsls	r1, r1, #9
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e012      	b.n	80038ec <HAL_RCC_OscConfig+0xd4>
 80038c6:	4ba8      	ldr	r3, [pc, #672]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4ba7      	ldr	r3, [pc, #668]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80038cc:	49a7      	ldr	r1, [pc, #668]	; (8003b6c <HAL_RCC_OscConfig+0x354>)
 80038ce:	400a      	ands	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	4ba5      	ldr	r3, [pc, #660]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	025b      	lsls	r3, r3, #9
 80038da:	4013      	ands	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4ba1      	ldr	r3, [pc, #644]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4ba0      	ldr	r3, [pc, #640]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80038e6:	49a2      	ldr	r1, [pc, #648]	; (8003b70 <HAL_RCC_OscConfig+0x358>)
 80038e8:	400a      	ands	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d015      	beq.n	8003920 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe fab0 	bl	8001e58 <HAL_GetTick>
 80038f8:	0003      	movs	r3, r0
 80038fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038fc:	e009      	b.n	8003912 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fe:	f7fe faab 	bl	8001e58 <HAL_GetTick>
 8003902:	0002      	movs	r2, r0
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b64      	cmp	r3, #100	; 0x64
 800390a:	d902      	bls.n	8003912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	f000 fb38 	bl	8003f82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003912:	4b95      	ldr	r3, [pc, #596]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	029b      	lsls	r3, r3, #10
 800391a:	4013      	ands	r3, r2
 800391c:	d0ef      	beq.n	80038fe <HAL_RCC_OscConfig+0xe6>
 800391e:	e015      	b.n	800394c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe fa9a 	bl	8001e58 <HAL_GetTick>
 8003924:	0003      	movs	r3, r0
 8003926:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800392a:	f7fe fa95 	bl	8001e58 <HAL_GetTick>
 800392e:	0002      	movs	r2, r0
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b64      	cmp	r3, #100	; 0x64
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e322      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800393c:	4b8a      	ldr	r3, [pc, #552]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	029b      	lsls	r3, r3, #10
 8003944:	4013      	ands	r3, r2
 8003946:	d1f0      	bne.n	800392a <HAL_RCC_OscConfig+0x112>
 8003948:	e000      	b.n	800394c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2202      	movs	r2, #2
 8003952:	4013      	ands	r3, r2
 8003954:	d100      	bne.n	8003958 <HAL_RCC_OscConfig+0x140>
 8003956:	e08a      	b.n	8003a6e <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d005      	beq.n	8003970 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d13d      	bne.n	80039e6 <HAL_RCC_OscConfig+0x1ce>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d13a      	bne.n	80039e6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003970:	4b7d      	ldr	r3, [pc, #500]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2204      	movs	r2, #4
 8003976:	4013      	ands	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_RCC_OscConfig+0x16c>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e2fe      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003984:	4b78      	ldr	r3, [pc, #480]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a7a      	ldr	r2, [pc, #488]	; (8003b74 <HAL_RCC_OscConfig+0x35c>)
 800398a:	4013      	ands	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	4b74      	ldr	r3, [pc, #464]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800399a:	4b73      	ldr	r3, [pc, #460]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2209      	movs	r2, #9
 80039a0:	4393      	bics	r3, r2
 80039a2:	0019      	movs	r1, r3
 80039a4:	4b70      	ldr	r3, [pc, #448]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ac:	f000 fc1e 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 80039b0:	0001      	movs	r1, r0
 80039b2:	4b6d      	ldr	r3, [pc, #436]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	220f      	movs	r2, #15
 80039ba:	4013      	ands	r3, r2
 80039bc:	4a6e      	ldr	r2, [pc, #440]	; (8003b78 <HAL_RCC_OscConfig+0x360>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	000a      	movs	r2, r1
 80039c2:	40da      	lsrs	r2, r3
 80039c4:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <HAL_RCC_OscConfig+0x364>)
 80039c6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80039c8:	2513      	movs	r5, #19
 80039ca:	197c      	adds	r4, r7, r5
 80039cc:	2000      	movs	r0, #0
 80039ce:	f7fe fa0d 	bl	8001dec <HAL_InitTick>
 80039d2:	0003      	movs	r3, r0
 80039d4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80039d6:	197b      	adds	r3, r7, r5
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d047      	beq.n	8003a6e <HAL_RCC_OscConfig+0x256>
      {
        return status;
 80039de:	2313      	movs	r3, #19
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	e2cd      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d027      	beq.n	8003a3c <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80039ec:	4b5e      	ldr	r3, [pc, #376]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2209      	movs	r2, #9
 80039f2:	4393      	bics	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	4b5c      	ldr	r3, [pc, #368]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fe fa2b 	bl	8001e58 <HAL_GetTick>
 8003a02:	0003      	movs	r3, r0
 8003a04:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a08:	f7fe fa26 	bl	8001e58 <HAL_GetTick>
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e2b3      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a1a:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	4013      	ands	r3, r2
 8003a22:	d0f1      	beq.n	8003a08 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b50      	ldr	r3, [pc, #320]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a52      	ldr	r2, [pc, #328]	; (8003b74 <HAL_RCC_OscConfig+0x35c>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	021a      	lsls	r2, r3, #8
 8003a34:	4b4c      	ldr	r3, [pc, #304]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	e018      	b.n	8003a6e <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3c:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b49      	ldr	r3, [pc, #292]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003a42:	2101      	movs	r1, #1
 8003a44:	438a      	bics	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fe fa06 	bl	8001e58 <HAL_GetTick>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a52:	f7fe fa01 	bl	8001e58 <HAL_GetTick>
 8003a56:	0002      	movs	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e28e      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a64:	4b40      	ldr	r3, [pc, #256]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d1f1      	bne.n	8003a52 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2210      	movs	r2, #16
 8003a74:	4013      	ands	r3, r2
 8003a76:	d100      	bne.n	8003a7a <HAL_RCC_OscConfig+0x262>
 8003a78:	e09e      	b.n	8003bb8 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d13f      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a80:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_OscConfig+0x280>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e274      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a98:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a38      	ldr	r2, [pc, #224]	; (8003b80 <HAL_RCC_OscConfig+0x368>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa6:	4b30      	ldr	r3, [pc, #192]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aac:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	0a19      	lsrs	r1, r3, #8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	061a      	lsls	r2, r3, #24
 8003aba:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	0b5b      	lsrs	r3, r3, #13
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	2280      	movs	r2, #128	; 0x80
 8003aca:	0212      	lsls	r2, r2, #8
 8003acc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003ace:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	210f      	movs	r1, #15
 8003ad6:	400b      	ands	r3, r1
 8003ad8:	4927      	ldr	r1, [pc, #156]	; (8003b78 <HAL_RCC_OscConfig+0x360>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ade:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <HAL_RCC_OscConfig+0x364>)
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003ae2:	2513      	movs	r5, #19
 8003ae4:	197c      	adds	r4, r7, r5
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7fe f980 	bl	8001dec <HAL_InitTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003af0:	197b      	adds	r3, r7, r5
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05f      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8003af8:	2313      	movs	r3, #19
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	e240      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03d      	beq.n	8003b84 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b08:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b16      	ldr	r3, [pc, #88]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003b0e:	2180      	movs	r1, #128	; 0x80
 8003b10:	0049      	lsls	r1, r1, #1
 8003b12:	430a      	orrs	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fe f99f 	bl	8001e58 <HAL_GetTick>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b20:	f7fe f99a 	bl	8001e58 <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e227      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <HAL_RCC_OscConfig+0x368>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	0a19      	lsrs	r1, r3, #8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	061a      	lsls	r2, r3, #24
 8003b60:	4b01      	ldr	r3, [pc, #4]	; (8003b68 <HAL_RCC_OscConfig+0x350>)
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	e027      	b.n	8003bb8 <HAL_RCC_OscConfig+0x3a0>
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	fffeffff 	.word	0xfffeffff
 8003b70:	fffbffff 	.word	0xfffbffff
 8003b74:	ffffe0ff 	.word	0xffffe0ff
 8003b78:	08006968 	.word	0x08006968
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b84:	4bbd      	ldr	r3, [pc, #756]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4bbc      	ldr	r3, [pc, #752]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003b8a:	49bd      	ldr	r1, [pc, #756]	; (8003e80 <HAL_RCC_OscConfig+0x668>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe f962 	bl	8001e58 <HAL_GetTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b9a:	f7fe f95d 	bl	8001e58 <HAL_GetTick>
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e1ea      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003bac:	4bb3      	ldr	r3, [pc, #716]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d036      	beq.n	8003c30 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d019      	beq.n	8003bfe <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bca:	4bac      	ldr	r3, [pc, #688]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bce:	4bab      	ldr	r3, [pc, #684]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd6:	f7fe f93f 	bl	8001e58 <HAL_GetTick>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be0:	f7fe f93a 	bl	8001e58 <HAL_GetTick>
 8003be4:	0002      	movs	r2, r0
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1c7      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bf2:	4ba2      	ldr	r3, [pc, #648]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d0f1      	beq.n	8003be0 <HAL_RCC_OscConfig+0x3c8>
 8003bfc:	e018      	b.n	8003c30 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfe:	4b9f      	ldr	r3, [pc, #636]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c02:	4b9e      	ldr	r3, [pc, #632]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	438a      	bics	r2, r1
 8003c08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fe f925 	bl	8001e58 <HAL_GetTick>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c14:	f7fe f920 	bl	8001e58 <HAL_GetTick>
 8003c18:	0002      	movs	r2, r0
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1ad      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c26:	4b95      	ldr	r3, [pc, #596]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d1f1      	bne.n	8003c14 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2204      	movs	r2, #4
 8003c36:	4013      	ands	r3, r2
 8003c38:	d100      	bne.n	8003c3c <HAL_RCC_OscConfig+0x424>
 8003c3a:	e0af      	b.n	8003d9c <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3c:	2327      	movs	r3, #39	; 0x27
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c44:	4b8d      	ldr	r3, [pc, #564]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	055b      	lsls	r3, r3, #21
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d10a      	bne.n	8003c66 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c50:	4b8a      	ldr	r3, [pc, #552]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c54:	4b89      	ldr	r3, [pc, #548]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	0549      	lsls	r1, r1, #21
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003c5e:	2327      	movs	r3, #39	; 0x27
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	2201      	movs	r2, #1
 8003c64:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c66:	4b87      	ldr	r3, [pc, #540]	; (8003e84 <HAL_RCC_OscConfig+0x66c>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d11a      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c72:	4b84      	ldr	r3, [pc, #528]	; (8003e84 <HAL_RCC_OscConfig+0x66c>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b83      	ldr	r3, [pc, #524]	; (8003e84 <HAL_RCC_OscConfig+0x66c>)
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	0049      	lsls	r1, r1, #1
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c80:	f7fe f8ea 	bl	8001e58 <HAL_GetTick>
 8003c84:	0003      	movs	r3, r0
 8003c86:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8a:	f7fe f8e5 	bl	8001e58 <HAL_GetTick>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b64      	cmp	r3, #100	; 0x64
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e172      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <HAL_RCC_OscConfig+0x66c>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x4ac>
 8003cb4:	4b71      	ldr	r3, [pc, #452]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003cb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cb8:	4b70      	ldr	r3, [pc, #448]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003cba:	2180      	movs	r1, #128	; 0x80
 8003cbc:	0049      	lsls	r1, r1, #1
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	651a      	str	r2, [r3, #80]	; 0x50
 8003cc2:	e031      	b.n	8003d28 <HAL_RCC_OscConfig+0x510>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x4ce>
 8003ccc:	4b6b      	ldr	r3, [pc, #428]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cd0:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003cd2:	496b      	ldr	r1, [pc, #428]	; (8003e80 <HAL_RCC_OscConfig+0x668>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	651a      	str	r2, [r3, #80]	; 0x50
 8003cd8:	4b68      	ldr	r3, [pc, #416]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003cda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cdc:	4b67      	ldr	r3, [pc, #412]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003cde:	496a      	ldr	r1, [pc, #424]	; (8003e88 <HAL_RCC_OscConfig+0x670>)
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ce4:	e020      	b.n	8003d28 <HAL_RCC_OscConfig+0x510>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	23a0      	movs	r3, #160	; 0xa0
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d10e      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
 8003cf2:	4b62      	ldr	r3, [pc, #392]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cf6:	4b61      	ldr	r3, [pc, #388]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003cf8:	2180      	movs	r1, #128	; 0x80
 8003cfa:	00c9      	lsls	r1, r1, #3
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	651a      	str	r2, [r3, #80]	; 0x50
 8003d00:	4b5e      	ldr	r3, [pc, #376]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d04:	4b5d      	ldr	r3, [pc, #372]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003d06:	2180      	movs	r1, #128	; 0x80
 8003d08:	0049      	lsls	r1, r1, #1
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	651a      	str	r2, [r3, #80]	; 0x50
 8003d0e:	e00b      	b.n	8003d28 <HAL_RCC_OscConfig+0x510>
 8003d10:	4b5a      	ldr	r3, [pc, #360]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003d12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d14:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003d16:	495a      	ldr	r1, [pc, #360]	; (8003e80 <HAL_RCC_OscConfig+0x668>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	651a      	str	r2, [r3, #80]	; 0x50
 8003d1c:	4b57      	ldr	r3, [pc, #348]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003d1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d20:	4b56      	ldr	r3, [pc, #344]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003d22:	4959      	ldr	r1, [pc, #356]	; (8003e88 <HAL_RCC_OscConfig+0x670>)
 8003d24:	400a      	ands	r2, r1
 8003d26:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d30:	f7fe f892 	bl	8001e58 <HAL_GetTick>
 8003d34:	0003      	movs	r3, r0
 8003d36:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d38:	e009      	b.n	8003d4e <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fe f88d 	bl	8001e58 <HAL_GetTick>
 8003d3e:	0002      	movs	r2, r0
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	4a51      	ldr	r2, [pc, #324]	; (8003e8c <HAL_RCC_OscConfig+0x674>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e119      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d4e:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4013      	ands	r3, r2
 8003d58:	d0ef      	beq.n	8003d3a <HAL_RCC_OscConfig+0x522>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5c:	f7fe f87c 	bl	8001e58 <HAL_GetTick>
 8003d60:	0003      	movs	r3, r0
 8003d62:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d64:	e009      	b.n	8003d7a <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fe f877 	bl	8001e58 <HAL_GetTick>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	4a46      	ldr	r2, [pc, #280]	; (8003e8c <HAL_RCC_OscConfig+0x674>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e103      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d7a:	4b40      	ldr	r3, [pc, #256]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003d7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4013      	ands	r3, r2
 8003d84:	d1ef      	bne.n	8003d66 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d86:	2327      	movs	r3, #39	; 0x27
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d90:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d94:	4b39      	ldr	r3, [pc, #228]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003d96:	493e      	ldr	r1, [pc, #248]	; (8003e90 <HAL_RCC_OscConfig+0x678>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2220      	movs	r2, #32
 8003da2:	4013      	ands	r3, r2
 8003da4:	d049      	beq.n	8003e3a <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d026      	beq.n	8003dfc <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003dae:	4b33      	ldr	r3, [pc, #204]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003db4:	2101      	movs	r1, #1
 8003db6:	430a      	orrs	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbe:	4b2f      	ldr	r3, [pc, #188]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8003dc6:	4b33      	ldr	r3, [pc, #204]	; (8003e94 <HAL_RCC_OscConfig+0x67c>)
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <HAL_RCC_OscConfig+0x67c>)
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	0189      	lsls	r1, r1, #6
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe f840 	bl	8001e58 <HAL_GetTick>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dde:	f7fe f83b 	bl	8001e58 <HAL_GetTick>
 8003de2:	0002      	movs	r2, r0
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e0c8      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003df0:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2202      	movs	r2, #2
 8003df6:	4013      	ands	r3, r2
 8003df8:	d0f1      	beq.n	8003dde <HAL_RCC_OscConfig+0x5c6>
 8003dfa:	e01e      	b.n	8003e3a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003e02:	2101      	movs	r1, #1
 8003e04:	438a      	bics	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <HAL_RCC_OscConfig+0x67c>)
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <HAL_RCC_OscConfig+0x67c>)
 8003e0e:	4922      	ldr	r1, [pc, #136]	; (8003e98 <HAL_RCC_OscConfig+0x680>)
 8003e10:	400a      	ands	r2, r1
 8003e12:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fe f820 	bl	8001e58 <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e1e:	f7fe f81b 	bl	8001e58 <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0a8      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2202      	movs	r2, #2
 8003e36:	4013      	ands	r3, r2
 8003e38:	d1f1      	bne.n	8003e1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d100      	bne.n	8003e44 <HAL_RCC_OscConfig+0x62c>
 8003e42:	e09d      	b.n	8003f80 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d100      	bne.n	8003e4c <HAL_RCC_OscConfig+0x634>
 8003e4a:	e076      	b.n	8003f3a <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d157      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_RCC_OscConfig+0x664>)
 8003e5a:	4910      	ldr	r1, [pc, #64]	; (8003e9c <HAL_RCC_OscConfig+0x684>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e60:	f7fd fffa 	bl	8001e58 <HAL_GetTick>
 8003e64:	0003      	movs	r3, r0
 8003e66:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e68:	e01a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fd fff5 	bl	8001e58 <HAL_GetTick>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d913      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e082      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	fffffeff 	.word	0xfffffeff
 8003e84:	40007000 	.word	0x40007000
 8003e88:	fffffbff 	.word	0xfffffbff
 8003e8c:	00001388 	.word	0x00001388
 8003e90:	efffffff 	.word	0xefffffff
 8003e94:	40010000 	.word	0x40010000
 8003e98:	ffffdfff 	.word	0xffffdfff
 8003e9c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ea0:	4b3a      	ldr	r3, [pc, #232]	; (8003f8c <HAL_RCC_OscConfig+0x774>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	049b      	lsls	r3, r3, #18
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d1de      	bne.n	8003e6a <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eac:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <HAL_RCC_OscConfig+0x774>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a37      	ldr	r2, [pc, #220]	; (8003f90 <HAL_RCC_OscConfig+0x778>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <HAL_RCC_OscConfig+0x774>)
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <HAL_RCC_OscConfig+0x774>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_RCC_OscConfig+0x774>)
 8003ed2:	2180      	movs	r1, #128	; 0x80
 8003ed4:	0449      	lsls	r1, r1, #17
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd ffbd 	bl	8001e58 <HAL_GetTick>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fd ffb8 	bl	8001e58 <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e045      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ef6:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <HAL_RCC_OscConfig+0x774>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	049b      	lsls	r3, r3, #18
 8003efe:	4013      	ands	r3, r2
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x6cc>
 8003f02:	e03d      	b.n	8003f80 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f04:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <HAL_RCC_OscConfig+0x774>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_RCC_OscConfig+0x774>)
 8003f0a:	4922      	ldr	r1, [pc, #136]	; (8003f94 <HAL_RCC_OscConfig+0x77c>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fd ffa2 	bl	8001e58 <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7fd ff9d 	bl	8001e58 <HAL_GetTick>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e02a      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <HAL_RCC_OscConfig+0x774>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	049b      	lsls	r3, r3, #18
 8003f34:	4013      	ands	r3, r2
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x702>
 8003f38:	e022      	b.n	8003f80 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e01d      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <HAL_RCC_OscConfig+0x774>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	025b      	lsls	r3, r3, #9
 8003f52:	401a      	ands	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d10f      	bne.n	8003f7c <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	23f0      	movs	r3, #240	; 0xf0
 8003f60:	039b      	lsls	r3, r3, #14
 8003f62:	401a      	ands	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	23c0      	movs	r3, #192	; 0xc0
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	401a      	ands	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b00a      	add	sp, #40	; 0x28
 8003f88:	bdb0      	pop	{r4, r5, r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	ff02ffff 	.word	0xff02ffff
 8003f94:	feffffff 	.word	0xfeffffff

08003f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f98:	b5b0      	push	{r4, r5, r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e10d      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fac:	4b88      	ldr	r3, [pc, #544]	; (80041d0 <HAL_RCC_ClockConfig+0x238>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d911      	bls.n	8003fde <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b85      	ldr	r3, [pc, #532]	; (80041d0 <HAL_RCC_ClockConfig+0x238>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	4393      	bics	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	4b82      	ldr	r3, [pc, #520]	; (80041d0 <HAL_RCC_ClockConfig+0x238>)
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fcc:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <HAL_RCC_ClockConfig+0x238>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d001      	beq.n	8003fde <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0f4      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d009      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b7a      	ldr	r3, [pc, #488]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	22f0      	movs	r2, #240	; 0xf0
 8003fee:	4393      	bics	r3, r2
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	4b77      	ldr	r3, [pc, #476]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	4013      	ands	r3, r2
 8004004:	d100      	bne.n	8004008 <HAL_RCC_ClockConfig+0x70>
 8004006:	e089      	b.n	800411c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d107      	bne.n	8004020 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004010:	4b70      	ldr	r3, [pc, #448]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	029b      	lsls	r3, r3, #10
 8004018:	4013      	ands	r3, r2
 800401a:	d120      	bne.n	800405e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0d3      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d107      	bne.n	8004038 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004028:	4b6a      	ldr	r3, [pc, #424]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	049b      	lsls	r3, r3, #18
 8004030:	4013      	ands	r3, r2
 8004032:	d114      	bne.n	800405e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0c7      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d106      	bne.n	800404e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004040:	4b64      	ldr	r3, [pc, #400]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2204      	movs	r2, #4
 8004046:	4013      	ands	r3, r2
 8004048:	d109      	bne.n	800405e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e0bc      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800404e:	4b61      	ldr	r3, [pc, #388]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4013      	ands	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0b4      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405e:	4b5d      	ldr	r3, [pc, #372]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2203      	movs	r2, #3
 8004064:	4393      	bics	r3, r2
 8004066:	0019      	movs	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	4b59      	ldr	r3, [pc, #356]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 800406e:	430a      	orrs	r2, r1
 8004070:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004072:	f7fd fef1 	bl	8001e58 <HAL_GetTick>
 8004076:	0003      	movs	r3, r0
 8004078:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d111      	bne.n	80040a6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004082:	e009      	b.n	8004098 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004084:	f7fd fee8 	bl	8001e58 <HAL_GetTick>
 8004088:	0002      	movs	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	4a52      	ldr	r2, [pc, #328]	; (80041d8 <HAL_RCC_ClockConfig+0x240>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e097      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004098:	4b4e      	ldr	r3, [pc, #312]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	220c      	movs	r2, #12
 800409e:	4013      	ands	r3, r2
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d1ef      	bne.n	8004084 <HAL_RCC_ClockConfig+0xec>
 80040a4:	e03a      	b.n	800411c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d111      	bne.n	80040d2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ae:	e009      	b.n	80040c4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fd fed2 	bl	8001e58 <HAL_GetTick>
 80040b4:	0002      	movs	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	4a47      	ldr	r2, [pc, #284]	; (80041d8 <HAL_RCC_ClockConfig+0x240>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e081      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c4:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	220c      	movs	r2, #12
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b0c      	cmp	r3, #12
 80040ce:	d1ef      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x118>
 80040d0:	e024      	b.n	800411c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d11b      	bne.n	8004112 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80040da:	e009      	b.n	80040f0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040dc:	f7fd febc 	bl	8001e58 <HAL_GetTick>
 80040e0:	0002      	movs	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <HAL_RCC_ClockConfig+0x240>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e06b      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80040f0:	4b38      	ldr	r3, [pc, #224]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	220c      	movs	r2, #12
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d1ef      	bne.n	80040dc <HAL_RCC_ClockConfig+0x144>
 80040fc:	e00e      	b.n	800411c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fe:	f7fd feab 	bl	8001e58 <HAL_GetTick>
 8004102:	0002      	movs	r2, r0
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	4a33      	ldr	r2, [pc, #204]	; (80041d8 <HAL_RCC_ClockConfig+0x240>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e05a      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004112:	4b30      	ldr	r3, [pc, #192]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	220c      	movs	r2, #12
 8004118:	4013      	ands	r3, r2
 800411a:	d1f0      	bne.n	80040fe <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <HAL_RCC_ClockConfig+0x238>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2201      	movs	r2, #1
 8004122:	4013      	ands	r3, r2
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d211      	bcs.n	800414e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <HAL_RCC_ClockConfig+0x238>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2201      	movs	r2, #1
 8004130:	4393      	bics	r3, r2
 8004132:	0019      	movs	r1, r3
 8004134:	4b26      	ldr	r3, [pc, #152]	; (80041d0 <HAL_RCC_ClockConfig+0x238>)
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCC_ClockConfig+0x238>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2201      	movs	r2, #1
 8004142:	4013      	ands	r3, r2
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e03c      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2204      	movs	r2, #4
 8004154:	4013      	ands	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004158:	4b1e      	ldr	r3, [pc, #120]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <HAL_RCC_ClockConfig+0x244>)
 800415e:	4013      	ands	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8004168:	430a      	orrs	r2, r1
 800416a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2208      	movs	r2, #8
 8004172:	4013      	ands	r3, r2
 8004174:	d00a      	beq.n	800418c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <HAL_RCC_ClockConfig+0x248>)
 800417c:	4013      	ands	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	00da      	lsls	r2, r3, #3
 8004186:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8004188:	430a      	orrs	r2, r1
 800418a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800418c:	f000 f82e 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 8004190:	0001      	movs	r1, r0
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <HAL_RCC_ClockConfig+0x23c>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	220f      	movs	r2, #15
 800419a:	4013      	ands	r3, r2
 800419c:	4a11      	ldr	r2, [pc, #68]	; (80041e4 <HAL_RCC_ClockConfig+0x24c>)
 800419e:	5cd3      	ldrb	r3, [r2, r3]
 80041a0:	000a      	movs	r2, r1
 80041a2:	40da      	lsrs	r2, r3
 80041a4:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <HAL_RCC_ClockConfig+0x250>)
 80041a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80041a8:	250b      	movs	r5, #11
 80041aa:	197c      	adds	r4, r7, r5
 80041ac:	2000      	movs	r0, #0
 80041ae:	f7fd fe1d 	bl	8001dec <HAL_InitTick>
 80041b2:	0003      	movs	r3, r0
 80041b4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80041b6:	197b      	adds	r3, r7, r5
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80041be:	230b      	movs	r3, #11
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	e000      	b.n	80041c8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b004      	add	sp, #16
 80041ce:	bdb0      	pop	{r4, r5, r7, pc}
 80041d0:	40022000 	.word	0x40022000
 80041d4:	40021000 	.word	0x40021000
 80041d8:	00001388 	.word	0x00001388
 80041dc:	fffff8ff 	.word	0xfffff8ff
 80041e0:	ffffc7ff 	.word	0xffffc7ff
 80041e4:	08006968 	.word	0x08006968
 80041e8:	20000000 	.word	0x20000000

080041ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80041f2:	4b3b      	ldr	r3, [pc, #236]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	220c      	movs	r2, #12
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d00e      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x34>
 8004202:	2b0c      	cmp	r3, #12
 8004204:	d00f      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x3a>
 8004206:	2b04      	cmp	r3, #4
 8004208:	d157      	bne.n	80042ba <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800420a:	4b35      	ldr	r3, [pc, #212]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2210      	movs	r2, #16
 8004210:	4013      	ands	r3, r2
 8004212:	d002      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004214:	4b33      	ldr	r3, [pc, #204]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004216:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004218:	e05d      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800421a:	4b33      	ldr	r3, [pc, #204]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800421c:	613b      	str	r3, [r7, #16]
      break;
 800421e:	e05a      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004220:	4b32      	ldr	r3, [pc, #200]	; (80042ec <HAL_RCC_GetSysClockFreq+0x100>)
 8004222:	613b      	str	r3, [r7, #16]
      break;
 8004224:	e057      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	0c9b      	lsrs	r3, r3, #18
 800422a:	220f      	movs	r2, #15
 800422c:	4013      	ands	r3, r2
 800422e:	4a30      	ldr	r2, [pc, #192]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004230:	5cd3      	ldrb	r3, [r2, r3]
 8004232:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	0d9b      	lsrs	r3, r3, #22
 8004238:	2203      	movs	r2, #3
 800423a:	4013      	ands	r3, r2
 800423c:	3301      	adds	r3, #1
 800423e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004240:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	025b      	lsls	r3, r3, #9
 8004248:	4013      	ands	r3, r2
 800424a:	d00f      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	000a      	movs	r2, r1
 8004250:	0152      	lsls	r2, r2, #5
 8004252:	1a52      	subs	r2, r2, r1
 8004254:	0193      	lsls	r3, r2, #6
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	185b      	adds	r3, r3, r1
 800425c:	025b      	lsls	r3, r3, #9
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	0018      	movs	r0, r3
 8004262:	f7fb ff51 	bl	8000108 <__udivsi3>
 8004266:	0003      	movs	r3, r0
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e023      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800426c:	4b1c      	ldr	r3, [pc, #112]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2210      	movs	r2, #16
 8004272:	4013      	ands	r3, r2
 8004274:	d00f      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	000a      	movs	r2, r1
 800427a:	0152      	lsls	r2, r2, #5
 800427c:	1a52      	subs	r2, r2, r1
 800427e:	0193      	lsls	r3, r2, #6
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	185b      	adds	r3, r3, r1
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	0018      	movs	r0, r3
 800428c:	f7fb ff3c 	bl	8000108 <__udivsi3>
 8004290:	0003      	movs	r3, r0
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e00e      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	000a      	movs	r2, r1
 800429a:	0152      	lsls	r2, r2, #5
 800429c:	1a52      	subs	r2, r2, r1
 800429e:	0193      	lsls	r3, r2, #6
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	185b      	adds	r3, r3, r1
 80042a6:	029b      	lsls	r3, r3, #10
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7fb ff2c 	bl	8000108 <__udivsi3>
 80042b0:	0003      	movs	r3, r0
 80042b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	613b      	str	r3, [r7, #16]
      break;
 80042b8:	e00d      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	0b5b      	lsrs	r3, r3, #13
 80042c0:	2207      	movs	r2, #7
 80042c2:	4013      	ands	r3, r2
 80042c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	0212      	lsls	r2, r2, #8
 80042ce:	409a      	lsls	r2, r3
 80042d0:	0013      	movs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
      break;
 80042d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80042d6:	693b      	ldr	r3, [r7, #16]
}
 80042d8:	0018      	movs	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	b006      	add	sp, #24
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40021000 	.word	0x40021000
 80042e4:	003d0900 	.word	0x003d0900
 80042e8:	00f42400 	.word	0x00f42400
 80042ec:	007a1200 	.word	0x007a1200
 80042f0:	08006980 	.word	0x08006980

080042f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f8:	4b02      	ldr	r3, [pc, #8]	; (8004304 <HAL_RCC_GetHCLKFreq+0x10>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	0018      	movs	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	20000000 	.word	0x20000000

08004308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800430c:	f7ff fff2 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004310:	0001      	movs	r1, r0
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	2207      	movs	r2, #7
 800431a:	4013      	ands	r3, r2
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800431e:	5cd3      	ldrb	r3, [r2, r3]
 8004320:	40d9      	lsrs	r1, r3
 8004322:	000b      	movs	r3, r1
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	40021000 	.word	0x40021000
 8004330:	08006978 	.word	0x08006978

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004338:	f7ff ffdc 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 800433c:	0001      	movs	r1, r0
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	0adb      	lsrs	r3, r3, #11
 8004344:	2207      	movs	r2, #7
 8004346:	4013      	ands	r3, r2
 8004348:	4a04      	ldr	r2, [pc, #16]	; (800435c <HAL_RCC_GetPCLK2Freq+0x28>)
 800434a:	5cd3      	ldrb	r3, [r2, r3]
 800434c:	40d9      	lsrs	r1, r3
 800434e:	000b      	movs	r3, r1
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	40021000 	.word	0x40021000
 800435c:	08006978 	.word	0x08006978

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2220      	movs	r2, #32
 800436e:	4013      	ands	r3, r2
 8004370:	d106      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	4013      	ands	r3, r2
 800437c:	d100      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800437e:	e0dd      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004380:	2317      	movs	r3, #23
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004388:	4b9c      	ldr	r3, [pc, #624]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800438a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438c:	2380      	movs	r3, #128	; 0x80
 800438e:	055b      	lsls	r3, r3, #21
 8004390:	4013      	ands	r3, r2
 8004392:	d10a      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004394:	4b99      	ldr	r3, [pc, #612]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004398:	4b98      	ldr	r3, [pc, #608]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800439a:	2180      	movs	r1, #128	; 0x80
 800439c:	0549      	lsls	r1, r1, #21
 800439e:	430a      	orrs	r2, r1
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80043a2:	2317      	movs	r3, #23
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043aa:	4b95      	ldr	r3, [pc, #596]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4013      	ands	r3, r2
 80043b4:	d11a      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043b6:	4b92      	ldr	r3, [pc, #584]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b91      	ldr	r3, [pc, #580]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80043bc:	2180      	movs	r1, #128	; 0x80
 80043be:	0049      	lsls	r1, r1, #1
 80043c0:	430a      	orrs	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c4:	f7fd fd48 	bl	8001e58 <HAL_GetTick>
 80043c8:	0003      	movs	r3, r0
 80043ca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	e008      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fd fd43 	bl	8001e58 <HAL_GetTick>
 80043d2:	0002      	movs	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b64      	cmp	r3, #100	; 0x64
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e108      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	4b87      	ldr	r3, [pc, #540]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	4013      	ands	r3, r2
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80043ec:	4b83      	ldr	r3, [pc, #524]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	23c0      	movs	r3, #192	; 0xc0
 80043f2:	039b      	lsls	r3, r3, #14
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	23c0      	movs	r3, #192	; 0xc0
 80043fe:	039b      	lsls	r3, r3, #14
 8004400:	4013      	ands	r3, r2
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	429a      	cmp	r2, r3
 8004406:	d107      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	23c0      	movs	r3, #192	; 0xc0
 800440e:	039b      	lsls	r3, r3, #14
 8004410:	4013      	ands	r3, r2
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	429a      	cmp	r2, r3
 8004416:	d013      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	23c0      	movs	r3, #192	; 0xc0
 800441e:	029b      	lsls	r3, r3, #10
 8004420:	401a      	ands	r2, r3
 8004422:	23c0      	movs	r3, #192	; 0xc0
 8004424:	029b      	lsls	r3, r3, #10
 8004426:	429a      	cmp	r2, r3
 8004428:	d10a      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800442a:	4b74      	ldr	r3, [pc, #464]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	029b      	lsls	r3, r3, #10
 8004432:	401a      	ands	r2, r3
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	029b      	lsls	r3, r3, #10
 8004438:	429a      	cmp	r2, r3
 800443a:	d101      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0d8      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004440:	4b6e      	ldr	r3, [pc, #440]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004444:	23c0      	movs	r3, #192	; 0xc0
 8004446:	029b      	lsls	r3, r3, #10
 8004448:	4013      	ands	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d049      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	23c0      	movs	r3, #192	; 0xc0
 8004458:	029b      	lsls	r3, r3, #10
 800445a:	4013      	ands	r3, r2
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	429a      	cmp	r2, r3
 8004460:	d004      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2220      	movs	r2, #32
 8004468:	4013      	ands	r3, r2
 800446a:	d10d      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	23c0      	movs	r3, #192	; 0xc0
 8004472:	029b      	lsls	r3, r3, #10
 8004474:	4013      	ands	r3, r2
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d034      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	4013      	ands	r3, r2
 8004486:	d02e      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004488:	4b5c      	ldr	r3, [pc, #368]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	4a5d      	ldr	r2, [pc, #372]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800448e:	4013      	ands	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004492:	4b5a      	ldr	r3, [pc, #360]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004496:	4b59      	ldr	r3, [pc, #356]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	0309      	lsls	r1, r1, #12
 800449c:	430a      	orrs	r2, r1
 800449e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044a0:	4b56      	ldr	r3, [pc, #344]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80044a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044a4:	4b55      	ldr	r3, [pc, #340]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80044a6:	4958      	ldr	r1, [pc, #352]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80044a8:	400a      	ands	r2, r1
 80044aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80044ac:	4b53      	ldr	r3, [pc, #332]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4013      	ands	r3, r2
 80044ba:	d014      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fd fccc 	bl	8001e58 <HAL_GetTick>
 80044c0:	0003      	movs	r3, r0
 80044c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044c4:	e009      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fd fcc7 	bl	8001e58 <HAL_GetTick>
 80044ca:	0002      	movs	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	4a4e      	ldr	r2, [pc, #312]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e08b      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044da:	4b48      	ldr	r3, [pc, #288]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80044dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4013      	ands	r3, r2
 80044e4:	d0ef      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	23c0      	movs	r3, #192	; 0xc0
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	401a      	ands	r2, r3
 80044f0:	23c0      	movs	r3, #192	; 0xc0
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d10c      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80044f8:	4b40      	ldr	r3, [pc, #256]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a44      	ldr	r2, [pc, #272]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80044fe:	4013      	ands	r3, r2
 8004500:	0019      	movs	r1, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	23c0      	movs	r3, #192	; 0xc0
 8004508:	039b      	lsls	r3, r3, #14
 800450a:	401a      	ands	r2, r3
 800450c:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800450e:	430a      	orrs	r2, r1
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	4b3a      	ldr	r3, [pc, #232]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004514:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	23c0      	movs	r3, #192	; 0xc0
 800451c:	029b      	lsls	r3, r3, #10
 800451e:	401a      	ands	r2, r3
 8004520:	4b36      	ldr	r3, [pc, #216]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004522:	430a      	orrs	r2, r1
 8004524:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004526:	2317      	movs	r3, #23
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d105      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004530:	4b32      	ldr	r3, [pc, #200]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004534:	4b31      	ldr	r3, [pc, #196]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004536:	4937      	ldr	r1, [pc, #220]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004538:	400a      	ands	r2, r1
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2201      	movs	r2, #1
 8004542:	4013      	ands	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004546:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454a:	2203      	movs	r2, #3
 800454c:	4393      	bics	r3, r2
 800454e:	0019      	movs	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	4b29      	ldr	r3, [pc, #164]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004556:	430a      	orrs	r2, r1
 8004558:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2202      	movs	r2, #2
 8004560:	4013      	ands	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004564:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004568:	220c      	movs	r2, #12
 800456a:	4393      	bics	r3, r2
 800456c:	0019      	movs	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004574:	430a      	orrs	r2, r1
 8004576:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2204      	movs	r2, #4
 800457e:	4013      	ands	r3, r2
 8004580:	d009      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004582:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	4a24      	ldr	r2, [pc, #144]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004588:	4013      	ands	r3, r2
 800458a:	0019      	movs	r1, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004592:	430a      	orrs	r2, r1
 8004594:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2208      	movs	r2, #8
 800459c:	4013      	ands	r3, r2
 800459e:	d009      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045a0:	4b16      	ldr	r3, [pc, #88]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a4:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	0019      	movs	r1, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	4b13      	ldr	r3, [pc, #76]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045b0:	430a      	orrs	r2, r1
 80045b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2240      	movs	r2, #64	; 0x40
 80045ba:	4013      	ands	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c2:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	0019      	movs	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045ce:	430a      	orrs	r2, r1
 80045d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	4013      	ands	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80045dc:	4b07      	ldr	r3, [pc, #28]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e0:	4a10      	ldr	r2, [pc, #64]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045ec:	430a      	orrs	r2, r1
 80045ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b006      	add	sp, #24
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	40021000 	.word	0x40021000
 8004600:	40007000 	.word	0x40007000
 8004604:	fffcffff 	.word	0xfffcffff
 8004608:	fff7ffff 	.word	0xfff7ffff
 800460c:	00001388 	.word	0x00001388
 8004610:	ffcfffff 	.word	0xffcfffff
 8004614:	efffffff 	.word	0xefffffff
 8004618:	fffff3ff 	.word	0xfffff3ff
 800461c:	ffffcfff 	.word	0xffffcfff
 8004620:	fbffffff 	.word	0xfbffffff
 8004624:	fff3ffff 	.word	0xfff3ffff

08004628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e059      	b.n	80046ee <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2251      	movs	r2, #81	; 0x51
 8004644:	5c9b      	ldrb	r3, [r3, r2]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d107      	bne.n	800465c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2250      	movs	r2, #80	; 0x50
 8004650:	2100      	movs	r1, #0
 8004652:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	0018      	movs	r0, r3
 8004658:	f7fc fb72 	bl	8000d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2251      	movs	r2, #81	; 0x51
 8004660:	2102      	movs	r1, #2
 8004662:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2140      	movs	r1, #64	; 0x40
 8004670:	438a      	bics	r2, r1
 8004672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6999      	ldr	r1, [r3, #24]
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	400b      	ands	r3, r1
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	0011      	movs	r1, r2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	2204      	movs	r2, #4
 80046be:	4013      	ands	r3, r2
 80046c0:	0019      	movs	r1, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4907      	ldr	r1, [pc, #28]	; (80046f8 <HAL_SPI_Init+0xd0>)
 80046da:	400a      	ands	r2, r1
 80046dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2251      	movs	r2, #81	; 0x51
 80046e8:	2101      	movs	r1, #1
 80046ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	0018      	movs	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b002      	add	sp, #8
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	fffff7ff 	.word	0xfffff7ff

080046fc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e01b      	b.n	8004746 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2251      	movs	r2, #81	; 0x51
 8004712:	2102      	movs	r1, #2
 8004714:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2140      	movs	r1, #64	; 0x40
 8004722:	438a      	bics	r2, r1
 8004724:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f7fc fba5 	bl	8000e78 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2251      	movs	r2, #81	; 0x51
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2250      	movs	r2, #80	; 0x50
 8004740:	2100      	movs	r1, #0
 8004742:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b002      	add	sp, #8
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b088      	sub	sp, #32
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	603b      	str	r3, [r7, #0]
 800475a:	1dbb      	adds	r3, r7, #6
 800475c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800475e:	231f      	movs	r3, #31
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2250      	movs	r2, #80	; 0x50
 800476a:	5c9b      	ldrb	r3, [r3, r2]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_SPI_Transmit+0x26>
 8004770:	2302      	movs	r3, #2
 8004772:	e136      	b.n	80049e2 <HAL_SPI_Transmit+0x294>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2250      	movs	r2, #80	; 0x50
 8004778:	2101      	movs	r1, #1
 800477a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800477c:	f7fd fb6c 	bl	8001e58 <HAL_GetTick>
 8004780:	0003      	movs	r3, r0
 8004782:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004784:	2316      	movs	r3, #22
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	1dba      	adds	r2, r7, #6
 800478a:	8812      	ldrh	r2, [r2, #0]
 800478c:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2251      	movs	r2, #81	; 0x51
 8004792:	5c9b      	ldrb	r3, [r3, r2]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	d004      	beq.n	80047a4 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800479a:	231f      	movs	r3, #31
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	2202      	movs	r2, #2
 80047a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80047a2:	e113      	b.n	80049cc <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_SPI_Transmit+0x64>
 80047aa:	1dbb      	adds	r3, r7, #6
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80047b2:	231f      	movs	r3, #31
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
    goto error;
 80047ba:	e107      	b.n	80049cc <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2251      	movs	r2, #81	; 0x51
 80047c0:	2103      	movs	r1, #3
 80047c2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1dba      	adds	r2, r7, #6
 80047d4:	8812      	ldrh	r2, [r2, #0]
 80047d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	1dba      	adds	r2, r7, #6
 80047dc:	8812      	ldrh	r2, [r2, #0]
 80047de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	429a      	cmp	r2, r3
 8004808:	d108      	bne.n	800481c <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2180      	movs	r1, #128	; 0x80
 8004816:	01c9      	lsls	r1, r1, #7
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2240      	movs	r2, #64	; 0x40
 8004824:	4013      	ands	r3, r2
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d007      	beq.n	800483a <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2140      	movs	r1, #64	; 0x40
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	429a      	cmp	r2, r3
 8004844:	d14e      	bne.n	80048e4 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d004      	beq.n	8004858 <HAL_SPI_Transmit+0x10a>
 800484e:	2316      	movs	r3, #22
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d13f      	bne.n	80048d8 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	881a      	ldrh	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	1c9a      	adds	r2, r3, #2
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800487c:	e02c      	b.n	80048d8 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2202      	movs	r2, #2
 8004886:	4013      	ands	r3, r2
 8004888:	2b02      	cmp	r3, #2
 800488a:	d112      	bne.n	80048b2 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	881a      	ldrh	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	1c9a      	adds	r2, r3, #2
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80048b0:	e012      	b.n	80048d8 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b2:	f7fd fad1 	bl	8001e58 <HAL_GetTick>
 80048b6:	0002      	movs	r2, r0
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d802      	bhi.n	80048c8 <HAL_SPI_Transmit+0x17a>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	d102      	bne.n	80048ce <HAL_SPI_Transmit+0x180>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 80048ce:	231f      	movs	r3, #31
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	2203      	movs	r2, #3
 80048d4:	701a      	strb	r2, [r3, #0]
          goto error;
 80048d6:	e079      	b.n	80049cc <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1cd      	bne.n	800487e <HAL_SPI_Transmit+0x130>
 80048e2:	e04f      	b.n	8004984 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <HAL_SPI_Transmit+0x1a8>
 80048ec:	2316      	movs	r3, #22
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d141      	bne.n	800497a <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800491c:	e02d      	b.n	800497a <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2202      	movs	r2, #2
 8004926:	4013      	ands	r3, r2
 8004928:	2b02      	cmp	r3, #2
 800492a:	d113      	bne.n	8004954 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	7812      	ldrb	r2, [r2, #0]
 8004938:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	86da      	strh	r2, [r3, #54]	; 0x36
 8004952:	e012      	b.n	800497a <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004954:	f7fd fa80 	bl	8001e58 <HAL_GetTick>
 8004958:	0002      	movs	r2, r0
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d802      	bhi.n	800496a <HAL_SPI_Transmit+0x21c>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	3301      	adds	r3, #1
 8004968:	d102      	bne.n	8004970 <HAL_SPI_Transmit+0x222>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8004970:	231f      	movs	r3, #31
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	2203      	movs	r2, #3
 8004976:	701a      	strb	r2, [r3, #0]
          goto error;
 8004978:	e028      	b.n	80049cc <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1cc      	bne.n	800491e <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	0018      	movs	r0, r3
 800498c:	f000 f8aa 	bl	8004ae4 <SPI_EndRxTxTransaction>
 8004990:	1e03      	subs	r3, r0, #0
 8004992:	d002      	beq.n	800499a <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80049c0:	231f      	movs	r3, #31
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e000      	b.n	80049cc <HAL_SPI_Transmit+0x27e>
  }

error:
 80049ca:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2251      	movs	r2, #81	; 0x51
 80049d0:	2101      	movs	r1, #1
 80049d2:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2250      	movs	r2, #80	; 0x50
 80049d8:	2100      	movs	r1, #0
 80049da:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80049dc:	231f      	movs	r3, #31
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	781b      	ldrb	r3, [r3, #0]
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b008      	add	sp, #32
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2251      	movs	r2, #81	; 0x51
 80049f6:	5c9b      	ldrb	r3, [r3, r2]
 80049f8:	b2db      	uxtb	r3, r3
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b002      	add	sp, #8
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	1dfb      	adds	r3, r7, #7
 8004a12:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a14:	e050      	b.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	d04d      	beq.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a1c:	f7fd fa1c 	bl	8001e58 <HAL_GetTick>
 8004a20:	0002      	movs	r2, r0
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d902      	bls.n	8004a32 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d142      	bne.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	21e0      	movs	r1, #224	; 0xe0
 8004a3e:	438a      	bics	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	2382      	movs	r3, #130	; 0x82
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d113      	bne.n	8004a76 <SPI_WaitFlagStateUntilTimeout+0x72>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d005      	beq.n	8004a66 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d107      	bne.n	8004a76 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2140      	movs	r1, #64	; 0x40
 8004a72:	438a      	bics	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a7a:	2380      	movs	r3, #128	; 0x80
 8004a7c:	019b      	lsls	r3, r3, #6
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d110      	bne.n	8004aa4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4914      	ldr	r1, [pc, #80]	; (8004ae0 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2180      	movs	r1, #128	; 0x80
 8004a9e:	0189      	lsls	r1, r1, #6
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2251      	movs	r2, #81	; 0x51
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2250      	movs	r2, #80	; 0x50
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e00f      	b.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	425a      	negs	r2, r3
 8004ac8:	4153      	adcs	r3, r2
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	001a      	movs	r2, r3
 8004ace:	1dfb      	adds	r3, r7, #7
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d19f      	bne.n	8004a16 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b004      	add	sp, #16
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	ffffdfff 	.word	0xffffdfff

08004ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	2382      	movs	r3, #130	; 0x82
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d112      	bne.n	8004b22 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	0013      	movs	r3, r2
 8004b06:	2200      	movs	r2, #0
 8004b08:	2180      	movs	r1, #128	; 0x80
 8004b0a:	f7ff ff7b 	bl	8004a04 <SPI_WaitFlagStateUntilTimeout>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d020      	beq.n	8004b54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	2220      	movs	r2, #32
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e019      	b.n	8004b56 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2251      	movs	r2, #81	; 0x51
 8004b26:	5c9b      	ldrb	r3, [r3, r2]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	d112      	bne.n	8004b54 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	0013      	movs	r3, r2
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	f7ff ff62 	bl	8004a04 <SPI_WaitFlagStateUntilTimeout>
 8004b40:	1e03      	subs	r3, r0, #0
 8004b42:	d007      	beq.n	8004b54 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	2220      	movs	r2, #32
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e000      	b.n	8004b56 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b004      	add	sp, #16
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e01e      	b.n	8004bae <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2239      	movs	r2, #57	; 0x39
 8004b74:	5c9b      	ldrb	r3, [r3, r2]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d107      	bne.n	8004b8c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2238      	movs	r2, #56	; 0x38
 8004b80:	2100      	movs	r1, #0
 8004b82:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	0018      	movs	r0, r3
 8004b88:	f7fc facc 	bl	8001124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2239      	movs	r2, #57	; 0x39
 8004b90:	2102      	movs	r1, #2
 8004b92:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	0010      	movs	r0, r2
 8004ba0:	f000 f82c 	bl	8004bfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2239      	movs	r2, #57	; 0x39
 8004ba8:	2101      	movs	r1, #1
 8004baa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	0018      	movs	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b002      	add	sp, #8
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2101      	movs	r1, #1
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b06      	cmp	r3, #6
 8004bde:	d007      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2101      	movs	r1, #1
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b004      	add	sp, #16
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	05db      	lsls	r3, r3, #23
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d007      	beq.n	8004c26 <TIM_Base_SetConfig+0x2a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1f      	ldr	r2, [pc, #124]	; (8004c98 <TIM_Base_SetConfig+0x9c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_Base_SetConfig+0x2a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <TIM_Base_SetConfig+0xa0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d108      	bne.n	8004c38 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2270      	movs	r2, #112	; 0x70
 8004c2a:	4393      	bics	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	05db      	lsls	r3, r3, #23
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d007      	beq.n	8004c52 <TIM_Base_SetConfig+0x56>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <TIM_Base_SetConfig+0x9c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d003      	beq.n	8004c52 <TIM_Base_SetConfig+0x56>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <TIM_Base_SetConfig+0xa0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d108      	bne.n	8004c64 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <TIM_Base_SetConfig+0xa4>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2280      	movs	r2, #128	; 0x80
 8004c68:	4393      	bics	r3, r2
 8004c6a:	001a      	movs	r2, r3
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	615a      	str	r2, [r3, #20]
}
 8004c90:	46c0      	nop			; (mov r8, r8)
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b004      	add	sp, #16
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40010800 	.word	0x40010800
 8004c9c:	40011400 	.word	0x40011400
 8004ca0:	fffffcff 	.word	0xfffffcff

08004ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2238      	movs	r2, #56	; 0x38
 8004cb2:	5c9b      	ldrb	r3, [r3, r2]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e032      	b.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2238      	movs	r2, #56	; 0x38
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2239      	movs	r2, #57	; 0x39
 8004cc8:	2102      	movs	r1, #2
 8004cca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2270      	movs	r2, #112	; 0x70
 8004ce0:	4393      	bics	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2280      	movs	r2, #128	; 0x80
 8004cf2:	4393      	bics	r3, r2
 8004cf4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2239      	movs	r2, #57	; 0x39
 8004d14:	2101      	movs	r1, #1
 8004d16:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2238      	movs	r2, #56	; 0x38
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	0018      	movs	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b004      	add	sp, #16
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8004d2a:	b590      	push	{r4, r7, lr}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e075      	b.n	8004e28 <HAL_TSC_Init+0xfe>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	223c      	movs	r2, #60	; 0x3c
 8004d40:	5c9b      	ldrb	r3, [r3, r2]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d107      	bne.n	8004d58 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	223d      	movs	r2, #61	; 0x3d
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	0018      	movs	r0, r3
 8004d54:	f7fc fa42 	bl	80011dc <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	223c      	movs	r2, #60	; 0x3c
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6819      	ldr	r1, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004d76:	431a      	orrs	r2, r3
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8004d7e:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8004d84:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8004d8a:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8004d90:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8004d96:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8004d9c:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if ((FunctionalState)htsc->Init.SpreadSpectrum == ENABLE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d108      	bne.n	8004dc2 <HAL_TSC_Init+0x98>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2180      	movs	r1, #128	; 0x80
 8004dbc:	0249      	lsls	r1, r1, #9
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (uint32_t)(~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	43d2      	mvns	r2, r2
 8004dd8:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004df2:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681c      	ldr	r4, [r3, #0]
 8004dfc:	0010      	movs	r0, r2
 8004dfe:	f000 f817 	bl	8004e30 <TSC_extract_groups>
 8004e02:	0003      	movs	r3, r0
 8004e04:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (uint32_t)(~(TSC_IT_EOA | TSC_IT_MCE));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2103      	movs	r1, #3
 8004e12:	438a      	bics	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	223c      	movs	r2, #60	; 0x3c
 8004e22:	2101      	movs	r1, #1
 8004e24:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b003      	add	sp, #12
 8004e2e:	bd90      	pop	{r4, r7, pc}

08004e30 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	e011      	b.n	8004e66 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	220f      	movs	r2, #15
 8004e48:	409a      	lsls	r2, r3
 8004e4a:	0013      	movs	r3, r2
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d006      	beq.n	8004e60 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8004e52:	2201      	movs	r2, #1
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	409a      	lsls	r2, r3
 8004e58:	0013      	movs	r3, r2
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b07      	cmp	r3, #7
 8004e6a:	d9ea      	bls.n	8004e42 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b004      	add	sp, #16
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e044      	b.n	8004f14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d107      	bne.n	8004ea2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2270      	movs	r2, #112	; 0x70
 8004e96:	2100      	movs	r1, #0
 8004e98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f7fc fa69 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2224      	movs	r2, #36	; 0x24
 8004ea6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	438a      	bics	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f000 f830 	bl	8004f20 <UART_SetConfig>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e024      	b.n	8004f14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f000 fb3b 	bl	8005550 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	490d      	ldr	r1, [pc, #52]	; (8004f1c <HAL_UART_Init+0xa4>)
 8004ee6:	400a      	ands	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	212a      	movs	r1, #42	; 0x2a
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2101      	movs	r1, #1
 8004f06:	430a      	orrs	r2, r1
 8004f08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 fbd3 	bl	80056b8 <UART_CheckIdleState>
 8004f12:	0003      	movs	r3, r0
}
 8004f14:	0018      	movs	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b002      	add	sp, #8
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	ffffb7ff 	.word	0xffffb7ff

08004f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f20:	b5b0      	push	{r4, r5, r7, lr}
 8004f22:	b08e      	sub	sp, #56	; 0x38
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004f28:	231b      	movs	r3, #27
 8004f2a:	2218      	movs	r2, #24
 8004f2c:	4694      	mov	ip, r2
 8004f2e:	44bc      	add	ip, r7
 8004f30:	4463      	add	r3, ip
 8004f32:	2210      	movs	r2, #16
 8004f34:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f3a:	2313      	movs	r3, #19
 8004f3c:	2218      	movs	r2, #24
 8004f3e:	4694      	mov	ip, r2
 8004f40:	44bc      	add	ip, r7
 8004f42:	4463      	add	r3, ip
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4ac8      	ldr	r2, [pc, #800]	; (800528c <UART_SetConfig+0x36c>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	0019      	movs	r1, r3
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f76:	430a      	orrs	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4ac3      	ldr	r2, [pc, #780]	; (8005290 <UART_SetConfig+0x370>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	0019      	movs	r1, r3
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4abd      	ldr	r2, [pc, #756]	; (8005294 <UART_SetConfig+0x374>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	4ab9      	ldr	r2, [pc, #740]	; (8005298 <UART_SetConfig+0x378>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4ab5      	ldr	r2, [pc, #724]	; (800529c <UART_SetConfig+0x37c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d134      	bne.n	8005036 <UART_SetConfig+0x116>
 8004fcc:	4bb4      	ldr	r3, [pc, #720]	; (80052a0 <UART_SetConfig+0x380>)
 8004fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d015      	beq.n	8005004 <UART_SetConfig+0xe4>
 8004fd8:	d304      	bcc.n	8004fe4 <UART_SetConfig+0xc4>
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d00a      	beq.n	8004ff4 <UART_SetConfig+0xd4>
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d018      	beq.n	8005014 <UART_SetConfig+0xf4>
 8004fe2:	e01f      	b.n	8005024 <UART_SetConfig+0x104>
 8004fe4:	231b      	movs	r3, #27
 8004fe6:	2218      	movs	r2, #24
 8004fe8:	4694      	mov	ip, r2
 8004fea:	44bc      	add	ip, r7
 8004fec:	4463      	add	r3, ip
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e0ab      	b.n	800514c <UART_SetConfig+0x22c>
 8004ff4:	231b      	movs	r3, #27
 8004ff6:	2218      	movs	r2, #24
 8004ff8:	4694      	mov	ip, r2
 8004ffa:	44bc      	add	ip, r7
 8004ffc:	4463      	add	r3, ip
 8004ffe:	2202      	movs	r2, #2
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	e0a3      	b.n	800514c <UART_SetConfig+0x22c>
 8005004:	231b      	movs	r3, #27
 8005006:	2218      	movs	r2, #24
 8005008:	4694      	mov	ip, r2
 800500a:	44bc      	add	ip, r7
 800500c:	4463      	add	r3, ip
 800500e:	2204      	movs	r2, #4
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e09b      	b.n	800514c <UART_SetConfig+0x22c>
 8005014:	231b      	movs	r3, #27
 8005016:	2218      	movs	r2, #24
 8005018:	4694      	mov	ip, r2
 800501a:	44bc      	add	ip, r7
 800501c:	4463      	add	r3, ip
 800501e:	2208      	movs	r2, #8
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	e093      	b.n	800514c <UART_SetConfig+0x22c>
 8005024:	231b      	movs	r3, #27
 8005026:	2218      	movs	r2, #24
 8005028:	4694      	mov	ip, r2
 800502a:	44bc      	add	ip, r7
 800502c:	4463      	add	r3, ip
 800502e:	2210      	movs	r2, #16
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	e08a      	b.n	800514c <UART_SetConfig+0x22c>
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a9a      	ldr	r2, [pc, #616]	; (80052a4 <UART_SetConfig+0x384>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d137      	bne.n	80050b0 <UART_SetConfig+0x190>
 8005040:	4b97      	ldr	r3, [pc, #604]	; (80052a0 <UART_SetConfig+0x380>)
 8005042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005044:	220c      	movs	r2, #12
 8005046:	4013      	ands	r3, r2
 8005048:	2b04      	cmp	r3, #4
 800504a:	d018      	beq.n	800507e <UART_SetConfig+0x15e>
 800504c:	d802      	bhi.n	8005054 <UART_SetConfig+0x134>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <UART_SetConfig+0x13e>
 8005052:	e024      	b.n	800509e <UART_SetConfig+0x17e>
 8005054:	2b08      	cmp	r3, #8
 8005056:	d00a      	beq.n	800506e <UART_SetConfig+0x14e>
 8005058:	2b0c      	cmp	r3, #12
 800505a:	d018      	beq.n	800508e <UART_SetConfig+0x16e>
 800505c:	e01f      	b.n	800509e <UART_SetConfig+0x17e>
 800505e:	231b      	movs	r3, #27
 8005060:	2218      	movs	r2, #24
 8005062:	4694      	mov	ip, r2
 8005064:	44bc      	add	ip, r7
 8005066:	4463      	add	r3, ip
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	e06e      	b.n	800514c <UART_SetConfig+0x22c>
 800506e:	231b      	movs	r3, #27
 8005070:	2218      	movs	r2, #24
 8005072:	4694      	mov	ip, r2
 8005074:	44bc      	add	ip, r7
 8005076:	4463      	add	r3, ip
 8005078:	2202      	movs	r2, #2
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	e066      	b.n	800514c <UART_SetConfig+0x22c>
 800507e:	231b      	movs	r3, #27
 8005080:	2218      	movs	r2, #24
 8005082:	4694      	mov	ip, r2
 8005084:	44bc      	add	ip, r7
 8005086:	4463      	add	r3, ip
 8005088:	2204      	movs	r2, #4
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e05e      	b.n	800514c <UART_SetConfig+0x22c>
 800508e:	231b      	movs	r3, #27
 8005090:	2218      	movs	r2, #24
 8005092:	4694      	mov	ip, r2
 8005094:	44bc      	add	ip, r7
 8005096:	4463      	add	r3, ip
 8005098:	2208      	movs	r2, #8
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	e056      	b.n	800514c <UART_SetConfig+0x22c>
 800509e:	231b      	movs	r3, #27
 80050a0:	2218      	movs	r2, #24
 80050a2:	4694      	mov	ip, r2
 80050a4:	44bc      	add	ip, r7
 80050a6:	4463      	add	r3, ip
 80050a8:	2210      	movs	r2, #16
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	46c0      	nop			; (mov r8, r8)
 80050ae:	e04d      	b.n	800514c <UART_SetConfig+0x22c>
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a77      	ldr	r2, [pc, #476]	; (8005294 <UART_SetConfig+0x374>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d141      	bne.n	800513e <UART_SetConfig+0x21e>
 80050ba:	4b79      	ldr	r3, [pc, #484]	; (80052a0 <UART_SetConfig+0x380>)
 80050bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050be:	23c0      	movs	r3, #192	; 0xc0
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	4013      	ands	r3, r2
 80050c4:	2280      	movs	r2, #128	; 0x80
 80050c6:	00d2      	lsls	r2, r2, #3
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d01f      	beq.n	800510c <UART_SetConfig+0x1ec>
 80050cc:	2280      	movs	r2, #128	; 0x80
 80050ce:	00d2      	lsls	r2, r2, #3
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d802      	bhi.n	80050da <UART_SetConfig+0x1ba>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <UART_SetConfig+0x1cc>
 80050d8:	e028      	b.n	800512c <UART_SetConfig+0x20c>
 80050da:	2280      	movs	r2, #128	; 0x80
 80050dc:	0112      	lsls	r2, r2, #4
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00c      	beq.n	80050fc <UART_SetConfig+0x1dc>
 80050e2:	22c0      	movs	r2, #192	; 0xc0
 80050e4:	0112      	lsls	r2, r2, #4
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d018      	beq.n	800511c <UART_SetConfig+0x1fc>
 80050ea:	e01f      	b.n	800512c <UART_SetConfig+0x20c>
 80050ec:	231b      	movs	r3, #27
 80050ee:	2218      	movs	r2, #24
 80050f0:	4694      	mov	ip, r2
 80050f2:	44bc      	add	ip, r7
 80050f4:	4463      	add	r3, ip
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	e027      	b.n	800514c <UART_SetConfig+0x22c>
 80050fc:	231b      	movs	r3, #27
 80050fe:	2218      	movs	r2, #24
 8005100:	4694      	mov	ip, r2
 8005102:	44bc      	add	ip, r7
 8005104:	4463      	add	r3, ip
 8005106:	2202      	movs	r2, #2
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e01f      	b.n	800514c <UART_SetConfig+0x22c>
 800510c:	231b      	movs	r3, #27
 800510e:	2218      	movs	r2, #24
 8005110:	4694      	mov	ip, r2
 8005112:	44bc      	add	ip, r7
 8005114:	4463      	add	r3, ip
 8005116:	2204      	movs	r2, #4
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	e017      	b.n	800514c <UART_SetConfig+0x22c>
 800511c:	231b      	movs	r3, #27
 800511e:	2218      	movs	r2, #24
 8005120:	4694      	mov	ip, r2
 8005122:	44bc      	add	ip, r7
 8005124:	4463      	add	r3, ip
 8005126:	2208      	movs	r2, #8
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e00f      	b.n	800514c <UART_SetConfig+0x22c>
 800512c:	231b      	movs	r3, #27
 800512e:	2218      	movs	r2, #24
 8005130:	4694      	mov	ip, r2
 8005132:	44bc      	add	ip, r7
 8005134:	4463      	add	r3, ip
 8005136:	2210      	movs	r2, #16
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	e006      	b.n	800514c <UART_SetConfig+0x22c>
 800513e:	231b      	movs	r3, #27
 8005140:	2218      	movs	r2, #24
 8005142:	4694      	mov	ip, r2
 8005144:	44bc      	add	ip, r7
 8005146:	4463      	add	r3, ip
 8005148:	2210      	movs	r2, #16
 800514a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a50      	ldr	r2, [pc, #320]	; (8005294 <UART_SetConfig+0x374>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d000      	beq.n	8005158 <UART_SetConfig+0x238>
 8005156:	e083      	b.n	8005260 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005158:	231b      	movs	r3, #27
 800515a:	2218      	movs	r2, #24
 800515c:	4694      	mov	ip, r2
 800515e:	44bc      	add	ip, r7
 8005160:	4463      	add	r3, ip
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d00d      	beq.n	8005184 <UART_SetConfig+0x264>
 8005168:	dc02      	bgt.n	8005170 <UART_SetConfig+0x250>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <UART_SetConfig+0x25a>
 800516e:	e01d      	b.n	80051ac <UART_SetConfig+0x28c>
 8005170:	2b04      	cmp	r3, #4
 8005172:	d012      	beq.n	800519a <UART_SetConfig+0x27a>
 8005174:	2b08      	cmp	r3, #8
 8005176:	d015      	beq.n	80051a4 <UART_SetConfig+0x284>
 8005178:	e018      	b.n	80051ac <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800517a:	f7ff f8c5 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 800517e:	0003      	movs	r3, r0
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005182:	e01b      	b.n	80051bc <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005184:	4b46      	ldr	r3, [pc, #280]	; (80052a0 <UART_SetConfig+0x380>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2210      	movs	r2, #16
 800518a:	4013      	ands	r3, r2
 800518c:	d002      	beq.n	8005194 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800518e:	4b46      	ldr	r3, [pc, #280]	; (80052a8 <UART_SetConfig+0x388>)
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8005192:	e013      	b.n	80051bc <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005194:	4b45      	ldr	r3, [pc, #276]	; (80052ac <UART_SetConfig+0x38c>)
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005198:	e010      	b.n	80051bc <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800519a:	f7ff f827 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 800519e:	0003      	movs	r3, r0
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051a2:	e00b      	b.n	80051bc <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051aa:	e007      	b.n	80051bc <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80051ac:	2313      	movs	r3, #19
 80051ae:	2218      	movs	r2, #24
 80051b0:	4694      	mov	ip, r2
 80051b2:	44bc      	add	ip, r7
 80051b4:	4463      	add	r3, ip
 80051b6:	2201      	movs	r2, #1
 80051b8:	701a      	strb	r2, [r3, #0]
        break;
 80051ba:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d100      	bne.n	80051c4 <UART_SetConfig+0x2a4>
 80051c2:	e1a6      	b.n	8005512 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	0013      	movs	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	189b      	adds	r3, r3, r2
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d305      	bcc.n	80051e0 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	429a      	cmp	r2, r3
 80051de:	d907      	bls.n	80051f0 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 80051e0:	2313      	movs	r3, #19
 80051e2:	2218      	movs	r2, #24
 80051e4:	4694      	mov	ip, r2
 80051e6:	44bc      	add	ip, r7
 80051e8:	4463      	add	r3, ip
 80051ea:	2201      	movs	r2, #1
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e190      	b.n	8005512 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	6939      	ldr	r1, [r7, #16]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	000b      	movs	r3, r1
 80051fe:	0e1b      	lsrs	r3, r3, #24
 8005200:	0010      	movs	r0, r2
 8005202:	0205      	lsls	r5, r0, #8
 8005204:	431d      	orrs	r5, r3
 8005206:	000b      	movs	r3, r1
 8005208:	021c      	lsls	r4, r3, #8
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	68b8      	ldr	r0, [r7, #8]
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	1900      	adds	r0, r0, r4
 800521c:	4169      	adcs	r1, r5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f7fb f8e2 	bl	80003f4 <__aeabi_uldivmod>
 8005230:	0003      	movs	r3, r0
 8005232:	000c      	movs	r4, r1
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <UART_SetConfig+0x390>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d908      	bls.n	8005250 <UART_SetConfig+0x330>
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <UART_SetConfig+0x394>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d804      	bhi.n	8005250 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524c:	60da      	str	r2, [r3, #12]
 800524e:	e160      	b.n	8005512 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8005250:	2313      	movs	r3, #19
 8005252:	2218      	movs	r2, #24
 8005254:	4694      	mov	ip, r2
 8005256:	44bc      	add	ip, r7
 8005258:	4463      	add	r3, ip
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e158      	b.n	8005512 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	2380      	movs	r3, #128	; 0x80
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	429a      	cmp	r2, r3
 800526a:	d000      	beq.n	800526e <UART_SetConfig+0x34e>
 800526c:	e0c3      	b.n	80053f6 <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 800526e:	231b      	movs	r3, #27
 8005270:	2218      	movs	r2, #24
 8005272:	4694      	mov	ip, r2
 8005274:	44bc      	add	ip, r7
 8005276:	4463      	add	r3, ip
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b08      	cmp	r3, #8
 800527c:	d900      	bls.n	8005280 <UART_SetConfig+0x360>
 800527e:	e086      	b.n	800538e <UART_SetConfig+0x46e>
 8005280:	009a      	lsls	r2, r3, #2
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <UART_SetConfig+0x398>)
 8005284:	18d3      	adds	r3, r2, r3
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	469f      	mov	pc, r3
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	efff69f3 	.word	0xefff69f3
 8005290:	ffffcfff 	.word	0xffffcfff
 8005294:	40004800 	.word	0x40004800
 8005298:	fffff4ff 	.word	0xfffff4ff
 800529c:	40013800 	.word	0x40013800
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40004400 	.word	0x40004400
 80052a8:	003d0900 	.word	0x003d0900
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	000002ff 	.word	0x000002ff
 80052b4:	000fffff 	.word	0x000fffff
 80052b8:	080069e8 	.word	0x080069e8
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80052bc:	f7ff f824 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 80052c0:	0003      	movs	r3, r0
 80052c2:	005a      	lsls	r2, r3, #1
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	085b      	lsrs	r3, r3, #1
 80052ca:	18d2      	adds	r2, r2, r3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	0019      	movs	r1, r3
 80052d2:	0010      	movs	r0, r2
 80052d4:	f7fa ff18 	bl	8000108 <__udivsi3>
 80052d8:	0003      	movs	r3, r0
 80052da:	b29b      	uxth	r3, r3
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052de:	e05e      	b.n	800539e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80052e0:	f7ff f828 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 80052e4:	0003      	movs	r3, r0
 80052e6:	005a      	lsls	r2, r3, #1
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	18d2      	adds	r2, r2, r3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	0019      	movs	r1, r3
 80052f6:	0010      	movs	r0, r2
 80052f8:	f7fa ff06 	bl	8000108 <__udivsi3>
 80052fc:	0003      	movs	r3, r0
 80052fe:	b29b      	uxth	r3, r3
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005302:	e04c      	b.n	800539e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005304:	4b8b      	ldr	r3, [pc, #556]	; (8005534 <UART_SetConfig+0x614>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2210      	movs	r2, #16
 800530a:	4013      	ands	r3, r2
 800530c:	d00e      	beq.n	800532c <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	4a88      	ldr	r2, [pc, #544]	; (8005538 <UART_SetConfig+0x618>)
 8005316:	189a      	adds	r2, r3, r2
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	0019      	movs	r1, r3
 800531e:	0010      	movs	r0, r2
 8005320:	f7fa fef2 	bl	8000108 <__udivsi3>
 8005324:	0003      	movs	r3, r0
 8005326:	b29b      	uxth	r3, r3
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800532a:	e038      	b.n	800539e <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	4a82      	ldr	r2, [pc, #520]	; (800553c <UART_SetConfig+0x61c>)
 8005334:	189a      	adds	r2, r3, r2
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	0019      	movs	r1, r3
 800533c:	0010      	movs	r0, r2
 800533e:	f7fa fee3 	bl	8000108 <__udivsi3>
 8005342:	0003      	movs	r3, r0
 8005344:	b29b      	uxth	r3, r3
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005348:	e029      	b.n	800539e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800534a:	f7fe ff4f 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 800534e:	0003      	movs	r3, r0
 8005350:	005a      	lsls	r2, r3, #1
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	18d2      	adds	r2, r2, r3
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	0019      	movs	r1, r3
 8005360:	0010      	movs	r0, r2
 8005362:	f7fa fed1 	bl	8000108 <__udivsi3>
 8005366:	0003      	movs	r3, r0
 8005368:	b29b      	uxth	r3, r3
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800536c:	e017      	b.n	800539e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	2280      	movs	r2, #128	; 0x80
 8005376:	0252      	lsls	r2, r2, #9
 8005378:	189a      	adds	r2, r3, r2
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	0019      	movs	r1, r3
 8005380:	0010      	movs	r0, r2
 8005382:	f7fa fec1 	bl	8000108 <__udivsi3>
 8005386:	0003      	movs	r3, r0
 8005388:	b29b      	uxth	r3, r3
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800538c:	e007      	b.n	800539e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800538e:	2313      	movs	r3, #19
 8005390:	2218      	movs	r2, #24
 8005392:	4694      	mov	ip, r2
 8005394:	44bc      	add	ip, r7
 8005396:	4463      	add	r3, ip
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
        break;
 800539c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d920      	bls.n	80053e6 <UART_SetConfig+0x4c6>
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	4a66      	ldr	r2, [pc, #408]	; (8005540 <UART_SetConfig+0x620>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d81c      	bhi.n	80053e6 <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	200a      	movs	r0, #10
 80053b2:	2418      	movs	r4, #24
 80053b4:	193b      	adds	r3, r7, r4
 80053b6:	181b      	adds	r3, r3, r0
 80053b8:	210f      	movs	r1, #15
 80053ba:	438a      	bics	r2, r1
 80053bc:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2207      	movs	r2, #7
 80053c6:	4013      	ands	r3, r2
 80053c8:	b299      	uxth	r1, r3
 80053ca:	193b      	adds	r3, r7, r4
 80053cc:	181b      	adds	r3, r3, r0
 80053ce:	193a      	adds	r2, r7, r4
 80053d0:	1812      	adds	r2, r2, r0
 80053d2:	8812      	ldrh	r2, [r2, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	193a      	adds	r2, r7, r4
 80053de:	1812      	adds	r2, r2, r0
 80053e0:	8812      	ldrh	r2, [r2, #0]
 80053e2:	60da      	str	r2, [r3, #12]
 80053e4:	e095      	b.n	8005512 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80053e6:	2313      	movs	r3, #19
 80053e8:	2218      	movs	r2, #24
 80053ea:	4694      	mov	ip, r2
 80053ec:	44bc      	add	ip, r7
 80053ee:	4463      	add	r3, ip
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e08d      	b.n	8005512 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 80053f6:	231b      	movs	r3, #27
 80053f8:	2218      	movs	r2, #24
 80053fa:	4694      	mov	ip, r2
 80053fc:	44bc      	add	ip, r7
 80053fe:	4463      	add	r3, ip
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b08      	cmp	r3, #8
 8005404:	d86a      	bhi.n	80054dc <UART_SetConfig+0x5bc>
 8005406:	009a      	lsls	r2, r3, #2
 8005408:	4b4e      	ldr	r3, [pc, #312]	; (8005544 <UART_SetConfig+0x624>)
 800540a:	18d3      	adds	r3, r2, r3
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005410:	f7fe ff7a 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8005414:	0002      	movs	r2, r0
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	18d2      	adds	r2, r2, r3
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	0019      	movs	r1, r3
 8005424:	0010      	movs	r0, r2
 8005426:	f7fa fe6f 	bl	8000108 <__udivsi3>
 800542a:	0003      	movs	r3, r0
 800542c:	b29b      	uxth	r3, r3
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005430:	e05c      	b.n	80054ec <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005432:	f7fe ff7f 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8005436:	0002      	movs	r2, r0
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	18d2      	adds	r2, r2, r3
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	0019      	movs	r1, r3
 8005446:	0010      	movs	r0, r2
 8005448:	f7fa fe5e 	bl	8000108 <__udivsi3>
 800544c:	0003      	movs	r3, r0
 800544e:	b29b      	uxth	r3, r3
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005452:	e04b      	b.n	80054ec <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005454:	4b37      	ldr	r3, [pc, #220]	; (8005534 <UART_SetConfig+0x614>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2210      	movs	r2, #16
 800545a:	4013      	ands	r3, r2
 800545c:	d00e      	beq.n	800547c <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	085b      	lsrs	r3, r3, #1
 8005464:	4a38      	ldr	r2, [pc, #224]	; (8005548 <UART_SetConfig+0x628>)
 8005466:	189a      	adds	r2, r3, r2
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	0019      	movs	r1, r3
 800546e:	0010      	movs	r0, r2
 8005470:	f7fa fe4a 	bl	8000108 <__udivsi3>
 8005474:	0003      	movs	r3, r0
 8005476:	b29b      	uxth	r3, r3
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800547a:	e037      	b.n	80054ec <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	4a32      	ldr	r2, [pc, #200]	; (800554c <UART_SetConfig+0x62c>)
 8005484:	189a      	adds	r2, r3, r2
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	0019      	movs	r1, r3
 800548c:	0010      	movs	r0, r2
 800548e:	f7fa fe3b 	bl	8000108 <__udivsi3>
 8005492:	0003      	movs	r3, r0
 8005494:	b29b      	uxth	r3, r3
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005498:	e028      	b.n	80054ec <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800549a:	f7fe fea7 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 800549e:	0002      	movs	r2, r0
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	18d2      	adds	r2, r2, r3
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	0019      	movs	r1, r3
 80054ae:	0010      	movs	r0, r2
 80054b0:	f7fa fe2a 	bl	8000108 <__udivsi3>
 80054b4:	0003      	movs	r3, r0
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054ba:	e017      	b.n	80054ec <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	2280      	movs	r2, #128	; 0x80
 80054c4:	0212      	lsls	r2, r2, #8
 80054c6:	189a      	adds	r2, r3, r2
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	0019      	movs	r1, r3
 80054ce:	0010      	movs	r0, r2
 80054d0:	f7fa fe1a 	bl	8000108 <__udivsi3>
 80054d4:	0003      	movs	r3, r0
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054da:	e007      	b.n	80054ec <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80054dc:	2313      	movs	r3, #19
 80054de:	2218      	movs	r2, #24
 80054e0:	4694      	mov	ip, r2
 80054e2:	44bc      	add	ip, r7
 80054e4:	4463      	add	r3, ip
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
        break;
 80054ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	2b0f      	cmp	r3, #15
 80054f0:	d908      	bls.n	8005504 <UART_SetConfig+0x5e4>
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	4a12      	ldr	r2, [pc, #72]	; (8005540 <UART_SetConfig+0x620>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d804      	bhi.n	8005504 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	e006      	b.n	8005512 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8005504:	2313      	movs	r3, #19
 8005506:	2218      	movs	r2, #24
 8005508:	4694      	mov	ip, r2
 800550a:	44bc      	add	ip, r7
 800550c:	4463      	add	r3, ip
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2200      	movs	r2, #0
 8005516:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2200      	movs	r2, #0
 800551c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800551e:	2313      	movs	r3, #19
 8005520:	2218      	movs	r2, #24
 8005522:	4694      	mov	ip, r2
 8005524:	44bc      	add	ip, r7
 8005526:	4463      	add	r3, ip
 8005528:	781b      	ldrb	r3, [r3, #0]
}
 800552a:	0018      	movs	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	b00e      	add	sp, #56	; 0x38
 8005530:	bdb0      	pop	{r4, r5, r7, pc}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	40021000 	.word	0x40021000
 8005538:	007a1200 	.word	0x007a1200
 800553c:	01e84800 	.word	0x01e84800
 8005540:	0000ffff 	.word	0x0000ffff
 8005544:	08006a0c 	.word	0x08006a0c
 8005548:	003d0900 	.word	0x003d0900
 800554c:	00f42400 	.word	0x00f42400

08005550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	2201      	movs	r2, #1
 800555e:	4013      	ands	r3, r2
 8005560:	d00b      	beq.n	800557a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a4a      	ldr	r2, [pc, #296]	; (8005694 <UART_AdvFeatureConfig+0x144>)
 800556a:	4013      	ands	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2202      	movs	r2, #2
 8005580:	4013      	ands	r3, r2
 8005582:	d00b      	beq.n	800559c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4a43      	ldr	r2, [pc, #268]	; (8005698 <UART_AdvFeatureConfig+0x148>)
 800558c:	4013      	ands	r3, r2
 800558e:	0019      	movs	r1, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2204      	movs	r2, #4
 80055a2:	4013      	ands	r3, r2
 80055a4:	d00b      	beq.n	80055be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a3b      	ldr	r2, [pc, #236]	; (800569c <UART_AdvFeatureConfig+0x14c>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	0019      	movs	r1, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	2208      	movs	r2, #8
 80055c4:	4013      	ands	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4a34      	ldr	r2, [pc, #208]	; (80056a0 <UART_AdvFeatureConfig+0x150>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	0019      	movs	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2210      	movs	r2, #16
 80055e6:	4013      	ands	r3, r2
 80055e8:	d00b      	beq.n	8005602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	4a2c      	ldr	r2, [pc, #176]	; (80056a4 <UART_AdvFeatureConfig+0x154>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	0019      	movs	r1, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2220      	movs	r2, #32
 8005608:	4013      	ands	r3, r2
 800560a:	d00b      	beq.n	8005624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <UART_AdvFeatureConfig+0x158>)
 8005614:	4013      	ands	r3, r2
 8005616:	0019      	movs	r1, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	2240      	movs	r2, #64	; 0x40
 800562a:	4013      	ands	r3, r2
 800562c:	d01d      	beq.n	800566a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a1d      	ldr	r2, [pc, #116]	; (80056ac <UART_AdvFeatureConfig+0x15c>)
 8005636:	4013      	ands	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	035b      	lsls	r3, r3, #13
 800564e:	429a      	cmp	r2, r3
 8005650:	d10b      	bne.n	800566a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a15      	ldr	r2, [pc, #84]	; (80056b0 <UART_AdvFeatureConfig+0x160>)
 800565a:	4013      	ands	r3, r2
 800565c:	0019      	movs	r1, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	4013      	ands	r3, r2
 8005672:	d00b      	beq.n	800568c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	4a0e      	ldr	r2, [pc, #56]	; (80056b4 <UART_AdvFeatureConfig+0x164>)
 800567c:	4013      	ands	r3, r2
 800567e:	0019      	movs	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }
}
 800568c:	46c0      	nop			; (mov r8, r8)
 800568e:	46bd      	mov	sp, r7
 8005690:	b002      	add	sp, #8
 8005692:	bd80      	pop	{r7, pc}
 8005694:	fffdffff 	.word	0xfffdffff
 8005698:	fffeffff 	.word	0xfffeffff
 800569c:	fffbffff 	.word	0xfffbffff
 80056a0:	ffff7fff 	.word	0xffff7fff
 80056a4:	ffffefff 	.word	0xffffefff
 80056a8:	ffffdfff 	.word	0xffffdfff
 80056ac:	ffefffff 	.word	0xffefffff
 80056b0:	ff9fffff 	.word	0xff9fffff
 80056b4:	fff7ffff 	.word	0xfff7ffff

080056b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af02      	add	r7, sp, #8
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80056c6:	f7fc fbc7 	bl	8001e58 <HAL_GetTick>
 80056ca:	0003      	movs	r3, r0
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2208      	movs	r2, #8
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d10d      	bne.n	80056f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	0399      	lsls	r1, r3, #14
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4b16      	ldr	r3, [pc, #88]	; (8005740 <UART_CheckIdleState+0x88>)
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	0013      	movs	r3, r2
 80056ea:	2200      	movs	r2, #0
 80056ec:	f000 f82a 	bl	8005744 <UART_WaitOnFlagUntilTimeout>
 80056f0:	1e03      	subs	r3, r0, #0
 80056f2:	d001      	beq.n	80056f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e01f      	b.n	8005738 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2204      	movs	r2, #4
 8005700:	4013      	ands	r3, r2
 8005702:	2b04      	cmp	r3, #4
 8005704:	d10d      	bne.n	8005722 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	03d9      	lsls	r1, r3, #15
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <UART_CheckIdleState+0x88>)
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	0013      	movs	r3, r2
 8005714:	2200      	movs	r2, #0
 8005716:	f000 f815 	bl	8005744 <UART_WaitOnFlagUntilTimeout>
 800571a:	1e03      	subs	r3, r0, #0
 800571c:	d001      	beq.n	8005722 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e00a      	b.n	8005738 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2270      	movs	r2, #112	; 0x70
 8005732:	2100      	movs	r1, #0
 8005734:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	0018      	movs	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	b004      	add	sp, #16
 800573e:	bd80      	pop	{r7, pc}
 8005740:	01ffffff 	.word	0x01ffffff

08005744 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	1dfb      	adds	r3, r7, #7
 8005752:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005754:	e029      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	3301      	adds	r3, #1
 800575a:	d026      	beq.n	80057aa <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575c:	f7fc fb7c 	bl	8001e58 <HAL_GetTick>
 8005760:	0002      	movs	r2, r0
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	429a      	cmp	r2, r3
 800576a:	d302      	bcc.n	8005772 <UART_WaitOnFlagUntilTimeout+0x2e>
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11b      	bne.n	80057aa <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4915      	ldr	r1, [pc, #84]	; (80057d4 <UART_WaitOnFlagUntilTimeout+0x90>)
 800577e:	400a      	ands	r2, r1
 8005780:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2101      	movs	r1, #1
 800578e:	438a      	bics	r2, r1
 8005790:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2270      	movs	r2, #112	; 0x70
 80057a2:	2100      	movs	r1, #0
 80057a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e00f      	b.n	80057ca <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	425a      	negs	r2, r3
 80057ba:	4153      	adcs	r3, r2
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	001a      	movs	r2, r3
 80057c0:	1dfb      	adds	r3, r7, #7
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d0c6      	beq.n	8005756 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	0018      	movs	r0, r3
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b004      	add	sp, #16
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	fffffe5f 	.word	0xfffffe5f

080057d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057e0:	210e      	movs	r1, #14
 80057e2:	187b      	adds	r3, r7, r1
 80057e4:	4a08      	ldr	r2, [pc, #32]	; (8005808 <USB_EnableGlobalInt+0x30>)
 80057e6:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2240      	movs	r2, #64	; 0x40
 80057ec:	5a9b      	ldrh	r3, [r3, r2]
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	187b      	adds	r3, r7, r1
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	b299      	uxth	r1, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2240      	movs	r2, #64	; 0x40
 80057fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b004      	add	sp, #16
 8005806:	bd80      	pop	{r7, pc}
 8005808:	ffffbf80 	.word	0xffffbf80

0800580c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005814:	210e      	movs	r1, #14
 8005816:	187b      	adds	r3, r7, r1
 8005818:	4a0b      	ldr	r2, [pc, #44]	; (8005848 <USB_DisableGlobalInt+0x3c>)
 800581a:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2240      	movs	r2, #64	; 0x40
 8005820:	5a9b      	ldrh	r3, [r3, r2]
 8005822:	b29b      	uxth	r3, r3
 8005824:	b21b      	sxth	r3, r3
 8005826:	187a      	adds	r2, r7, r1
 8005828:	2100      	movs	r1, #0
 800582a:	5e52      	ldrsh	r2, [r2, r1]
 800582c:	43d2      	mvns	r2, r2
 800582e:	b212      	sxth	r2, r2
 8005830:	4013      	ands	r3, r2
 8005832:	b21b      	sxth	r3, r3
 8005834:	b299      	uxth	r1, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2240      	movs	r2, #64	; 0x40
 800583a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	0018      	movs	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	b004      	add	sp, #16
 8005844:	bd80      	pop	{r7, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	ffffbf80 	.word	0xffffbf80

0800584c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800584c:	b084      	sub	sp, #16
 800584e:	b590      	push	{r4, r7, lr}
 8005850:	46c6      	mov	lr, r8
 8005852:	b500      	push	{lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	2004      	movs	r0, #4
 800585c:	2410      	movs	r4, #16
 800585e:	46a4      	mov	ip, r4
 8005860:	2408      	movs	r4, #8
 8005862:	46a0      	mov	r8, r4
 8005864:	44b8      	add	r8, r7
 8005866:	44c4      	add	ip, r8
 8005868:	4460      	add	r0, ip
 800586a:	6001      	str	r1, [r0, #0]
 800586c:	6042      	str	r2, [r0, #4]
 800586e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2240      	movs	r2, #64	; 0x40
 8005874:	2101      	movs	r1, #1
 8005876:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2240      	movs	r2, #64	; 0x40
 800587c:	2100      	movs	r1, #0
 800587e:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2244      	movs	r2, #68	; 0x44
 8005884:	2100      	movs	r1, #0
 8005886:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2250      	movs	r2, #80	; 0x50
 800588c:	2100      	movs	r1, #0
 800588e:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	0018      	movs	r0, r3
 8005894:	f7ff ffa0 	bl	80057d8 <USB_EnableGlobalInt>

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	0018      	movs	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	b002      	add	sp, #8
 80058a0:	bc04      	pop	{r2}
 80058a2:	4690      	mov	r8, r2
 80058a4:	bc90      	pop	{r4, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	b004      	add	sp, #16
 80058aa:	4718      	bx	r3

080058ac <clear_paper_screen>:
};
uint8_t info_note_fonts[MAX_INFO_ROWS_NUM] = {
		16, 16, 12, 12, 12, 12, 16, 16, 12, 12, 16
};

void clear_paper_screen (void) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
	for (uint16_t num_cell = 0; num_cell < 3096; num_cell++){
 80058b2:	1dbb      	adds	r3, r7, #6
 80058b4:	2200      	movs	r2, #0
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	e009      	b.n	80058ce <clear_paper_screen+0x22>
		screen_paper_memory[num_cell] = 0xFF;
 80058ba:	1dbb      	adds	r3, r7, #6
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	4a08      	ldr	r2, [pc, #32]	; (80058e0 <clear_paper_screen+0x34>)
 80058c0:	21ff      	movs	r1, #255	; 0xff
 80058c2:	54d1      	strb	r1, [r2, r3]
	for (uint16_t num_cell = 0; num_cell < 3096; num_cell++){
 80058c4:	1dbb      	adds	r3, r7, #6
 80058c6:	881a      	ldrh	r2, [r3, #0]
 80058c8:	1dbb      	adds	r3, r7, #6
 80058ca:	3201      	adds	r2, #1
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	1dbb      	adds	r3, r7, #6
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	4a04      	ldr	r2, [pc, #16]	; (80058e4 <clear_paper_screen+0x38>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d9f0      	bls.n	80058ba <clear_paper_screen+0xe>
	}
}
 80058d8:	46c0      	nop			; (mov r8, r8)
 80058da:	46bd      	mov	sp, r7
 80058dc:	b002      	add	sp, #8
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20000274 	.word	0x20000274
 80058e4:	00000c17 	.word	0x00000c17

080058e8 <write_pixel>:
void write_pixel (uint16_t x_value, uint16_t y_value, uint8_t color) {
 80058e8:	b590      	push	{r4, r7, lr}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	0004      	movs	r4, r0
 80058f0:	0008      	movs	r0, r1
 80058f2:	0011      	movs	r1, r2
 80058f4:	1dbb      	adds	r3, r7, #6
 80058f6:	1c22      	adds	r2, r4, #0
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	1d3b      	adds	r3, r7, #4
 80058fc:	1c02      	adds	r2, r0, #0
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	1cfb      	adds	r3, r7, #3
 8005902:	1c0a      	adds	r2, r1, #0
 8005904:	701a      	strb	r2, [r3, #0]
	if (x_value >= 172 || y_value >= 72)
 8005906:	1dbb      	adds	r3, r7, #6
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	2bab      	cmp	r3, #171	; 0xab
 800590c:	d84f      	bhi.n	80059ae <write_pixel+0xc6>
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	2b47      	cmp	r3, #71	; 0x47
 8005914:	d84b      	bhi.n	80059ae <write_pixel+0xc6>
		return;

	uint16_t 
		num_byte = x_value * MAX_X_SIZE_BYTE * NUM_BIT_ON_PIX + y_value / NUM_PIX_ON_CELL,
 8005916:	1dbb      	adds	r3, r7, #6
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	1c1a      	adds	r2, r3, #0
 800591c:	00d2      	lsls	r2, r2, #3
 800591e:	18d3      	adds	r3, r2, r3
 8005920:	18db      	adds	r3, r3, r3
 8005922:	b299      	uxth	r1, r3
 8005924:	1d3b      	adds	r3, r7, #4
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	089b      	lsrs	r3, r3, #2
 800592a:	b29a      	uxth	r2, r3
 800592c:	230e      	movs	r3, #14
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	188a      	adds	r2, r1, r2
 8005932:	801a      	strh	r2, [r3, #0]
		num_pos = y_value % NUM_PIX_ON_CELL;
 8005934:	230c      	movs	r3, #12
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	1d3a      	adds	r2, r7, #4
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	2103      	movs	r1, #3
 800593e:	400a      	ands	r2, r1
 8005940:	801a      	strh	r2, [r3, #0]
	
	if (color == COLOR_BLACK)
 8005942:	1cfb      	adds	r3, r7, #3
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d119      	bne.n	800597e <write_pixel+0x96>
		screen_paper_memory[num_byte] &= ~(0x3 << (6 - num_pos * NUM_BIT_ON_PIX));
 800594a:	200e      	movs	r0, #14
 800594c:	183b      	adds	r3, r7, r0
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <write_pixel+0xd0>)
 8005952:	5cd3      	ldrb	r3, [r2, r3]
 8005954:	b25b      	sxtb	r3, r3
 8005956:	220c      	movs	r2, #12
 8005958:	18ba      	adds	r2, r7, r2
 800595a:	8812      	ldrh	r2, [r2, #0]
 800595c:	2103      	movs	r1, #3
 800595e:	1a8a      	subs	r2, r1, r2
 8005960:	0052      	lsls	r2, r2, #1
 8005962:	2103      	movs	r1, #3
 8005964:	4091      	lsls	r1, r2
 8005966:	000a      	movs	r2, r1
 8005968:	b252      	sxtb	r2, r2
 800596a:	43d2      	mvns	r2, r2
 800596c:	b252      	sxtb	r2, r2
 800596e:	4013      	ands	r3, r2
 8005970:	b25a      	sxtb	r2, r3
 8005972:	183b      	adds	r3, r7, r0
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b2d1      	uxtb	r1, r2
 8005978:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <write_pixel+0xd0>)
 800597a:	54d1      	strb	r1, [r2, r3]
 800597c:	e018      	b.n	80059b0 <write_pixel+0xc8>
	else
		screen_paper_memory[num_byte] |= (0x3 << (6 - num_pos * NUM_BIT_ON_PIX));
 800597e:	200e      	movs	r0, #14
 8005980:	183b      	adds	r3, r7, r0
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	4a0c      	ldr	r2, [pc, #48]	; (80059b8 <write_pixel+0xd0>)
 8005986:	5cd3      	ldrb	r3, [r2, r3]
 8005988:	b25a      	sxtb	r2, r3
 800598a:	230c      	movs	r3, #12
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	2103      	movs	r1, #3
 8005992:	1acb      	subs	r3, r1, r3
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	2103      	movs	r1, #3
 8005998:	4099      	lsls	r1, r3
 800599a:	000b      	movs	r3, r1
 800599c:	b25b      	sxtb	r3, r3
 800599e:	4313      	orrs	r3, r2
 80059a0:	b25a      	sxtb	r2, r3
 80059a2:	183b      	adds	r3, r7, r0
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b2d1      	uxtb	r1, r2
 80059a8:	4a03      	ldr	r2, [pc, #12]	; (80059b8 <write_pixel+0xd0>)
 80059aa:	54d1      	strb	r1, [r2, r3]
 80059ac:	e000      	b.n	80059b0 <write_pixel+0xc8>
		return;
 80059ae:	46c0      	nop			; (mov r8, r8)
}
 80059b0:	46bd      	mov	sp, r7
 80059b2:	b005      	add	sp, #20
 80059b4:	bd90      	pop	{r4, r7, pc}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	20000274 	.word	0x20000274

080059bc <draw_v_line>:

void draw_v_line (uint16_t x_value, uint16_t y_value, uint16_t length) {
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	0004      	movs	r4, r0
 80059c4:	0008      	movs	r0, r1
 80059c6:	0011      	movs	r1, r2
 80059c8:	1dbb      	adds	r3, r7, #6
 80059ca:	1c22      	adds	r2, r4, #0
 80059cc:	801a      	strh	r2, [r3, #0]
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	1c02      	adds	r2, r0, #0
 80059d2:	801a      	strh	r2, [r3, #0]
 80059d4:	1cbb      	adds	r3, r7, #2
 80059d6:	1c0a      	adds	r2, r1, #0
 80059d8:	801a      	strh	r2, [r3, #0]
	for (uint16_t shift = 0; shift < length; shift++) 
 80059da:	230e      	movs	r3, #14
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	2200      	movs	r2, #0
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	e011      	b.n	8005a08 <draw_v_line+0x4c>
		write_pixel (x_value, y_value + shift, COLOR_BLACK);
 80059e4:	1d3a      	adds	r2, r7, #4
 80059e6:	240e      	movs	r4, #14
 80059e8:	193b      	adds	r3, r7, r4
 80059ea:	8812      	ldrh	r2, [r2, #0]
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	18d3      	adds	r3, r2, r3
 80059f0:	b299      	uxth	r1, r3
 80059f2:	1dbb      	adds	r3, r7, #6
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	0018      	movs	r0, r3
 80059fa:	f7ff ff75 	bl	80058e8 <write_pixel>
	for (uint16_t shift = 0; shift < length; shift++) 
 80059fe:	193b      	adds	r3, r7, r4
 8005a00:	881a      	ldrh	r2, [r3, #0]
 8005a02:	193b      	adds	r3, r7, r4
 8005a04:	3201      	adds	r2, #1
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	230e      	movs	r3, #14
 8005a0a:	18fa      	adds	r2, r7, r3
 8005a0c:	1cbb      	adds	r3, r7, #2
 8005a0e:	8812      	ldrh	r2, [r2, #0]
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3e6      	bcc.n	80059e4 <draw_v_line+0x28>
}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b005      	add	sp, #20
 8005a1c:	bd90      	pop	{r4, r7, pc}

08005a1e <draw_h_line>:

void draw_h_line (uint16_t x_value, uint16_t y_value, uint16_t length) {
 8005a1e:	b590      	push	{r4, r7, lr}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	0004      	movs	r4, r0
 8005a26:	0008      	movs	r0, r1
 8005a28:	0011      	movs	r1, r2
 8005a2a:	1dbb      	adds	r3, r7, #6
 8005a2c:	1c22      	adds	r2, r4, #0
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	1d3b      	adds	r3, r7, #4
 8005a32:	1c02      	adds	r2, r0, #0
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	1cbb      	adds	r3, r7, #2
 8005a38:	1c0a      	adds	r2, r1, #0
 8005a3a:	801a      	strh	r2, [r3, #0]
	for (uint16_t shift = 0; shift < length; shift++) 
 8005a3c:	230e      	movs	r3, #14
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	2200      	movs	r2, #0
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	e011      	b.n	8005a6a <draw_h_line+0x4c>
		write_pixel (x_value + shift, y_value, COLOR_BLACK);
 8005a46:	1dba      	adds	r2, r7, #6
 8005a48:	240e      	movs	r4, #14
 8005a4a:	193b      	adds	r3, r7, r4
 8005a4c:	8812      	ldrh	r2, [r2, #0]
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	18d3      	adds	r3, r2, r3
 8005a52:	b298      	uxth	r0, r3
 8005a54:	1d3b      	adds	r3, r7, #4
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	0019      	movs	r1, r3
 8005a5c:	f7ff ff44 	bl	80058e8 <write_pixel>
	for (uint16_t shift = 0; shift < length; shift++) 
 8005a60:	193b      	adds	r3, r7, r4
 8005a62:	881a      	ldrh	r2, [r3, #0]
 8005a64:	193b      	adds	r3, r7, r4
 8005a66:	3201      	adds	r2, #1
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	230e      	movs	r3, #14
 8005a6c:	18fa      	adds	r2, r7, r3
 8005a6e:	1cbb      	adds	r3, r7, #2
 8005a70:	8812      	ldrh	r2, [r2, #0]
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d3e6      	bcc.n	8005a46 <draw_h_line+0x28>
}
 8005a78:	46c0      	nop			; (mov r8, r8)
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b005      	add	sp, #20
 8005a7e:	bd90      	pop	{r4, r7, pc}

08005a80 <draw_char>:
	draw_v_line (x_value, y_value, height);
	draw_v_line ((x_value + width), y_value, height);
}

#define PIX_COLOR(cell, num_pix) ((cell >> (6 - num_pix * 2)) & 0x3)
void draw_char (uint16_t x_value, uint16_t y_value, uint8_t ascii) {
 8005a80:	b5b0      	push	{r4, r5, r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	0004      	movs	r4, r0
 8005a88:	0008      	movs	r0, r1
 8005a8a:	0011      	movs	r1, r2
 8005a8c:	1dbb      	adds	r3, r7, #6
 8005a8e:	1c22      	adds	r2, r4, #0
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	1c02      	adds	r2, r0, #0
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	1cfb      	adds	r3, r7, #3
 8005a9a:	1c0a      	adds	r2, r1, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
  uint16_t
  	index = 0,  
 8005a9e:	231e      	movs	r3, #30
 8005aa0:	18fb      	adds	r3, r7, r3
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	801a      	strh	r2, [r3, #0]
  	width  = pFont->Width,
 8005aa6:	4b46      	ldr	r3, [pc, #280]	; (8005bc0 <draw_char+0x140>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	2116      	movs	r1, #22
 8005aac:	187b      	adds	r3, r7, r1
 8005aae:	8892      	ldrh	r2, [r2, #4]
 8005ab0:	801a      	strh	r2, [r3, #0]
  	height = pFont->Height,
 8005ab2:	4b43      	ldr	r3, [pc, #268]	; (8005bc0 <draw_char+0x140>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	2014      	movs	r0, #20
 8005ab8:	183b      	adds	r3, r7, r0
 8005aba:	88d2      	ldrh	r2, [r2, #6]
 8005abc:	801a      	strh	r2, [r3, #0]
	data_length = height * width;
 8005abe:	2412      	movs	r4, #18
 8005ac0:	193b      	adds	r3, r7, r4
 8005ac2:	183a      	adds	r2, r7, r0
 8005ac4:	1879      	adds	r1, r7, r1
 8005ac6:	8812      	ldrh	r2, [r2, #0]
 8005ac8:	8809      	ldrh	r1, [r1, #0]
 8005aca:	434a      	muls	r2, r1
 8005acc:	801a      	strh	r2, [r3, #0]

	ascii -= 32;
 8005ace:	1cfb      	adds	r3, r7, #3
 8005ad0:	1cfa      	adds	r2, r7, #3
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	3a20      	subs	r2, #32
 8005ad6:	701a      	strb	r2, [r3, #0]
	const uint8_t * ch = &pFont->table[ascii * data_length];
 8005ad8:	4b39      	ldr	r3, [pc, #228]	; (8005bc0 <draw_char+0x140>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	1cfa      	adds	r2, r7, #3
 8005ae0:	7812      	ldrb	r2, [r2, #0]
 8005ae2:	1939      	adds	r1, r7, r4
 8005ae4:	8809      	ldrh	r1, [r1, #0]
 8005ae6:	434a      	muls	r2, r1
 8005ae8:	189b      	adds	r3, r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

	for (uint16_t num_h_index = 0; num_h_index < width; num_h_index++)
 8005aec:	231c      	movs	r3, #28
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	2200      	movs	r2, #0
 8005af2:	801a      	strh	r2, [r3, #0]
 8005af4:	e057      	b.n	8005ba6 <draw_char+0x126>
		for (uint16_t num_v_index = 0; num_v_index < height; num_v_index++){
 8005af6:	231a      	movs	r3, #26
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	2200      	movs	r2, #0
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	e044      	b.n	8005b8a <draw_char+0x10a>
			for (uint16_t num_pix = 0; num_pix < NUM_PIX_ON_CELL; num_pix++){
 8005b00:	2318      	movs	r3, #24
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	2200      	movs	r2, #0
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	e02e      	b.n	8005b68 <draw_char+0xe8>
				write_pixel(
 8005b0a:	1dba      	adds	r2, r7, #6
 8005b0c:	231c      	movs	r3, #28
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	8812      	ldrh	r2, [r2, #0]
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	18d3      	adds	r3, r2, r3
 8005b16:	b298      	uxth	r0, r3
					x_value + num_h_index,
					y_value + num_v_index * NUM_PIX_ON_CELL  + num_pix,
 8005b18:	231a      	movs	r3, #26
 8005b1a:	18fb      	adds	r3, r7, r3
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	18d3      	adds	r3, r2, r3
 8005b28:	b29a      	uxth	r2, r3
				write_pixel(
 8005b2a:	2518      	movs	r5, #24
 8005b2c:	197b      	adds	r3, r7, r5
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	18d3      	adds	r3, r2, r3
 8005b32:	b299      	uxth	r1, r3
					PIX_COLOR(ch[index], num_pix)
 8005b34:	231e      	movs	r3, #30
 8005b36:	18fb      	adds	r3, r7, r3
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	18d3      	adds	r3, r2, r3
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	001c      	movs	r4, r3
 8005b42:	197b      	adds	r3, r7, r5
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	2203      	movs	r2, #3
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	411c      	asrs	r4, r3
 8005b4e:	0023      	movs	r3, r4
 8005b50:	b2db      	uxtb	r3, r3
				write_pixel(
 8005b52:	2203      	movs	r2, #3
 8005b54:	4013      	ands	r3, r2
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	001a      	movs	r2, r3
 8005b5a:	f7ff fec5 	bl	80058e8 <write_pixel>
			for (uint16_t num_pix = 0; num_pix < NUM_PIX_ON_CELL; num_pix++){
 8005b5e:	197b      	adds	r3, r7, r5
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	197b      	adds	r3, r7, r5
 8005b64:	3201      	adds	r2, #1
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	2318      	movs	r3, #24
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d9cb      	bls.n	8005b0a <draw_char+0x8a>
				);
			}
			index++;
 8005b72:	211e      	movs	r1, #30
 8005b74:	187b      	adds	r3, r7, r1
 8005b76:	881a      	ldrh	r2, [r3, #0]
 8005b78:	187b      	adds	r3, r7, r1
 8005b7a:	3201      	adds	r2, #1
 8005b7c:	801a      	strh	r2, [r3, #0]
		for (uint16_t num_v_index = 0; num_v_index < height; num_v_index++){
 8005b7e:	211a      	movs	r1, #26
 8005b80:	187b      	adds	r3, r7, r1
 8005b82:	881a      	ldrh	r2, [r3, #0]
 8005b84:	187b      	adds	r3, r7, r1
 8005b86:	3201      	adds	r2, #1
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	231a      	movs	r3, #26
 8005b8c:	18fa      	adds	r2, r7, r3
 8005b8e:	2314      	movs	r3, #20
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	8812      	ldrh	r2, [r2, #0]
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d3b2      	bcc.n	8005b00 <draw_char+0x80>
	for (uint16_t num_h_index = 0; num_h_index < width; num_h_index++)
 8005b9a:	211c      	movs	r1, #28
 8005b9c:	187b      	adds	r3, r7, r1
 8005b9e:	881a      	ldrh	r2, [r3, #0]
 8005ba0:	187b      	adds	r3, r7, r1
 8005ba2:	3201      	adds	r2, #1
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	231c      	movs	r3, #28
 8005ba8:	18fa      	adds	r2, r7, r3
 8005baa:	2316      	movs	r3, #22
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	8812      	ldrh	r2, [r2, #0]
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d39f      	bcc.n	8005af6 <draw_char+0x76>
		}
} 
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b008      	add	sp, #32
 8005bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	20000044 	.word	0x20000044

08005bc4 <draw_string>:

#define SCREEN_X_SIZE 172
//#define CHAR_NOT_WITHOUT_FOR_SCREEN (((SCREEN_X_SIZE - (num_ch * pFont->Width)) & 0xFFFF) >= pFont->Width)
#define CHAR_NOT_WITHOUT_FOR_SCREEN ( (x_value + pFont->Width) <= SCREEN_X_SIZE )
void draw_string  (uint16_t x_value, uint16_t y_value, uint8_t * text) {
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	603a      	str	r2, [r7, #0]
 8005bcc:	1dbb      	adds	r3, r7, #6
 8005bce:	1c02      	adds	r2, r0, #0
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	1d3b      	adds	r3, r7, #4
 8005bd4:	1c0a      	adds	r2, r1, #0
 8005bd6:	801a      	strh	r2, [r3, #0]
	uint16_t 
		size = 0,
 8005bd8:	230e      	movs	r3, #14
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	2200      	movs	r2, #0
 8005bde:	801a      	strh	r2, [r3, #0]
		num_ch = 0;
 8005be0:	230c      	movs	r3, #12
 8005be2:	18fb      	adds	r3, r7, r3
 8005be4:	2200      	movs	r2, #0
 8005be6:	801a      	strh	r2, [r3, #0]
	uint8_t * ptr = text;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	60bb      	str	r3, [r7, #8]
	while (*ptr++) size++;
 8005bec:	e005      	b.n	8005bfa <draw_string+0x36>
 8005bee:	210e      	movs	r1, #14
 8005bf0:	187b      	adds	r3, r7, r1
 8005bf2:	881a      	ldrh	r2, [r3, #0]
 8005bf4:	187b      	adds	r3, r7, r1
 8005bf6:	3201      	adds	r2, #1
 8005bf8:	801a      	strh	r2, [r3, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	60ba      	str	r2, [r7, #8]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f3      	bne.n	8005bee <draw_string+0x2a>



	while ((*text != 0) &  CHAR_NOT_WITHOUT_FOR_SCREEN){
 8005c06:	e019      	b.n	8005c3c <draw_string+0x78>
		draw_char(x_value, y_value, *text);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	8819      	ldrh	r1, [r3, #0]
 8005c10:	1dbb      	adds	r3, r7, #6
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7ff ff33 	bl	8005a80 <draw_char>
		x_value += pFont->Width;
 8005c1a:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <draw_string+0xac>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	8899      	ldrh	r1, [r3, #4]
 8005c20:	1dbb      	adds	r3, r7, #6
 8005c22:	1dba      	adds	r2, r7, #6
 8005c24:	8812      	ldrh	r2, [r2, #0]
 8005c26:	188a      	adds	r2, r1, r2
 8005c28:	801a      	strh	r2, [r3, #0]
		text++;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	603b      	str	r3, [r7, #0]
		num_ch++;
 8005c30:	210c      	movs	r1, #12
 8005c32:	187b      	adds	r3, r7, r1
 8005c34:	881a      	ldrh	r2, [r3, #0]
 8005c36:	187b      	adds	r3, r7, r1
 8005c38:	3201      	adds	r2, #1
 8005c3a:	801a      	strh	r2, [r3, #0]
	while ((*text != 0) &  CHAR_NOT_WITHOUT_FOR_SCREEN){
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	1e5a      	subs	r2, r3, #1
 8005c42:	4193      	sbcs	r3, r2
 8005c44:	b2d9      	uxtb	r1, r3
 8005c46:	1dbb      	adds	r3, r7, #6
 8005c48:	881a      	ldrh	r2, [r3, #0]
 8005c4a:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <draw_string+0xac>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	889b      	ldrh	r3, [r3, #4]
 8005c50:	18d3      	adds	r3, r2, r3
 8005c52:	22ac      	movs	r2, #172	; 0xac
 8005c54:	0fdc      	lsrs	r4, r3, #31
 8005c56:	17d0      	asrs	r0, r2, #31
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	4144      	adcs	r4, r0
 8005c5c:	0023      	movs	r3, r4
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	400b      	ands	r3, r1
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1cf      	bne.n	8005c08 <draw_string+0x44>
	}
}
 8005c68:	46c0      	nop			; (mov r8, r8)
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b005      	add	sp, #20
 8005c6e:	bd90      	pop	{r4, r7, pc}
 8005c70:	20000044 	.word	0x20000044

08005c74 <set_font>:

void set_font (uint8_t font) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	0002      	movs	r2, r0
 8005c7c:	1dfb      	adds	r3, r7, #7
 8005c7e:	701a      	strb	r2, [r3, #0]
	switch (font) {
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b0c      	cmp	r3, #12
 8005c86:	d00c      	beq.n	8005ca2 <set_font+0x2e>
 8005c88:	dc02      	bgt.n	8005c90 <set_font+0x1c>
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d005      	beq.n	8005c9a <set_font+0x26>
 8005c8e:	e014      	b.n	8005cba <set_font+0x46>
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d00a      	beq.n	8005caa <set_font+0x36>
 8005c94:	2b14      	cmp	r3, #20
 8005c96:	d00c      	beq.n	8005cb2 <set_font+0x3e>
 8005c98:	e00f      	b.n	8005cba <set_font+0x46>
		case 8: pFont = &Font8; break;
 8005c9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <set_font+0x58>)
 8005c9c:	4a0c      	ldr	r2, [pc, #48]	; (8005cd0 <set_font+0x5c>)
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e00f      	b.n	8005cc2 <set_font+0x4e>
		case 12: pFont = &Font12; break;
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <set_font+0x58>)
 8005ca4:	4a0b      	ldr	r2, [pc, #44]	; (8005cd4 <set_font+0x60>)
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e00b      	b.n	8005cc2 <set_font+0x4e>
		case 16: pFont = &Font16; break;
 8005caa:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <set_font+0x58>)
 8005cac:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <set_font+0x64>)
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	e007      	b.n	8005cc2 <set_font+0x4e>
		case 20: pFont = &Font20; break;
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <set_font+0x58>)
 8005cb4:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <set_font+0x68>)
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	e003      	b.n	8005cc2 <set_font+0x4e>
		default: pFont = &Font12; break;
 8005cba:	4b04      	ldr	r3, [pc, #16]	; (8005ccc <set_font+0x58>)
 8005cbc:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <set_font+0x60>)
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	46c0      	nop			; (mov r8, r8)
	}
}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b002      	add	sp, #8
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	20000044 	.word	0x20000044
 8005cd0:	2000003c 	.word	0x2000003c
 8005cd4:	20000024 	.word	0x20000024
 8005cd8:	2000002c 	.word	0x2000002c
 8005cdc:	20000034 	.word	0x20000034

08005ce0 <draw_confirm_param_screen>:
	current_parametr_screen++;
	if (current_parametr_screen==MAX_INFO_ROWS_NUM) current_parametr_screen=0;

}

void draw_confirm_param_screen(){
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0

	uint16_t size=0;
 8005ce6:	1dbb      	adds	r3, r7, #6
 8005ce8:	2200      	movs	r2, #0
 8005cea:	801a      	strh	r2, [r3, #0]
	uint8_t * ptr = info_names[0];
 8005cec:	4b2b      	ldr	r3, [pc, #172]	; (8005d9c <draw_confirm_param_screen+0xbc>)
 8005cee:	603b      	str	r3, [r7, #0]
	while (*ptr++) size++;
 8005cf0:	e004      	b.n	8005cfc <draw_confirm_param_screen+0x1c>
 8005cf2:	1dbb      	adds	r3, r7, #6
 8005cf4:	881a      	ldrh	r2, [r3, #0]
 8005cf6:	1dbb      	adds	r3, r7, #6
 8005cf8:	3201      	adds	r2, #1
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	603a      	str	r2, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f4      	bne.n	8005cf2 <draw_confirm_param_screen+0x12>
	if (size <=15) {
 8005d08:	1dbb      	adds	r3, r7, #6
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	2b0f      	cmp	r3, #15
 8005d0e:	d809      	bhi.n	8005d24 <draw_confirm_param_screen+0x44>
		set_font(16);
 8005d10:	2010      	movs	r0, #16
 8005d12:	f7ff ffaf 	bl	8005c74 <set_font>
		draw_string_centre_align(86, 50, info_names[0]);
 8005d16:	4b21      	ldr	r3, [pc, #132]	; (8005d9c <draw_confirm_param_screen+0xbc>)
 8005d18:	001a      	movs	r2, r3
 8005d1a:	2132      	movs	r1, #50	; 0x32
 8005d1c:	2056      	movs	r0, #86	; 0x56
 8005d1e:	f000 f8dd 	bl	8005edc <draw_string_centre_align>
 8005d22:	e008      	b.n	8005d36 <draw_confirm_param_screen+0x56>
	}
	else {
		set_font(12);
 8005d24:	200c      	movs	r0, #12
 8005d26:	f7ff ffa5 	bl	8005c74 <set_font>
		draw_string_fix_len(1, 60, 170, info_names[0]);
 8005d2a:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <draw_confirm_param_screen+0xbc>)
 8005d2c:	22aa      	movs	r2, #170	; 0xaa
 8005d2e:	213c      	movs	r1, #60	; 0x3c
 8005d30:	2001      	movs	r0, #1
 8005d32:	f000 f83b 	bl	8005dac <draw_string_fix_len>
	}
	set_font(12);
 8005d36:	200c      	movs	r0, #12
 8005d38:	f7ff ff9c 	bl	8005c74 <set_font>
	draw_string_centre_align(86, 35, &"Confirm?");
 8005d3c:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <draw_confirm_param_screen+0xc0>)
 8005d3e:	001a      	movs	r2, r3
 8005d40:	2123      	movs	r1, #35	; 0x23
 8005d42:	2056      	movs	r0, #86	; 0x56
 8005d44:	f000 f8ca 	bl	8005edc <draw_string_centre_align>
	draw_string_centre_align(86, 22, &"You want to set: 4");
 8005d48:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <draw_confirm_param_screen+0xc4>)
 8005d4a:	001a      	movs	r2, r3
 8005d4c:	2116      	movs	r1, #22
 8005d4e:	2056      	movs	r0, #86	; 0x56
 8005d50:	f000 f8c4 	bl	8005edc <draw_string_centre_align>
	draw_string_centre_align(86, 9, &"Limits: 3.3-12");
 8005d54:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <draw_confirm_param_screen+0xc8>)
 8005d56:	001a      	movs	r2, r3
 8005d58:	2109      	movs	r1, #9
 8005d5a:	2056      	movs	r0, #86	; 0x56
 8005d5c:	f000 f8be 	bl	8005edc <draw_string_centre_align>

	//menu line
	draw_h_line(0, 48 , 172);
 8005d60:	22ac      	movs	r2, #172	; 0xac
 8005d62:	2130      	movs	r1, #48	; 0x30
 8005d64:	2000      	movs	r0, #0
 8005d66:	f7ff fe5a 	bl	8005a1e <draw_h_line>

	//circuit
	draw_h_line(0, 0 , 172);
 8005d6a:	22ac      	movs	r2, #172	; 0xac
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	2000      	movs	r0, #0
 8005d70:	f7ff fe55 	bl	8005a1e <draw_h_line>
	draw_h_line(0, 71 , 172);
 8005d74:	22ac      	movs	r2, #172	; 0xac
 8005d76:	2147      	movs	r1, #71	; 0x47
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f7ff fe50 	bl	8005a1e <draw_h_line>
	draw_v_line(0, 0 , 72);
 8005d7e:	2248      	movs	r2, #72	; 0x48
 8005d80:	2100      	movs	r1, #0
 8005d82:	2000      	movs	r0, #0
 8005d84:	f7ff fe1a 	bl	80059bc <draw_v_line>
	draw_v_line(171, 0 , 72);
 8005d88:	2248      	movs	r2, #72	; 0x48
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	20ab      	movs	r0, #171	; 0xab
 8005d8e:	f7ff fe15 	bl	80059bc <draw_v_line>

}
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	46bd      	mov	sp, r7
 8005d96:	b002      	add	sp, #8
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	20000048 	.word	0x20000048
 8005da0:	08006914 	.word	0x08006914
 8005da4:	08006920 	.word	0x08006920
 8005da8:	08006934 	.word	0x08006934

08005dac <draw_string_fix_len>:
	draw_v_line(171, 0 , 72);

}

//Вывод строк в фиксированную длинну
void draw_string_fix_len  (uint16_t x_value, uint16_t y_value, uint8_t length, uint8_t * text){
 8005dac:	b5b0      	push	{r4, r5, r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	0004      	movs	r4, r0
 8005db4:	0008      	movs	r0, r1
 8005db6:	0011      	movs	r1, r2
 8005db8:	607b      	str	r3, [r7, #4]
 8005dba:	250e      	movs	r5, #14
 8005dbc:	197b      	adds	r3, r7, r5
 8005dbe:	1c22      	adds	r2, r4, #0
 8005dc0:	801a      	strh	r2, [r3, #0]
 8005dc2:	240c      	movs	r4, #12
 8005dc4:	193b      	adds	r3, r7, r4
 8005dc6:	1c02      	adds	r2, r0, #0
 8005dc8:	801a      	strh	r2, [r3, #0]
 8005dca:	200b      	movs	r0, #11
 8005dcc:	183b      	adds	r3, r7, r0
 8005dce:	1c0a      	adds	r2, r1, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
	uint16_t
		num_ch = 0,
 8005dd2:	2316      	movs	r3, #22
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	801a      	strh	r2, [r3, #0]
		count_x=x_value,
 8005dda:	2314      	movs	r3, #20
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	197a      	adds	r2, r7, r5
 8005de0:	8812      	ldrh	r2, [r2, #0]
 8005de2:	801a      	strh	r2, [r3, #0]
		count_y=y_value;
 8005de4:	2312      	movs	r3, #18
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	193a      	adds	r2, r7, r4
 8005dea:	8812      	ldrh	r2, [r2, #0]
 8005dec:	801a      	strh	r2, [r3, #0]

	uint8_t current_line=1,
 8005dee:	2311      	movs	r3, #17
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	2201      	movs	r2, #1
 8005df4:	701a      	strb	r2, [r3, #0]
			max_char_str=length/pFont->Width;
 8005df6:	183b      	adds	r3, r7, r0
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	4b37      	ldr	r3, [pc, #220]	; (8005ed8 <draw_string_fix_len+0x12c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	889b      	ldrh	r3, [r3, #4]
 8005e00:	0019      	movs	r1, r3
 8005e02:	0010      	movs	r0, r2
 8005e04:	f7fa fa0a 	bl	800021c <__divsi3>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	18fb      	adds	r3, r7, r3
 8005e10:	701a      	strb	r2, [r3, #0]

	while (*text != 0){
 8005e12:	e058      	b.n	8005ec6 <draw_string_fix_len+0x11a>
		if ( (num_ch==max_char_str*current_line) || (*text==10) ){
 8005e14:	2316      	movs	r3, #22
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	881a      	ldrh	r2, [r3, #0]
 8005e1a:	2310      	movs	r3, #16
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2111      	movs	r1, #17
 8005e22:	1879      	adds	r1, r7, r1
 8005e24:	7809      	ldrb	r1, [r1, #0]
 8005e26:	434b      	muls	r3, r1
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d003      	beq.n	8005e34 <draw_string_fix_len+0x88>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b0a      	cmp	r3, #10
 8005e32:	d11c      	bne.n	8005e6e <draw_string_fix_len+0xc2>
			count_x=x_value;
 8005e34:	2314      	movs	r3, #20
 8005e36:	18fb      	adds	r3, r7, r3
 8005e38:	220e      	movs	r2, #14
 8005e3a:	18ba      	adds	r2, r7, r2
 8005e3c:	8812      	ldrh	r2, [r2, #0]
 8005e3e:	801a      	strh	r2, [r3, #0]
			count_y=y_value-4*pFont->Height*current_line;
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <draw_string_fix_len+0x12c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	88db      	ldrh	r3, [r3, #6]
 8005e46:	2011      	movs	r0, #17
 8005e48:	183a      	adds	r2, r7, r0
 8005e4a:	7812      	ldrb	r2, [r2, #0]
 8005e4c:	b292      	uxth	r2, r2
 8005e4e:	4353      	muls	r3, r2
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	2312      	movs	r3, #18
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	210c      	movs	r1, #12
 8005e5c:	1879      	adds	r1, r7, r1
 8005e5e:	8809      	ldrh	r1, [r1, #0]
 8005e60:	1a8a      	subs	r2, r1, r2
 8005e62:	801a      	strh	r2, [r3, #0]
			current_line++;
 8005e64:	183b      	adds	r3, r7, r0
 8005e66:	781a      	ldrb	r2, [r3, #0]
 8005e68:	183b      	adds	r3, r7, r0
 8005e6a:	3201      	adds	r2, #1
 8005e6c:	701a      	strb	r2, [r3, #0]
		}
		if (*text!=10 && *text!=9) {
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b0a      	cmp	r3, #10
 8005e74:	d01c      	beq.n	8005eb0 <draw_string_fix_len+0x104>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b09      	cmp	r3, #9
 8005e7c:	d018      	beq.n	8005eb0 <draw_string_fix_len+0x104>
			draw_char(count_x, count_y, *text);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	2312      	movs	r3, #18
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	8819      	ldrh	r1, [r3, #0]
 8005e88:	2414      	movs	r4, #20
 8005e8a:	193b      	adds	r3, r7, r4
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f7ff fdf6 	bl	8005a80 <draw_char>
			count_x += pFont->Width;
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <draw_string_fix_len+0x12c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	8899      	ldrh	r1, [r3, #4]
 8005e9a:	193b      	adds	r3, r7, r4
 8005e9c:	193a      	adds	r2, r7, r4
 8005e9e:	8812      	ldrh	r2, [r2, #0]
 8005ea0:	188a      	adds	r2, r1, r2
 8005ea2:	801a      	strh	r2, [r3, #0]
			num_ch++;
 8005ea4:	2116      	movs	r1, #22
 8005ea6:	187b      	adds	r3, r7, r1
 8005ea8:	881a      	ldrh	r2, [r3, #0]
 8005eaa:	187b      	adds	r3, r7, r1
 8005eac:	3201      	adds	r2, #1
 8005eae:	801a      	strh	r2, [r3, #0]
		}
		if (*text==9) count_x=83;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b09      	cmp	r3, #9
 8005eb6:	d103      	bne.n	8005ec0 <draw_string_fix_len+0x114>
 8005eb8:	2314      	movs	r3, #20
 8005eba:	18fb      	adds	r3, r7, r3
 8005ebc:	2253      	movs	r2, #83	; 0x53
 8005ebe:	801a      	strh	r2, [r3, #0]
		text++;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	607b      	str	r3, [r7, #4]
	while (*text != 0){
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1a2      	bne.n	8005e14 <draw_string_fix_len+0x68>
	}
}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b006      	add	sp, #24
 8005ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	20000044 	.word	0x20000044

08005edc <draw_string_centre_align>:

//Вывод строки выровненной по центру
void draw_string_centre_align  (uint16_t x_value, uint16_t y_value, uint8_t * text) {
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	603a      	str	r2, [r7, #0]
 8005ee4:	1dbb      	adds	r3, r7, #6
 8005ee6:	1c02      	adds	r2, r0, #0
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	1c0a      	adds	r2, r1, #0
 8005eee:	801a      	strh	r2, [r3, #0]
	uint16_t
		size = 0,
 8005ef0:	2316      	movs	r3, #22
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	801a      	strh	r2, [r3, #0]
		num_ch = 0,
 8005ef8:	2314      	movs	r3, #20
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	2200      	movs	r2, #0
 8005efe:	801a      	strh	r2, [r3, #0]
		count_x;
	uint8_t * ptr = text;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	60fb      	str	r3, [r7, #12]
	while (*ptr++) size++;
 8005f04:	e005      	b.n	8005f12 <draw_string_centre_align+0x36>
 8005f06:	2116      	movs	r1, #22
 8005f08:	187b      	adds	r3, r7, r1
 8005f0a:	881a      	ldrh	r2, [r3, #0]
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	3201      	adds	r2, #1
 8005f10:	801a      	strh	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	60fa      	str	r2, [r7, #12]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f3      	bne.n	8005f06 <draw_string_centre_align+0x2a>

	if (x_value > ((size/2)*pFont->Width)){
 8005f1e:	1dbb      	adds	r3, r7, #6
 8005f20:	881a      	ldrh	r2, [r3, #0]
 8005f22:	2316      	movs	r3, #22
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	085b      	lsrs	r3, r3, #1
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	0019      	movs	r1, r3
 8005f2e:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <draw_string_centre_align+0xf4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	889b      	ldrh	r3, [r3, #4]
 8005f34:	434b      	muls	r3, r1
 8005f36:	429a      	cmp	r2, r3
 8005f38:	dd10      	ble.n	8005f5c <draw_string_centre_align+0x80>
		count_x=x_value-(size/2)*pFont->Width;
 8005f3a:	2316      	movs	r3, #22
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <draw_string_centre_align+0xf4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	889b      	ldrh	r3, [r3, #4]
 8005f4a:	4353      	muls	r3, r2
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	2312      	movs	r3, #18
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	1db9      	adds	r1, r7, #6
 8005f54:	8809      	ldrh	r1, [r1, #0]
 8005f56:	1a8a      	subs	r2, r1, r2
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	e01f      	b.n	8005f9c <draw_string_centre_align+0xc0>
	}
	else count_x=1;
 8005f5c:	2312      	movs	r3, #18
 8005f5e:	18fb      	adds	r3, r7, r3
 8005f60:	2201      	movs	r2, #1
 8005f62:	801a      	strh	r2, [r3, #0]

	while ((*text != 0) &  CHAR_NOT_WITHOUT_FOR_SCREEN){
 8005f64:	e01a      	b.n	8005f9c <draw_string_centre_align+0xc0>
		draw_char(count_x, y_value, *text);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	1d3b      	adds	r3, r7, #4
 8005f6c:	8819      	ldrh	r1, [r3, #0]
 8005f6e:	2412      	movs	r4, #18
 8005f70:	193b      	adds	r3, r7, r4
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f7ff fd83 	bl	8005a80 <draw_char>
		count_x += pFont->Width;
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <draw_string_centre_align+0xf4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	8899      	ldrh	r1, [r3, #4]
 8005f80:	193b      	adds	r3, r7, r4
 8005f82:	193a      	adds	r2, r7, r4
 8005f84:	8812      	ldrh	r2, [r2, #0]
 8005f86:	188a      	adds	r2, r1, r2
 8005f88:	801a      	strh	r2, [r3, #0]
		text++;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	603b      	str	r3, [r7, #0]
		num_ch++;
 8005f90:	2114      	movs	r1, #20
 8005f92:	187b      	adds	r3, r7, r1
 8005f94:	881a      	ldrh	r2, [r3, #0]
 8005f96:	187b      	adds	r3, r7, r1
 8005f98:	3201      	adds	r2, #1
 8005f9a:	801a      	strh	r2, [r3, #0]
	while ((*text != 0) &  CHAR_NOT_WITHOUT_FOR_SCREEN){
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	1e5a      	subs	r2, r3, #1
 8005fa2:	4193      	sbcs	r3, r2
 8005fa4:	b2d9      	uxtb	r1, r3
 8005fa6:	1dbb      	adds	r3, r7, #6
 8005fa8:	881a      	ldrh	r2, [r3, #0]
 8005faa:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <draw_string_centre_align+0xf4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	889b      	ldrh	r3, [r3, #4]
 8005fb0:	18d3      	adds	r3, r2, r3
 8005fb2:	22ac      	movs	r2, #172	; 0xac
 8005fb4:	0fdc      	lsrs	r4, r3, #31
 8005fb6:	17d0      	asrs	r0, r2, #31
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	4144      	adcs	r4, r0
 8005fbc:	0023      	movs	r3, r4
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	400b      	ands	r3, r1
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1ce      	bne.n	8005f66 <draw_string_centre_align+0x8a>
	}
}
 8005fc8:	46c0      	nop			; (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b007      	add	sp, #28
 8005fce:	bd90      	pop	{r4, r7, pc}
 8005fd0:	20000044 	.word	0x20000044

08005fd4 <display_screen>:
extern EPD_DrvTypeDef gde021a1_drv;

#define EPD_BUSY_PIN GPIO_PIN_8
#define EPD_BUSY_GPIO_PORT GPIOA

void display_screen (void)  {
 8005fd4:	b590      	push	{r4, r7, lr}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
  gde021a1_drv.SetDisplayWindow(0, 0, 171, 17);
 8005fda:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <display_screen+0x7c>)
 8005fdc:	689c      	ldr	r4, [r3, #8]
 8005fde:	2311      	movs	r3, #17
 8005fe0:	22ab      	movs	r2, #171	; 0xab
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	47a0      	blx	r4

  for(uint32_t index = 0; index < 3096; index++)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	607b      	str	r3, [r7, #4]
 8005fec:	e00a      	b.n	8006004 <display_screen+0x30>
  {
	  gde021a1_drv.WritePixel(screen_paper_memory[index]);
 8005fee:	4b18      	ldr	r3, [pc, #96]	; (8006050 <display_screen+0x7c>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	4918      	ldr	r1, [pc, #96]	; (8006054 <display_screen+0x80>)
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	188a      	adds	r2, r1, r2
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	0010      	movs	r0, r2
 8005ffc:	4798      	blx	r3
  for(uint32_t index = 0; index < 3096; index++)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3301      	adds	r3, #1
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a14      	ldr	r2, [pc, #80]	; (8006058 <display_screen+0x84>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d9f0      	bls.n	8005fee <display_screen+0x1a>
  }

  gde021a1_drv.RefreshDisplay();
 800600c:	4b10      	ldr	r3, [pc, #64]	; (8006050 <display_screen+0x7c>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4798      	blx	r3
  while (HAL_GPIO_ReadPin(EPD_BUSY_GPIO_PORT, EPD_BUSY_PIN) != (uint16_t)RESET);
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	2380      	movs	r3, #128	; 0x80
 8006016:	005a      	lsls	r2, r3, #1
 8006018:	23a0      	movs	r3, #160	; 0xa0
 800601a:	05db      	lsls	r3, r3, #23
 800601c:	0011      	movs	r1, r2
 800601e:	0018      	movs	r0, r3
 8006020:	f7fd f928 	bl	8003274 <HAL_GPIO_ReadPin>
 8006024:	1e03      	subs	r3, r0, #0
 8006026:	d1f5      	bne.n	8006014 <display_screen+0x40>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <display_screen+0x88>)
 800602a:	2201      	movs	r2, #1
 800602c:	2104      	movs	r1, #4
 800602e:	0018      	movs	r0, r3
 8006030:	f7fd f93d 	bl	80032ae <HAL_GPIO_WritePin>
  for (uint32_t i=0; i<100000; i++);
 8006034:	2300      	movs	r3, #0
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	e002      	b.n	8006040 <display_screen+0x6c>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	3301      	adds	r3, #1
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	4a07      	ldr	r2, [pc, #28]	; (8006060 <display_screen+0x8c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d9f8      	bls.n	800603a <display_screen+0x66>
}
 8006048:	46c0      	nop			; (mov r8, r8)
 800604a:	46bd      	mov	sp, r7
 800604c:	b003      	add	sp, #12
 800604e:	bd90      	pop	{r4, r7, pc}
 8006050:	20000004 	.word	0x20000004
 8006054:	20000274 	.word	0x20000274
 8006058:	00000c17 	.word	0x00000c17
 800605c:	50000400 	.word	0x50000400
 8006060:	0001869f 	.word	0x0001869f

08006064 <__errno>:
 8006064:	4b01      	ldr	r3, [pc, #4]	; (800606c <__errno+0x8>)
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	4770      	bx	lr
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	20000194 	.word	0x20000194

08006070 <__libc_init_array>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	2600      	movs	r6, #0
 8006074:	4d0c      	ldr	r5, [pc, #48]	; (80060a8 <__libc_init_array+0x38>)
 8006076:	4c0d      	ldr	r4, [pc, #52]	; (80060ac <__libc_init_array+0x3c>)
 8006078:	1b64      	subs	r4, r4, r5
 800607a:	10a4      	asrs	r4, r4, #2
 800607c:	42a6      	cmp	r6, r4
 800607e:	d109      	bne.n	8006094 <__libc_init_array+0x24>
 8006080:	2600      	movs	r6, #0
 8006082:	f000 fc29 	bl	80068d8 <_init>
 8006086:	4d0a      	ldr	r5, [pc, #40]	; (80060b0 <__libc_init_array+0x40>)
 8006088:	4c0a      	ldr	r4, [pc, #40]	; (80060b4 <__libc_init_array+0x44>)
 800608a:	1b64      	subs	r4, r4, r5
 800608c:	10a4      	asrs	r4, r4, #2
 800608e:	42a6      	cmp	r6, r4
 8006090:	d105      	bne.n	800609e <__libc_init_array+0x2e>
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	00b3      	lsls	r3, r6, #2
 8006096:	58eb      	ldr	r3, [r5, r3]
 8006098:	4798      	blx	r3
 800609a:	3601      	adds	r6, #1
 800609c:	e7ee      	b.n	800607c <__libc_init_array+0xc>
 800609e:	00b3      	lsls	r3, r6, #2
 80060a0:	58eb      	ldr	r3, [r5, r3]
 80060a2:	4798      	blx	r3
 80060a4:	3601      	adds	r6, #1
 80060a6:	e7f2      	b.n	800608e <__libc_init_array+0x1e>
 80060a8:	0800a040 	.word	0x0800a040
 80060ac:	0800a040 	.word	0x0800a040
 80060b0:	0800a040 	.word	0x0800a040
 80060b4:	0800a044 	.word	0x0800a044

080060b8 <memset>:
 80060b8:	0003      	movs	r3, r0
 80060ba:	1812      	adds	r2, r2, r0
 80060bc:	4293      	cmp	r3, r2
 80060be:	d100      	bne.n	80060c2 <memset+0xa>
 80060c0:	4770      	bx	lr
 80060c2:	7019      	strb	r1, [r3, #0]
 80060c4:	3301      	adds	r3, #1
 80060c6:	e7f9      	b.n	80060bc <memset+0x4>

080060c8 <siprintf>:
 80060c8:	b40e      	push	{r1, r2, r3}
 80060ca:	b500      	push	{lr}
 80060cc:	490b      	ldr	r1, [pc, #44]	; (80060fc <siprintf+0x34>)
 80060ce:	b09c      	sub	sp, #112	; 0x70
 80060d0:	ab1d      	add	r3, sp, #116	; 0x74
 80060d2:	9002      	str	r0, [sp, #8]
 80060d4:	9006      	str	r0, [sp, #24]
 80060d6:	9107      	str	r1, [sp, #28]
 80060d8:	9104      	str	r1, [sp, #16]
 80060da:	4809      	ldr	r0, [pc, #36]	; (8006100 <siprintf+0x38>)
 80060dc:	4909      	ldr	r1, [pc, #36]	; (8006104 <siprintf+0x3c>)
 80060de:	cb04      	ldmia	r3!, {r2}
 80060e0:	9105      	str	r1, [sp, #20]
 80060e2:	6800      	ldr	r0, [r0, #0]
 80060e4:	a902      	add	r1, sp, #8
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	f000 f870 	bl	80061cc <_svfiprintf_r>
 80060ec:	2300      	movs	r3, #0
 80060ee:	9a02      	ldr	r2, [sp, #8]
 80060f0:	7013      	strb	r3, [r2, #0]
 80060f2:	b01c      	add	sp, #112	; 0x70
 80060f4:	bc08      	pop	{r3}
 80060f6:	b003      	add	sp, #12
 80060f8:	4718      	bx	r3
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	7fffffff 	.word	0x7fffffff
 8006100:	20000194 	.word	0x20000194
 8006104:	ffff0208 	.word	0xffff0208

08006108 <__ssputs_r>:
 8006108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610a:	688e      	ldr	r6, [r1, #8]
 800610c:	b085      	sub	sp, #20
 800610e:	0007      	movs	r7, r0
 8006110:	000c      	movs	r4, r1
 8006112:	9203      	str	r2, [sp, #12]
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	429e      	cmp	r6, r3
 8006118:	d83c      	bhi.n	8006194 <__ssputs_r+0x8c>
 800611a:	2390      	movs	r3, #144	; 0x90
 800611c:	898a      	ldrh	r2, [r1, #12]
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	421a      	tst	r2, r3
 8006122:	d034      	beq.n	800618e <__ssputs_r+0x86>
 8006124:	2503      	movs	r5, #3
 8006126:	6909      	ldr	r1, [r1, #16]
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	1a5b      	subs	r3, r3, r1
 800612c:	9302      	str	r3, [sp, #8]
 800612e:	6963      	ldr	r3, [r4, #20]
 8006130:	9802      	ldr	r0, [sp, #8]
 8006132:	435d      	muls	r5, r3
 8006134:	0feb      	lsrs	r3, r5, #31
 8006136:	195d      	adds	r5, r3, r5
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	106d      	asrs	r5, r5, #1
 800613c:	3301      	adds	r3, #1
 800613e:	181b      	adds	r3, r3, r0
 8006140:	42ab      	cmp	r3, r5
 8006142:	d900      	bls.n	8006146 <__ssputs_r+0x3e>
 8006144:	001d      	movs	r5, r3
 8006146:	0553      	lsls	r3, r2, #21
 8006148:	d532      	bpl.n	80061b0 <__ssputs_r+0xa8>
 800614a:	0029      	movs	r1, r5
 800614c:	0038      	movs	r0, r7
 800614e:	f000 fb23 	bl	8006798 <_malloc_r>
 8006152:	1e06      	subs	r6, r0, #0
 8006154:	d109      	bne.n	800616a <__ssputs_r+0x62>
 8006156:	230c      	movs	r3, #12
 8006158:	603b      	str	r3, [r7, #0]
 800615a:	2340      	movs	r3, #64	; 0x40
 800615c:	2001      	movs	r0, #1
 800615e:	89a2      	ldrh	r2, [r4, #12]
 8006160:	4240      	negs	r0, r0
 8006162:	4313      	orrs	r3, r2
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	b005      	add	sp, #20
 8006168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616a:	9a02      	ldr	r2, [sp, #8]
 800616c:	6921      	ldr	r1, [r4, #16]
 800616e:	f000 faac 	bl	80066ca <memcpy>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <__ssputs_r+0xc0>)
 8006176:	401a      	ands	r2, r3
 8006178:	2380      	movs	r3, #128	; 0x80
 800617a:	4313      	orrs	r3, r2
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	9b02      	ldr	r3, [sp, #8]
 8006180:	6126      	str	r6, [r4, #16]
 8006182:	18f6      	adds	r6, r6, r3
 8006184:	6026      	str	r6, [r4, #0]
 8006186:	6165      	str	r5, [r4, #20]
 8006188:	9e01      	ldr	r6, [sp, #4]
 800618a:	1aed      	subs	r5, r5, r3
 800618c:	60a5      	str	r5, [r4, #8]
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	429e      	cmp	r6, r3
 8006192:	d900      	bls.n	8006196 <__ssputs_r+0x8e>
 8006194:	9e01      	ldr	r6, [sp, #4]
 8006196:	0032      	movs	r2, r6
 8006198:	9903      	ldr	r1, [sp, #12]
 800619a:	6820      	ldr	r0, [r4, #0]
 800619c:	f000 fa9e 	bl	80066dc <memmove>
 80061a0:	68a3      	ldr	r3, [r4, #8]
 80061a2:	2000      	movs	r0, #0
 80061a4:	1b9b      	subs	r3, r3, r6
 80061a6:	60a3      	str	r3, [r4, #8]
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	199e      	adds	r6, r3, r6
 80061ac:	6026      	str	r6, [r4, #0]
 80061ae:	e7da      	b.n	8006166 <__ssputs_r+0x5e>
 80061b0:	002a      	movs	r2, r5
 80061b2:	0038      	movs	r0, r7
 80061b4:	f000 fb4e 	bl	8006854 <_realloc_r>
 80061b8:	1e06      	subs	r6, r0, #0
 80061ba:	d1e0      	bne.n	800617e <__ssputs_r+0x76>
 80061bc:	6921      	ldr	r1, [r4, #16]
 80061be:	0038      	movs	r0, r7
 80061c0:	f000 faa0 	bl	8006704 <_free_r>
 80061c4:	e7c7      	b.n	8006156 <__ssputs_r+0x4e>
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	fffffb7f 	.word	0xfffffb7f

080061cc <_svfiprintf_r>:
 80061cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ce:	b0a1      	sub	sp, #132	; 0x84
 80061d0:	9003      	str	r0, [sp, #12]
 80061d2:	001d      	movs	r5, r3
 80061d4:	898b      	ldrh	r3, [r1, #12]
 80061d6:	000f      	movs	r7, r1
 80061d8:	0016      	movs	r6, r2
 80061da:	061b      	lsls	r3, r3, #24
 80061dc:	d511      	bpl.n	8006202 <_svfiprintf_r+0x36>
 80061de:	690b      	ldr	r3, [r1, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10e      	bne.n	8006202 <_svfiprintf_r+0x36>
 80061e4:	2140      	movs	r1, #64	; 0x40
 80061e6:	f000 fad7 	bl	8006798 <_malloc_r>
 80061ea:	6038      	str	r0, [r7, #0]
 80061ec:	6138      	str	r0, [r7, #16]
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d105      	bne.n	80061fe <_svfiprintf_r+0x32>
 80061f2:	230c      	movs	r3, #12
 80061f4:	9a03      	ldr	r2, [sp, #12]
 80061f6:	3801      	subs	r0, #1
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	b021      	add	sp, #132	; 0x84
 80061fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061fe:	2340      	movs	r3, #64	; 0x40
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	2300      	movs	r3, #0
 8006204:	ac08      	add	r4, sp, #32
 8006206:	6163      	str	r3, [r4, #20]
 8006208:	3320      	adds	r3, #32
 800620a:	7663      	strb	r3, [r4, #25]
 800620c:	3310      	adds	r3, #16
 800620e:	76a3      	strb	r3, [r4, #26]
 8006210:	9507      	str	r5, [sp, #28]
 8006212:	0035      	movs	r5, r6
 8006214:	782b      	ldrb	r3, [r5, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <_svfiprintf_r+0x52>
 800621a:	2b25      	cmp	r3, #37	; 0x25
 800621c:	d146      	bne.n	80062ac <_svfiprintf_r+0xe0>
 800621e:	1bab      	subs	r3, r5, r6
 8006220:	9305      	str	r3, [sp, #20]
 8006222:	d00c      	beq.n	800623e <_svfiprintf_r+0x72>
 8006224:	0032      	movs	r2, r6
 8006226:	0039      	movs	r1, r7
 8006228:	9803      	ldr	r0, [sp, #12]
 800622a:	f7ff ff6d 	bl	8006108 <__ssputs_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d100      	bne.n	8006234 <_svfiprintf_r+0x68>
 8006232:	e0ae      	b.n	8006392 <_svfiprintf_r+0x1c6>
 8006234:	6962      	ldr	r2, [r4, #20]
 8006236:	9b05      	ldr	r3, [sp, #20]
 8006238:	4694      	mov	ip, r2
 800623a:	4463      	add	r3, ip
 800623c:	6163      	str	r3, [r4, #20]
 800623e:	782b      	ldrb	r3, [r5, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d100      	bne.n	8006246 <_svfiprintf_r+0x7a>
 8006244:	e0a5      	b.n	8006392 <_svfiprintf_r+0x1c6>
 8006246:	2201      	movs	r2, #1
 8006248:	2300      	movs	r3, #0
 800624a:	4252      	negs	r2, r2
 800624c:	6062      	str	r2, [r4, #4]
 800624e:	a904      	add	r1, sp, #16
 8006250:	3254      	adds	r2, #84	; 0x54
 8006252:	1852      	adds	r2, r2, r1
 8006254:	1c6e      	adds	r6, r5, #1
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	60e3      	str	r3, [r4, #12]
 800625a:	60a3      	str	r3, [r4, #8]
 800625c:	7013      	strb	r3, [r2, #0]
 800625e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006260:	7831      	ldrb	r1, [r6, #0]
 8006262:	2205      	movs	r2, #5
 8006264:	4853      	ldr	r0, [pc, #332]	; (80063b4 <_svfiprintf_r+0x1e8>)
 8006266:	f000 fa25 	bl	80066b4 <memchr>
 800626a:	1c75      	adds	r5, r6, #1
 800626c:	2800      	cmp	r0, #0
 800626e:	d11f      	bne.n	80062b0 <_svfiprintf_r+0xe4>
 8006270:	6822      	ldr	r2, [r4, #0]
 8006272:	06d3      	lsls	r3, r2, #27
 8006274:	d504      	bpl.n	8006280 <_svfiprintf_r+0xb4>
 8006276:	2353      	movs	r3, #83	; 0x53
 8006278:	a904      	add	r1, sp, #16
 800627a:	185b      	adds	r3, r3, r1
 800627c:	2120      	movs	r1, #32
 800627e:	7019      	strb	r1, [r3, #0]
 8006280:	0713      	lsls	r3, r2, #28
 8006282:	d504      	bpl.n	800628e <_svfiprintf_r+0xc2>
 8006284:	2353      	movs	r3, #83	; 0x53
 8006286:	a904      	add	r1, sp, #16
 8006288:	185b      	adds	r3, r3, r1
 800628a:	212b      	movs	r1, #43	; 0x2b
 800628c:	7019      	strb	r1, [r3, #0]
 800628e:	7833      	ldrb	r3, [r6, #0]
 8006290:	2b2a      	cmp	r3, #42	; 0x2a
 8006292:	d016      	beq.n	80062c2 <_svfiprintf_r+0xf6>
 8006294:	0035      	movs	r5, r6
 8006296:	2100      	movs	r1, #0
 8006298:	200a      	movs	r0, #10
 800629a:	68e3      	ldr	r3, [r4, #12]
 800629c:	782a      	ldrb	r2, [r5, #0]
 800629e:	1c6e      	adds	r6, r5, #1
 80062a0:	3a30      	subs	r2, #48	; 0x30
 80062a2:	2a09      	cmp	r2, #9
 80062a4:	d94e      	bls.n	8006344 <_svfiprintf_r+0x178>
 80062a6:	2900      	cmp	r1, #0
 80062a8:	d018      	beq.n	80062dc <_svfiprintf_r+0x110>
 80062aa:	e010      	b.n	80062ce <_svfiprintf_r+0x102>
 80062ac:	3501      	adds	r5, #1
 80062ae:	e7b1      	b.n	8006214 <_svfiprintf_r+0x48>
 80062b0:	4b40      	ldr	r3, [pc, #256]	; (80063b4 <_svfiprintf_r+0x1e8>)
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	1ac0      	subs	r0, r0, r3
 80062b6:	2301      	movs	r3, #1
 80062b8:	4083      	lsls	r3, r0
 80062ba:	4313      	orrs	r3, r2
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	002e      	movs	r6, r5
 80062c0:	e7ce      	b.n	8006260 <_svfiprintf_r+0x94>
 80062c2:	9b07      	ldr	r3, [sp, #28]
 80062c4:	1d19      	adds	r1, r3, #4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	9107      	str	r1, [sp, #28]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	db01      	blt.n	80062d2 <_svfiprintf_r+0x106>
 80062ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80062d0:	e004      	b.n	80062dc <_svfiprintf_r+0x110>
 80062d2:	425b      	negs	r3, r3
 80062d4:	60e3      	str	r3, [r4, #12]
 80062d6:	2302      	movs	r3, #2
 80062d8:	4313      	orrs	r3, r2
 80062da:	6023      	str	r3, [r4, #0]
 80062dc:	782b      	ldrb	r3, [r5, #0]
 80062de:	2b2e      	cmp	r3, #46	; 0x2e
 80062e0:	d10a      	bne.n	80062f8 <_svfiprintf_r+0x12c>
 80062e2:	786b      	ldrb	r3, [r5, #1]
 80062e4:	2b2a      	cmp	r3, #42	; 0x2a
 80062e6:	d135      	bne.n	8006354 <_svfiprintf_r+0x188>
 80062e8:	9b07      	ldr	r3, [sp, #28]
 80062ea:	3502      	adds	r5, #2
 80062ec:	1d1a      	adds	r2, r3, #4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	9207      	str	r2, [sp, #28]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	db2b      	blt.n	800634e <_svfiprintf_r+0x182>
 80062f6:	9309      	str	r3, [sp, #36]	; 0x24
 80062f8:	4e2f      	ldr	r6, [pc, #188]	; (80063b8 <_svfiprintf_r+0x1ec>)
 80062fa:	7829      	ldrb	r1, [r5, #0]
 80062fc:	2203      	movs	r2, #3
 80062fe:	0030      	movs	r0, r6
 8006300:	f000 f9d8 	bl	80066b4 <memchr>
 8006304:	2800      	cmp	r0, #0
 8006306:	d006      	beq.n	8006316 <_svfiprintf_r+0x14a>
 8006308:	2340      	movs	r3, #64	; 0x40
 800630a:	1b80      	subs	r0, r0, r6
 800630c:	4083      	lsls	r3, r0
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	3501      	adds	r5, #1
 8006312:	4313      	orrs	r3, r2
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	7829      	ldrb	r1, [r5, #0]
 8006318:	2206      	movs	r2, #6
 800631a:	4828      	ldr	r0, [pc, #160]	; (80063bc <_svfiprintf_r+0x1f0>)
 800631c:	1c6e      	adds	r6, r5, #1
 800631e:	7621      	strb	r1, [r4, #24]
 8006320:	f000 f9c8 	bl	80066b4 <memchr>
 8006324:	2800      	cmp	r0, #0
 8006326:	d03c      	beq.n	80063a2 <_svfiprintf_r+0x1d6>
 8006328:	4b25      	ldr	r3, [pc, #148]	; (80063c0 <_svfiprintf_r+0x1f4>)
 800632a:	2b00      	cmp	r3, #0
 800632c:	d125      	bne.n	800637a <_svfiprintf_r+0x1ae>
 800632e:	2207      	movs	r2, #7
 8006330:	9b07      	ldr	r3, [sp, #28]
 8006332:	3307      	adds	r3, #7
 8006334:	4393      	bics	r3, r2
 8006336:	3308      	adds	r3, #8
 8006338:	9307      	str	r3, [sp, #28]
 800633a:	6963      	ldr	r3, [r4, #20]
 800633c:	9a04      	ldr	r2, [sp, #16]
 800633e:	189b      	adds	r3, r3, r2
 8006340:	6163      	str	r3, [r4, #20]
 8006342:	e766      	b.n	8006212 <_svfiprintf_r+0x46>
 8006344:	4343      	muls	r3, r0
 8006346:	2101      	movs	r1, #1
 8006348:	189b      	adds	r3, r3, r2
 800634a:	0035      	movs	r5, r6
 800634c:	e7a6      	b.n	800629c <_svfiprintf_r+0xd0>
 800634e:	2301      	movs	r3, #1
 8006350:	425b      	negs	r3, r3
 8006352:	e7d0      	b.n	80062f6 <_svfiprintf_r+0x12a>
 8006354:	2300      	movs	r3, #0
 8006356:	200a      	movs	r0, #10
 8006358:	001a      	movs	r2, r3
 800635a:	3501      	adds	r5, #1
 800635c:	6063      	str	r3, [r4, #4]
 800635e:	7829      	ldrb	r1, [r5, #0]
 8006360:	1c6e      	adds	r6, r5, #1
 8006362:	3930      	subs	r1, #48	; 0x30
 8006364:	2909      	cmp	r1, #9
 8006366:	d903      	bls.n	8006370 <_svfiprintf_r+0x1a4>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0c5      	beq.n	80062f8 <_svfiprintf_r+0x12c>
 800636c:	9209      	str	r2, [sp, #36]	; 0x24
 800636e:	e7c3      	b.n	80062f8 <_svfiprintf_r+0x12c>
 8006370:	4342      	muls	r2, r0
 8006372:	2301      	movs	r3, #1
 8006374:	1852      	adds	r2, r2, r1
 8006376:	0035      	movs	r5, r6
 8006378:	e7f1      	b.n	800635e <_svfiprintf_r+0x192>
 800637a:	ab07      	add	r3, sp, #28
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	003a      	movs	r2, r7
 8006380:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <_svfiprintf_r+0x1f8>)
 8006382:	0021      	movs	r1, r4
 8006384:	9803      	ldr	r0, [sp, #12]
 8006386:	e000      	b.n	800638a <_svfiprintf_r+0x1be>
 8006388:	bf00      	nop
 800638a:	9004      	str	r0, [sp, #16]
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	3301      	adds	r3, #1
 8006390:	d1d3      	bne.n	800633a <_svfiprintf_r+0x16e>
 8006392:	89bb      	ldrh	r3, [r7, #12]
 8006394:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006396:	065b      	lsls	r3, r3, #25
 8006398:	d400      	bmi.n	800639c <_svfiprintf_r+0x1d0>
 800639a:	e72e      	b.n	80061fa <_svfiprintf_r+0x2e>
 800639c:	2001      	movs	r0, #1
 800639e:	4240      	negs	r0, r0
 80063a0:	e72b      	b.n	80061fa <_svfiprintf_r+0x2e>
 80063a2:	ab07      	add	r3, sp, #28
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	003a      	movs	r2, r7
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <_svfiprintf_r+0x1f8>)
 80063aa:	0021      	movs	r1, r4
 80063ac:	9803      	ldr	r0, [sp, #12]
 80063ae:	f000 f879 	bl	80064a4 <_printf_i>
 80063b2:	e7ea      	b.n	800638a <_svfiprintf_r+0x1be>
 80063b4:	0800a002 	.word	0x0800a002
 80063b8:	0800a008 	.word	0x0800a008
 80063bc:	0800a00c 	.word	0x0800a00c
 80063c0:	00000000 	.word	0x00000000
 80063c4:	08006109 	.word	0x08006109

080063c8 <_printf_common>:
 80063c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ca:	0015      	movs	r5, r2
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	688a      	ldr	r2, [r1, #8]
 80063d0:	690b      	ldr	r3, [r1, #16]
 80063d2:	9000      	str	r0, [sp, #0]
 80063d4:	000c      	movs	r4, r1
 80063d6:	4293      	cmp	r3, r2
 80063d8:	da00      	bge.n	80063dc <_printf_common+0x14>
 80063da:	0013      	movs	r3, r2
 80063dc:	0022      	movs	r2, r4
 80063de:	602b      	str	r3, [r5, #0]
 80063e0:	3243      	adds	r2, #67	; 0x43
 80063e2:	7812      	ldrb	r2, [r2, #0]
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	d001      	beq.n	80063ec <_printf_common+0x24>
 80063e8:	3301      	adds	r3, #1
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	069b      	lsls	r3, r3, #26
 80063f0:	d502      	bpl.n	80063f8 <_printf_common+0x30>
 80063f2:	682b      	ldr	r3, [r5, #0]
 80063f4:	3302      	adds	r3, #2
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	2706      	movs	r7, #6
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	401f      	ands	r7, r3
 80063fe:	d027      	beq.n	8006450 <_printf_common+0x88>
 8006400:	0023      	movs	r3, r4
 8006402:	3343      	adds	r3, #67	; 0x43
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	1e5a      	subs	r2, r3, #1
 8006408:	4193      	sbcs	r3, r2
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	0692      	lsls	r2, r2, #26
 800640e:	d430      	bmi.n	8006472 <_printf_common+0xaa>
 8006410:	0022      	movs	r2, r4
 8006412:	9901      	ldr	r1, [sp, #4]
 8006414:	3243      	adds	r2, #67	; 0x43
 8006416:	9800      	ldr	r0, [sp, #0]
 8006418:	9e08      	ldr	r6, [sp, #32]
 800641a:	47b0      	blx	r6
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d025      	beq.n	800646c <_printf_common+0xa4>
 8006420:	2306      	movs	r3, #6
 8006422:	6820      	ldr	r0, [r4, #0]
 8006424:	682a      	ldr	r2, [r5, #0]
 8006426:	68e1      	ldr	r1, [r4, #12]
 8006428:	4003      	ands	r3, r0
 800642a:	2500      	movs	r5, #0
 800642c:	2b04      	cmp	r3, #4
 800642e:	d103      	bne.n	8006438 <_printf_common+0x70>
 8006430:	1a8d      	subs	r5, r1, r2
 8006432:	43eb      	mvns	r3, r5
 8006434:	17db      	asrs	r3, r3, #31
 8006436:	401d      	ands	r5, r3
 8006438:	68a3      	ldr	r3, [r4, #8]
 800643a:	6922      	ldr	r2, [r4, #16]
 800643c:	4293      	cmp	r3, r2
 800643e:	dd01      	ble.n	8006444 <_printf_common+0x7c>
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	18ed      	adds	r5, r5, r3
 8006444:	2700      	movs	r7, #0
 8006446:	42bd      	cmp	r5, r7
 8006448:	d120      	bne.n	800648c <_printf_common+0xc4>
 800644a:	2000      	movs	r0, #0
 800644c:	e010      	b.n	8006470 <_printf_common+0xa8>
 800644e:	3701      	adds	r7, #1
 8006450:	68e3      	ldr	r3, [r4, #12]
 8006452:	682a      	ldr	r2, [r5, #0]
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	42bb      	cmp	r3, r7
 8006458:	ddd2      	ble.n	8006400 <_printf_common+0x38>
 800645a:	0022      	movs	r2, r4
 800645c:	2301      	movs	r3, #1
 800645e:	3219      	adds	r2, #25
 8006460:	9901      	ldr	r1, [sp, #4]
 8006462:	9800      	ldr	r0, [sp, #0]
 8006464:	9e08      	ldr	r6, [sp, #32]
 8006466:	47b0      	blx	r6
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d1f0      	bne.n	800644e <_printf_common+0x86>
 800646c:	2001      	movs	r0, #1
 800646e:	4240      	negs	r0, r0
 8006470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006472:	2030      	movs	r0, #48	; 0x30
 8006474:	18e1      	adds	r1, r4, r3
 8006476:	3143      	adds	r1, #67	; 0x43
 8006478:	7008      	strb	r0, [r1, #0]
 800647a:	0021      	movs	r1, r4
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	3145      	adds	r1, #69	; 0x45
 8006480:	7809      	ldrb	r1, [r1, #0]
 8006482:	18a2      	adds	r2, r4, r2
 8006484:	3243      	adds	r2, #67	; 0x43
 8006486:	3302      	adds	r3, #2
 8006488:	7011      	strb	r1, [r2, #0]
 800648a:	e7c1      	b.n	8006410 <_printf_common+0x48>
 800648c:	0022      	movs	r2, r4
 800648e:	2301      	movs	r3, #1
 8006490:	321a      	adds	r2, #26
 8006492:	9901      	ldr	r1, [sp, #4]
 8006494:	9800      	ldr	r0, [sp, #0]
 8006496:	9e08      	ldr	r6, [sp, #32]
 8006498:	47b0      	blx	r6
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	d0e6      	beq.n	800646c <_printf_common+0xa4>
 800649e:	3701      	adds	r7, #1
 80064a0:	e7d1      	b.n	8006446 <_printf_common+0x7e>
	...

080064a4 <_printf_i>:
 80064a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a6:	b089      	sub	sp, #36	; 0x24
 80064a8:	9204      	str	r2, [sp, #16]
 80064aa:	000a      	movs	r2, r1
 80064ac:	3243      	adds	r2, #67	; 0x43
 80064ae:	9305      	str	r3, [sp, #20]
 80064b0:	9003      	str	r0, [sp, #12]
 80064b2:	9202      	str	r2, [sp, #8]
 80064b4:	7e0a      	ldrb	r2, [r1, #24]
 80064b6:	000c      	movs	r4, r1
 80064b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ba:	2a6e      	cmp	r2, #110	; 0x6e
 80064bc:	d100      	bne.n	80064c0 <_printf_i+0x1c>
 80064be:	e086      	b.n	80065ce <_printf_i+0x12a>
 80064c0:	d81f      	bhi.n	8006502 <_printf_i+0x5e>
 80064c2:	2a63      	cmp	r2, #99	; 0x63
 80064c4:	d033      	beq.n	800652e <_printf_i+0x8a>
 80064c6:	d808      	bhi.n	80064da <_printf_i+0x36>
 80064c8:	2a00      	cmp	r2, #0
 80064ca:	d100      	bne.n	80064ce <_printf_i+0x2a>
 80064cc:	e08c      	b.n	80065e8 <_printf_i+0x144>
 80064ce:	2a58      	cmp	r2, #88	; 0x58
 80064d0:	d04d      	beq.n	800656e <_printf_i+0xca>
 80064d2:	0025      	movs	r5, r4
 80064d4:	3542      	adds	r5, #66	; 0x42
 80064d6:	702a      	strb	r2, [r5, #0]
 80064d8:	e030      	b.n	800653c <_printf_i+0x98>
 80064da:	2a64      	cmp	r2, #100	; 0x64
 80064dc:	d001      	beq.n	80064e2 <_printf_i+0x3e>
 80064de:	2a69      	cmp	r2, #105	; 0x69
 80064e0:	d1f7      	bne.n	80064d2 <_printf_i+0x2e>
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	6825      	ldr	r5, [r4, #0]
 80064e6:	1d0a      	adds	r2, r1, #4
 80064e8:	0628      	lsls	r0, r5, #24
 80064ea:	d529      	bpl.n	8006540 <_printf_i+0x9c>
 80064ec:	6808      	ldr	r0, [r1, #0]
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	2800      	cmp	r0, #0
 80064f2:	da03      	bge.n	80064fc <_printf_i+0x58>
 80064f4:	232d      	movs	r3, #45	; 0x2d
 80064f6:	9a02      	ldr	r2, [sp, #8]
 80064f8:	4240      	negs	r0, r0
 80064fa:	7013      	strb	r3, [r2, #0]
 80064fc:	4e6b      	ldr	r6, [pc, #428]	; (80066ac <_printf_i+0x208>)
 80064fe:	270a      	movs	r7, #10
 8006500:	e04f      	b.n	80065a2 <_printf_i+0xfe>
 8006502:	2a73      	cmp	r2, #115	; 0x73
 8006504:	d074      	beq.n	80065f0 <_printf_i+0x14c>
 8006506:	d808      	bhi.n	800651a <_printf_i+0x76>
 8006508:	2a6f      	cmp	r2, #111	; 0x6f
 800650a:	d01f      	beq.n	800654c <_printf_i+0xa8>
 800650c:	2a70      	cmp	r2, #112	; 0x70
 800650e:	d1e0      	bne.n	80064d2 <_printf_i+0x2e>
 8006510:	2220      	movs	r2, #32
 8006512:	6809      	ldr	r1, [r1, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	6022      	str	r2, [r4, #0]
 8006518:	e003      	b.n	8006522 <_printf_i+0x7e>
 800651a:	2a75      	cmp	r2, #117	; 0x75
 800651c:	d016      	beq.n	800654c <_printf_i+0xa8>
 800651e:	2a78      	cmp	r2, #120	; 0x78
 8006520:	d1d7      	bne.n	80064d2 <_printf_i+0x2e>
 8006522:	0022      	movs	r2, r4
 8006524:	2178      	movs	r1, #120	; 0x78
 8006526:	3245      	adds	r2, #69	; 0x45
 8006528:	7011      	strb	r1, [r2, #0]
 800652a:	4e61      	ldr	r6, [pc, #388]	; (80066b0 <_printf_i+0x20c>)
 800652c:	e022      	b.n	8006574 <_printf_i+0xd0>
 800652e:	0025      	movs	r5, r4
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	3542      	adds	r5, #66	; 0x42
 8006534:	1d11      	adds	r1, r2, #4
 8006536:	6019      	str	r1, [r3, #0]
 8006538:	6813      	ldr	r3, [r2, #0]
 800653a:	702b      	strb	r3, [r5, #0]
 800653c:	2301      	movs	r3, #1
 800653e:	e065      	b.n	800660c <_printf_i+0x168>
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	0669      	lsls	r1, r5, #25
 8006546:	d5d3      	bpl.n	80064f0 <_printf_i+0x4c>
 8006548:	b200      	sxth	r0, r0
 800654a:	e7d1      	b.n	80064f0 <_printf_i+0x4c>
 800654c:	6819      	ldr	r1, [r3, #0]
 800654e:	6825      	ldr	r5, [r4, #0]
 8006550:	1d08      	adds	r0, r1, #4
 8006552:	6018      	str	r0, [r3, #0]
 8006554:	6808      	ldr	r0, [r1, #0]
 8006556:	062e      	lsls	r6, r5, #24
 8006558:	d505      	bpl.n	8006566 <_printf_i+0xc2>
 800655a:	4e54      	ldr	r6, [pc, #336]	; (80066ac <_printf_i+0x208>)
 800655c:	2708      	movs	r7, #8
 800655e:	2a6f      	cmp	r2, #111	; 0x6f
 8006560:	d01b      	beq.n	800659a <_printf_i+0xf6>
 8006562:	270a      	movs	r7, #10
 8006564:	e019      	b.n	800659a <_printf_i+0xf6>
 8006566:	066d      	lsls	r5, r5, #25
 8006568:	d5f7      	bpl.n	800655a <_printf_i+0xb6>
 800656a:	b280      	uxth	r0, r0
 800656c:	e7f5      	b.n	800655a <_printf_i+0xb6>
 800656e:	3145      	adds	r1, #69	; 0x45
 8006570:	4e4e      	ldr	r6, [pc, #312]	; (80066ac <_printf_i+0x208>)
 8006572:	700a      	strb	r2, [r1, #0]
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	1d01      	adds	r1, r0, #4
 800657a:	6800      	ldr	r0, [r0, #0]
 800657c:	6019      	str	r1, [r3, #0]
 800657e:	0615      	lsls	r5, r2, #24
 8006580:	d521      	bpl.n	80065c6 <_printf_i+0x122>
 8006582:	07d3      	lsls	r3, r2, #31
 8006584:	d502      	bpl.n	800658c <_printf_i+0xe8>
 8006586:	2320      	movs	r3, #32
 8006588:	431a      	orrs	r2, r3
 800658a:	6022      	str	r2, [r4, #0]
 800658c:	2710      	movs	r7, #16
 800658e:	2800      	cmp	r0, #0
 8006590:	d103      	bne.n	800659a <_printf_i+0xf6>
 8006592:	2320      	movs	r3, #32
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	439a      	bics	r2, r3
 8006598:	6022      	str	r2, [r4, #0]
 800659a:	0023      	movs	r3, r4
 800659c:	2200      	movs	r2, #0
 800659e:	3343      	adds	r3, #67	; 0x43
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	6863      	ldr	r3, [r4, #4]
 80065a4:	60a3      	str	r3, [r4, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	db58      	blt.n	800665c <_printf_i+0x1b8>
 80065aa:	2204      	movs	r2, #4
 80065ac:	6821      	ldr	r1, [r4, #0]
 80065ae:	4391      	bics	r1, r2
 80065b0:	6021      	str	r1, [r4, #0]
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d154      	bne.n	8006660 <_printf_i+0x1bc>
 80065b6:	9d02      	ldr	r5, [sp, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d05a      	beq.n	8006672 <_printf_i+0x1ce>
 80065bc:	0025      	movs	r5, r4
 80065be:	7833      	ldrb	r3, [r6, #0]
 80065c0:	3542      	adds	r5, #66	; 0x42
 80065c2:	702b      	strb	r3, [r5, #0]
 80065c4:	e055      	b.n	8006672 <_printf_i+0x1ce>
 80065c6:	0655      	lsls	r5, r2, #25
 80065c8:	d5db      	bpl.n	8006582 <_printf_i+0xde>
 80065ca:	b280      	uxth	r0, r0
 80065cc:	e7d9      	b.n	8006582 <_printf_i+0xde>
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	680d      	ldr	r5, [r1, #0]
 80065d2:	1d10      	adds	r0, r2, #4
 80065d4:	6949      	ldr	r1, [r1, #20]
 80065d6:	6018      	str	r0, [r3, #0]
 80065d8:	6813      	ldr	r3, [r2, #0]
 80065da:	062e      	lsls	r6, r5, #24
 80065dc:	d501      	bpl.n	80065e2 <_printf_i+0x13e>
 80065de:	6019      	str	r1, [r3, #0]
 80065e0:	e002      	b.n	80065e8 <_printf_i+0x144>
 80065e2:	066d      	lsls	r5, r5, #25
 80065e4:	d5fb      	bpl.n	80065de <_printf_i+0x13a>
 80065e6:	8019      	strh	r1, [r3, #0]
 80065e8:	2300      	movs	r3, #0
 80065ea:	9d02      	ldr	r5, [sp, #8]
 80065ec:	6123      	str	r3, [r4, #16]
 80065ee:	e04f      	b.n	8006690 <_printf_i+0x1ec>
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	1d11      	adds	r1, r2, #4
 80065f4:	6019      	str	r1, [r3, #0]
 80065f6:	6815      	ldr	r5, [r2, #0]
 80065f8:	2100      	movs	r1, #0
 80065fa:	6862      	ldr	r2, [r4, #4]
 80065fc:	0028      	movs	r0, r5
 80065fe:	f000 f859 	bl	80066b4 <memchr>
 8006602:	2800      	cmp	r0, #0
 8006604:	d001      	beq.n	800660a <_printf_i+0x166>
 8006606:	1b40      	subs	r0, r0, r5
 8006608:	6060      	str	r0, [r4, #4]
 800660a:	6863      	ldr	r3, [r4, #4]
 800660c:	6123      	str	r3, [r4, #16]
 800660e:	2300      	movs	r3, #0
 8006610:	9a02      	ldr	r2, [sp, #8]
 8006612:	7013      	strb	r3, [r2, #0]
 8006614:	e03c      	b.n	8006690 <_printf_i+0x1ec>
 8006616:	6923      	ldr	r3, [r4, #16]
 8006618:	002a      	movs	r2, r5
 800661a:	9904      	ldr	r1, [sp, #16]
 800661c:	9803      	ldr	r0, [sp, #12]
 800661e:	9d05      	ldr	r5, [sp, #20]
 8006620:	47a8      	blx	r5
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	d03e      	beq.n	80066a4 <_printf_i+0x200>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	079b      	lsls	r3, r3, #30
 800662a:	d415      	bmi.n	8006658 <_printf_i+0x1b4>
 800662c:	9b07      	ldr	r3, [sp, #28]
 800662e:	68e0      	ldr	r0, [r4, #12]
 8006630:	4298      	cmp	r0, r3
 8006632:	da39      	bge.n	80066a8 <_printf_i+0x204>
 8006634:	0018      	movs	r0, r3
 8006636:	e037      	b.n	80066a8 <_printf_i+0x204>
 8006638:	0022      	movs	r2, r4
 800663a:	2301      	movs	r3, #1
 800663c:	3219      	adds	r2, #25
 800663e:	9904      	ldr	r1, [sp, #16]
 8006640:	9803      	ldr	r0, [sp, #12]
 8006642:	9e05      	ldr	r6, [sp, #20]
 8006644:	47b0      	blx	r6
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	d02c      	beq.n	80066a4 <_printf_i+0x200>
 800664a:	3501      	adds	r5, #1
 800664c:	68e3      	ldr	r3, [r4, #12]
 800664e:	9a07      	ldr	r2, [sp, #28]
 8006650:	1a9b      	subs	r3, r3, r2
 8006652:	42ab      	cmp	r3, r5
 8006654:	dcf0      	bgt.n	8006638 <_printf_i+0x194>
 8006656:	e7e9      	b.n	800662c <_printf_i+0x188>
 8006658:	2500      	movs	r5, #0
 800665a:	e7f7      	b.n	800664c <_printf_i+0x1a8>
 800665c:	2800      	cmp	r0, #0
 800665e:	d0ad      	beq.n	80065bc <_printf_i+0x118>
 8006660:	9d02      	ldr	r5, [sp, #8]
 8006662:	0039      	movs	r1, r7
 8006664:	f7f9 fdd6 	bl	8000214 <__aeabi_uidivmod>
 8006668:	5c73      	ldrb	r3, [r6, r1]
 800666a:	3d01      	subs	r5, #1
 800666c:	702b      	strb	r3, [r5, #0]
 800666e:	2800      	cmp	r0, #0
 8006670:	d1f7      	bne.n	8006662 <_printf_i+0x1be>
 8006672:	2f08      	cmp	r7, #8
 8006674:	d109      	bne.n	800668a <_printf_i+0x1e6>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	07db      	lsls	r3, r3, #31
 800667a:	d506      	bpl.n	800668a <_printf_i+0x1e6>
 800667c:	6863      	ldr	r3, [r4, #4]
 800667e:	6922      	ldr	r2, [r4, #16]
 8006680:	4293      	cmp	r3, r2
 8006682:	dc02      	bgt.n	800668a <_printf_i+0x1e6>
 8006684:	2330      	movs	r3, #48	; 0x30
 8006686:	3d01      	subs	r5, #1
 8006688:	702b      	strb	r3, [r5, #0]
 800668a:	9b02      	ldr	r3, [sp, #8]
 800668c:	1b5b      	subs	r3, r3, r5
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	9b05      	ldr	r3, [sp, #20]
 8006692:	aa07      	add	r2, sp, #28
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	0021      	movs	r1, r4
 8006698:	9b04      	ldr	r3, [sp, #16]
 800669a:	9803      	ldr	r0, [sp, #12]
 800669c:	f7ff fe94 	bl	80063c8 <_printf_common>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	d1b8      	bne.n	8006616 <_printf_i+0x172>
 80066a4:	2001      	movs	r0, #1
 80066a6:	4240      	negs	r0, r0
 80066a8:	b009      	add	sp, #36	; 0x24
 80066aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ac:	0800a013 	.word	0x0800a013
 80066b0:	0800a024 	.word	0x0800a024

080066b4 <memchr>:
 80066b4:	b2c9      	uxtb	r1, r1
 80066b6:	1882      	adds	r2, r0, r2
 80066b8:	4290      	cmp	r0, r2
 80066ba:	d101      	bne.n	80066c0 <memchr+0xc>
 80066bc:	2000      	movs	r0, #0
 80066be:	4770      	bx	lr
 80066c0:	7803      	ldrb	r3, [r0, #0]
 80066c2:	428b      	cmp	r3, r1
 80066c4:	d0fb      	beq.n	80066be <memchr+0xa>
 80066c6:	3001      	adds	r0, #1
 80066c8:	e7f6      	b.n	80066b8 <memchr+0x4>

080066ca <memcpy>:
 80066ca:	2300      	movs	r3, #0
 80066cc:	b510      	push	{r4, lr}
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d100      	bne.n	80066d4 <memcpy+0xa>
 80066d2:	bd10      	pop	{r4, pc}
 80066d4:	5ccc      	ldrb	r4, [r1, r3]
 80066d6:	54c4      	strb	r4, [r0, r3]
 80066d8:	3301      	adds	r3, #1
 80066da:	e7f8      	b.n	80066ce <memcpy+0x4>

080066dc <memmove>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4288      	cmp	r0, r1
 80066e0:	d902      	bls.n	80066e8 <memmove+0xc>
 80066e2:	188b      	adds	r3, r1, r2
 80066e4:	4298      	cmp	r0, r3
 80066e6:	d303      	bcc.n	80066f0 <memmove+0x14>
 80066e8:	2300      	movs	r3, #0
 80066ea:	e007      	b.n	80066fc <memmove+0x20>
 80066ec:	5c8b      	ldrb	r3, [r1, r2]
 80066ee:	5483      	strb	r3, [r0, r2]
 80066f0:	3a01      	subs	r2, #1
 80066f2:	d2fb      	bcs.n	80066ec <memmove+0x10>
 80066f4:	bd10      	pop	{r4, pc}
 80066f6:	5ccc      	ldrb	r4, [r1, r3]
 80066f8:	54c4      	strb	r4, [r0, r3]
 80066fa:	3301      	adds	r3, #1
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d1fa      	bne.n	80066f6 <memmove+0x1a>
 8006700:	e7f8      	b.n	80066f4 <memmove+0x18>
	...

08006704 <_free_r>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	0005      	movs	r5, r0
 8006708:	2900      	cmp	r1, #0
 800670a:	d010      	beq.n	800672e <_free_r+0x2a>
 800670c:	1f0c      	subs	r4, r1, #4
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	da00      	bge.n	8006716 <_free_r+0x12>
 8006714:	18e4      	adds	r4, r4, r3
 8006716:	0028      	movs	r0, r5
 8006718:	f000 f8d4 	bl	80068c4 <__malloc_lock>
 800671c:	4a1d      	ldr	r2, [pc, #116]	; (8006794 <_free_r+0x90>)
 800671e:	6813      	ldr	r3, [r2, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d105      	bne.n	8006730 <_free_r+0x2c>
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	6014      	str	r4, [r2, #0]
 8006728:	0028      	movs	r0, r5
 800672a:	f000 f8cc 	bl	80068c6 <__malloc_unlock>
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	42a3      	cmp	r3, r4
 8006732:	d909      	bls.n	8006748 <_free_r+0x44>
 8006734:	6821      	ldr	r1, [r4, #0]
 8006736:	1860      	adds	r0, r4, r1
 8006738:	4283      	cmp	r3, r0
 800673a:	d1f3      	bne.n	8006724 <_free_r+0x20>
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	1841      	adds	r1, r0, r1
 8006742:	6021      	str	r1, [r4, #0]
 8006744:	e7ee      	b.n	8006724 <_free_r+0x20>
 8006746:	0013      	movs	r3, r2
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	2a00      	cmp	r2, #0
 800674c:	d001      	beq.n	8006752 <_free_r+0x4e>
 800674e:	42a2      	cmp	r2, r4
 8006750:	d9f9      	bls.n	8006746 <_free_r+0x42>
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	1858      	adds	r0, r3, r1
 8006756:	42a0      	cmp	r0, r4
 8006758:	d10b      	bne.n	8006772 <_free_r+0x6e>
 800675a:	6820      	ldr	r0, [r4, #0]
 800675c:	1809      	adds	r1, r1, r0
 800675e:	1858      	adds	r0, r3, r1
 8006760:	6019      	str	r1, [r3, #0]
 8006762:	4282      	cmp	r2, r0
 8006764:	d1e0      	bne.n	8006728 <_free_r+0x24>
 8006766:	6810      	ldr	r0, [r2, #0]
 8006768:	6852      	ldr	r2, [r2, #4]
 800676a:	1841      	adds	r1, r0, r1
 800676c:	6019      	str	r1, [r3, #0]
 800676e:	605a      	str	r2, [r3, #4]
 8006770:	e7da      	b.n	8006728 <_free_r+0x24>
 8006772:	42a0      	cmp	r0, r4
 8006774:	d902      	bls.n	800677c <_free_r+0x78>
 8006776:	230c      	movs	r3, #12
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	e7d5      	b.n	8006728 <_free_r+0x24>
 800677c:	6821      	ldr	r1, [r4, #0]
 800677e:	1860      	adds	r0, r4, r1
 8006780:	4282      	cmp	r2, r0
 8006782:	d103      	bne.n	800678c <_free_r+0x88>
 8006784:	6810      	ldr	r0, [r2, #0]
 8006786:	6852      	ldr	r2, [r2, #4]
 8006788:	1841      	adds	r1, r0, r1
 800678a:	6021      	str	r1, [r4, #0]
 800678c:	6062      	str	r2, [r4, #4]
 800678e:	605c      	str	r4, [r3, #4]
 8006790:	e7ca      	b.n	8006728 <_free_r+0x24>
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	20000e8c 	.word	0x20000e8c

08006798 <_malloc_r>:
 8006798:	2303      	movs	r3, #3
 800679a:	b570      	push	{r4, r5, r6, lr}
 800679c:	1ccd      	adds	r5, r1, #3
 800679e:	439d      	bics	r5, r3
 80067a0:	3508      	adds	r5, #8
 80067a2:	0006      	movs	r6, r0
 80067a4:	2d0c      	cmp	r5, #12
 80067a6:	d21e      	bcs.n	80067e6 <_malloc_r+0x4e>
 80067a8:	250c      	movs	r5, #12
 80067aa:	42a9      	cmp	r1, r5
 80067ac:	d81d      	bhi.n	80067ea <_malloc_r+0x52>
 80067ae:	0030      	movs	r0, r6
 80067b0:	f000 f888 	bl	80068c4 <__malloc_lock>
 80067b4:	4a25      	ldr	r2, [pc, #148]	; (800684c <_malloc_r+0xb4>)
 80067b6:	6814      	ldr	r4, [r2, #0]
 80067b8:	0021      	movs	r1, r4
 80067ba:	2900      	cmp	r1, #0
 80067bc:	d119      	bne.n	80067f2 <_malloc_r+0x5a>
 80067be:	4c24      	ldr	r4, [pc, #144]	; (8006850 <_malloc_r+0xb8>)
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d103      	bne.n	80067ce <_malloc_r+0x36>
 80067c6:	0030      	movs	r0, r6
 80067c8:	f000 f86a 	bl	80068a0 <_sbrk_r>
 80067cc:	6020      	str	r0, [r4, #0]
 80067ce:	0029      	movs	r1, r5
 80067d0:	0030      	movs	r0, r6
 80067d2:	f000 f865 	bl	80068a0 <_sbrk_r>
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	d12b      	bne.n	8006832 <_malloc_r+0x9a>
 80067da:	230c      	movs	r3, #12
 80067dc:	0030      	movs	r0, r6
 80067de:	6033      	str	r3, [r6, #0]
 80067e0:	f000 f871 	bl	80068c6 <__malloc_unlock>
 80067e4:	e003      	b.n	80067ee <_malloc_r+0x56>
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	dadf      	bge.n	80067aa <_malloc_r+0x12>
 80067ea:	230c      	movs	r3, #12
 80067ec:	6033      	str	r3, [r6, #0]
 80067ee:	2000      	movs	r0, #0
 80067f0:	bd70      	pop	{r4, r5, r6, pc}
 80067f2:	680b      	ldr	r3, [r1, #0]
 80067f4:	1b5b      	subs	r3, r3, r5
 80067f6:	d419      	bmi.n	800682c <_malloc_r+0x94>
 80067f8:	2b0b      	cmp	r3, #11
 80067fa:	d903      	bls.n	8006804 <_malloc_r+0x6c>
 80067fc:	600b      	str	r3, [r1, #0]
 80067fe:	18cc      	adds	r4, r1, r3
 8006800:	6025      	str	r5, [r4, #0]
 8006802:	e003      	b.n	800680c <_malloc_r+0x74>
 8006804:	684b      	ldr	r3, [r1, #4]
 8006806:	428c      	cmp	r4, r1
 8006808:	d10d      	bne.n	8006826 <_malloc_r+0x8e>
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	0030      	movs	r0, r6
 800680e:	f000 f85a 	bl	80068c6 <__malloc_unlock>
 8006812:	0020      	movs	r0, r4
 8006814:	2207      	movs	r2, #7
 8006816:	300b      	adds	r0, #11
 8006818:	1d23      	adds	r3, r4, #4
 800681a:	4390      	bics	r0, r2
 800681c:	1ac3      	subs	r3, r0, r3
 800681e:	d0e7      	beq.n	80067f0 <_malloc_r+0x58>
 8006820:	425a      	negs	r2, r3
 8006822:	50e2      	str	r2, [r4, r3]
 8006824:	e7e4      	b.n	80067f0 <_malloc_r+0x58>
 8006826:	6063      	str	r3, [r4, #4]
 8006828:	000c      	movs	r4, r1
 800682a:	e7ef      	b.n	800680c <_malloc_r+0x74>
 800682c:	000c      	movs	r4, r1
 800682e:	6849      	ldr	r1, [r1, #4]
 8006830:	e7c3      	b.n	80067ba <_malloc_r+0x22>
 8006832:	2303      	movs	r3, #3
 8006834:	1cc4      	adds	r4, r0, #3
 8006836:	439c      	bics	r4, r3
 8006838:	42a0      	cmp	r0, r4
 800683a:	d0e1      	beq.n	8006800 <_malloc_r+0x68>
 800683c:	1a21      	subs	r1, r4, r0
 800683e:	0030      	movs	r0, r6
 8006840:	f000 f82e 	bl	80068a0 <_sbrk_r>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d1db      	bne.n	8006800 <_malloc_r+0x68>
 8006848:	e7c7      	b.n	80067da <_malloc_r+0x42>
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	20000e8c 	.word	0x20000e8c
 8006850:	20000e90 	.word	0x20000e90

08006854 <_realloc_r>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	0007      	movs	r7, r0
 8006858:	000d      	movs	r5, r1
 800685a:	0016      	movs	r6, r2
 800685c:	2900      	cmp	r1, #0
 800685e:	d105      	bne.n	800686c <_realloc_r+0x18>
 8006860:	0011      	movs	r1, r2
 8006862:	f7ff ff99 	bl	8006798 <_malloc_r>
 8006866:	0004      	movs	r4, r0
 8006868:	0020      	movs	r0, r4
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800686c:	2a00      	cmp	r2, #0
 800686e:	d103      	bne.n	8006878 <_realloc_r+0x24>
 8006870:	f7ff ff48 	bl	8006704 <_free_r>
 8006874:	0034      	movs	r4, r6
 8006876:	e7f7      	b.n	8006868 <_realloc_r+0x14>
 8006878:	f000 f826 	bl	80068c8 <_malloc_usable_size_r>
 800687c:	002c      	movs	r4, r5
 800687e:	42b0      	cmp	r0, r6
 8006880:	d2f2      	bcs.n	8006868 <_realloc_r+0x14>
 8006882:	0031      	movs	r1, r6
 8006884:	0038      	movs	r0, r7
 8006886:	f7ff ff87 	bl	8006798 <_malloc_r>
 800688a:	1e04      	subs	r4, r0, #0
 800688c:	d0ec      	beq.n	8006868 <_realloc_r+0x14>
 800688e:	0029      	movs	r1, r5
 8006890:	0032      	movs	r2, r6
 8006892:	f7ff ff1a 	bl	80066ca <memcpy>
 8006896:	0029      	movs	r1, r5
 8006898:	0038      	movs	r0, r7
 800689a:	f7ff ff33 	bl	8006704 <_free_r>
 800689e:	e7e3      	b.n	8006868 <_realloc_r+0x14>

080068a0 <_sbrk_r>:
 80068a0:	2300      	movs	r3, #0
 80068a2:	b570      	push	{r4, r5, r6, lr}
 80068a4:	4c06      	ldr	r4, [pc, #24]	; (80068c0 <_sbrk_r+0x20>)
 80068a6:	0005      	movs	r5, r0
 80068a8:	0008      	movs	r0, r1
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	f7fa fb92 	bl	8000fd4 <_sbrk>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d103      	bne.n	80068bc <_sbrk_r+0x1c>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d000      	beq.n	80068bc <_sbrk_r+0x1c>
 80068ba:	602b      	str	r3, [r5, #0]
 80068bc:	bd70      	pop	{r4, r5, r6, pc}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	200013ac 	.word	0x200013ac

080068c4 <__malloc_lock>:
 80068c4:	4770      	bx	lr

080068c6 <__malloc_unlock>:
 80068c6:	4770      	bx	lr

080068c8 <_malloc_usable_size_r>:
 80068c8:	1f0b      	subs	r3, r1, #4
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	1f18      	subs	r0, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	da01      	bge.n	80068d6 <_malloc_usable_size_r+0xe>
 80068d2:	580b      	ldr	r3, [r1, r0]
 80068d4:	18c0      	adds	r0, r0, r3
 80068d6:	4770      	bx	lr

080068d8 <_init>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	46c0      	nop			; (mov r8, r8)
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr

080068e4 <_fini>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr
